[{"uri":"/FSharpPlusreference/fsharpplus.html","title":"FSharpPlus","content":"Array \nAsync \nBuilders \nChoice \nDict \nDictionary \nEnumerator \nExtensions \nIList \nIReadOnlyCollection \nIReadOnlyDictionary \nIReadOnlyList \nLazy \nLens \nList \nMap \nMemoization \nNullable \nOperators \nOption \nParsing \nResizeArray \nResult \nSeq \nString \nTask \nTuple2 \nTuple3"},{"uri":"/FSharpPlusreference/fsharpplus-control.html","title":"FSharpPlus.Control","content":"TryBlock \nAbs \nAbs' \nAcLeft \nAcMerge \nAcRight \nApp \nAppend \nApply \nArr \nArrCombine \nArrFirst \nArrSecond \nArrayToTuple \nAsk \nAssertTupleType \nBifold \nBifoldBack \nBifoldMap \nBimap \nBind \nBisequence \nBisum \nBitraverse \nCallCC \nCatch \nChoice \nChoose \nChunkBy \nComp \nComposedStaticInvokable<'F, 'G> \nContramap \nCountTuple \nCurry \nDelay \nDimap \nDistinct \nDistinctBy \nDivRem \nDivide \nDrop \nDuplicate \nEmpty \nExists \nExplicit \nExtend \nExtract \nFanin \nFanout \nFilter \nFind \nFindIndex \nFindSliceIndex \nFold \nFoldBack \nFoldIndexed \nFoldMap \nForAll \nFromBigInt \nFromInt32 \nFromInt64 \nGet \nGroupBy \nHead \nId \nIntercalate \nIntersperse \nInvmap \nInvoke \nIsAltLeftZero \nIsLeftZero \nItem \nItem1 \nItem2 \nItem3 \nItem4 \nItem5 \nIterate \nIterateIndexed \nJoin \nLength \nLift \nLift2 \nLiftAsync \nLimit \nListen \nLocal \nMap \nMapFirst \nMapIndexed \nMapItem1 \nMapItem2 \nMapItem3 \nMapItem4 \nMapItem5 \nMax \nMaxBy \nMaxValue \nMin \nMinBy \nMinValue \nNth \nOfBytes \nOfList \nOfSeq \nOne \nParse \nPass \nPi \nPick \nPlus \nPut \nReduce \nReplace \nReturn \nRev \nScan \nSequence \nSignum \nSignum' \nSkip \nSkipWhile \nSort \nSortBy \nSortByDescending \nSplit \nSqrt \nSubtract \nSum \nTake \nTakeWhile \nTell \nThrow \nToArray \nToBigInt \nToBytes \nToList \nToSeq \nTraverse \nTraverseIndexed \nTryDivide \nTryFinally \nTryFind \nTryFindIndex \nTryFindSliceIndex \nTryHead \nTryItem \nTryNegate \nTryNegate' \nTryParse \nTryPick \nTrySqrt \nTrySqrtRem \nTrySubtract \nTryWith \nTupleToList \nUncurry \nUnzip \nUsing \nZero \nZip"},{"uri":"/FSharpPlusreference/fsharpplus-data.html","title":"FSharpPlus.Data","content":"ChoiceT \nCompose \nConst \nCont \nContT \nCoproductPrimitives \nDList \nDual \nEndo \nFree \nFreePrimitives \nIdentity \nKleisli \nList \nListT \nMatrix \nMatrixOperators \nNonEmptyList \nNonEmptyListBuilder \nNonEmptyListBuilderExtensions \nNonEmptyMap \nNonEmptySeq \nNonEmptySeqBuilder \nNonEmptySet \nOption \nOptionT \nParallelArray \nParallelArrayOperators \nReader \nReaderT \nResult \nResultOrException \nResultT \nSeq \nSeqT \nState \nStateT \nValidation \nVector \nWriter \nWriterT \nZipList \nAll \nAny \nChoiceT<'monad<'choice<'t,'e>>> \nCompose<'functorF<'functorG<'t>>> \nConst<'t, 'u> \nCont<'r, 't> \nContT<'r, 't> \nCoproduct<'functorL<'t>, 'functorR<'t>> \nCoproductBase<'functorL<'t>, 'functorR<'t>> \nDList<'T> \nDListData<'T> \nDual<'t> \nEndo<'t> \nFirst<'t> \nFree<'functor<'t>, 't> \nIdentity<'t> \nKleisli<'t, 'monad<'u>> \nLast<'t> \nListT<'monad<list<'t>>> \nMatrix<'Item, 'Row, 'Column> \nMult<'a> \nNonEmptyList<'t> \nNonEmptyMap<'Key, 'Value> \nNonEmptySeq<'T> \nNonEmptySet<'a> \nOptionT<'monad<option<'t>>> \nParallelArray<'t> \nReader<'r, 't> \nReaderT<'r, 'monad<'t>> \nResultT<'monad<'result<'t,'e>>> \nSeqT<'monad<seq<'t>>> \nState<'s, 't> \nStateT<'s, 'monad<'t * 's>> \nValidation<'error, 't> \nVector<'Item, 'Length> \nWriter<'monoid, 't> \nWriterT<'monad<'t * 'monoid>> \nZipList<'s> \nnelist<'t> \nnemap<'Key, 'Value> \nneseq<'t> \nneset<'t> \nparray<'t>"},{"uri":"/FSharpPlusreference/fsharpplus-internals.html","title":"FSharpPlus.Internals","content":"BigInteger \nConstraints \nDecimal \nErrors \nFindSliceIndex \nId \nRational \nBitConverter \nDefault1 \nDefault2 \nDefault3 \nDefault4 \nDefault5 \nDefault6 \nDmStruct \nEither<'t, 'u> \nId<'t> \nId0 \nSet2<'T> \n_Dual<'T> \n_Endo<'T>"},{"uri":"/FSharpPlusreference/fsharpplus-math.html","title":"FSharpPlus.Math","content":"Applicative \nGeneric"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel.html","title":"FSharpPlus.TypeLevel","content":"NatOp \nTypeBool \nTypeLevelOperators \nTypeNat \nTypeOp \nAggregatedBoolTypeError<'a> \nAggregatedNatTypeError<'a> \nBoolTypeError<'a> \nBoolTypeErrorLifter \nDividedByZeroError \nFalse \nIErrorLiftable<'a> \nITypeBool \nITypeLiteral \nITypeNat \nNatTypeError<'a> \nNatTypeErrorLifter \nOverflowError \nS<'n> \nTrue \nTryWithImpl \nTypeError<'a> \nZ"},{"uri":"/FSharpPlusreference/fsharpplus-array.html","title":"Array","content":"Array \n\n Additional operations on Array\n \nArray.apply \napply \nArray.lift2 \nlift2 \nArray.intercalate \nintercalate \nArray.intersperse \nintersperse \nArray.split \nsplit \nArray.replace \nreplace \nArray.findSliceIndex \nfindSliceIndex \nArray.tryFindSliceIndex \ntryFindSliceIndex \nArray.partitionMap \npartitionMap"},{"uri":"/FSharpPlusreference/fsharpplus-array.html#apply","title":"Array.apply","content":"Array.apply \napply \nApplies an array of functions to an array of values and concatenates them."},{"uri":"/FSharpPlusreference/fsharpplus-array.html#lift2","title":"Array.lift2","content":"Array.lift2 \nlift2 \n\n Combines all values from the first array with the second, using the supplied mapping function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-array.html#intercalate","title":"Array.intercalate","content":"Array.intercalate \nintercalate \n\n Concatenates all elements, using the specified separator between each element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-array.html#intersperse","title":"Array.intersperse","content":"Array.intersperse \nintersperse \n\n Inserts a separator element between each element in the source array.\n"},{"uri":"/FSharpPlusreference/fsharpplus-array.html#split","title":"Array.split","content":"Array.split \nsplit \n\n Creates a sequence of arrays by splitting the source array on any of the given separators.\n"},{"uri":"/FSharpPlusreference/fsharpplus-array.html#replace","title":"Array.replace","content":"Array.replace \nreplace \n\n Replaces a subsequence of the source array with the given replacement array.\n"},{"uri":"/FSharpPlusreference/fsharpplus-array.html#findSliceIndex","title":"Array.findSliceIndex","content":"Array.findSliceIndex \nfindSliceIndex \n\n Returns the index of the first occurrence of the specified slice in the source.\n \n Returns the index of the first occurrence of the specified slice in the source.\n Note: this is unsafe and will throw ArgumentException when the specified slice is not found.\n "},{"uri":"/FSharpPlusreference/fsharpplus-array.html#tryFindSliceIndex","title":"Array.tryFindSliceIndex","content":"Array.tryFindSliceIndex \ntryFindSliceIndex \n\n Returns the index of the first occurrence of the specified slice in the source.\n Returns <code>None</code> if not found.\n "},{"uri":"/FSharpPlusreference/fsharpplus-array.html#partitionMap","title":"Array.partitionMap","content":"Array.partitionMap \npartitionMap \n\n Creates two arrays by applying the mapper function to each element in the array\n and classifies the transformed values depending on whether they were wrapped with Choice1Of2 or Choice2Of2.\n "},{"uri":"/FSharpPlusreference/fsharpplus-async.html","title":"Async","content":"Async \n\n Additional operations on Async\n \nAsync.map \nmap \nAsync.map2 \nmap2 \nAsync.zip \nzip \nAsync.join \njoin \nAsync.apply \napply \nAsync.raise \nraise"},{"uri":"/FSharpPlusreference/fsharpplus-async.html#map","title":"Async.map","content":"Async.map \nmap \nCreates an async workflow from another workflow 'x', mapping its result with 'f'."},{"uri":"/FSharpPlusreference/fsharpplus-async.html#map2","title":"Async.map2","content":"Async.map2 \nmap2 \nCreates an async workflow from two workflows 'x' and 'y', mapping its results with 'f'. \nWorkflows are run in sequence."},{"uri":"/FSharpPlusreference/fsharpplus-async.html#zip","title":"Async.zip","content":"Async.zip \nzip \nCreates an async workflow from two workflows 'x' and 'y', tupling its results."},{"uri":"/FSharpPlusreference/fsharpplus-async.html#join","title":"Async.join","content":"Async.join \njoin \n\n Flatten two nested asyncs into one.\n"},{"uri":"/FSharpPlusreference/fsharpplus-async.html#apply","title":"Async.apply","content":"Async.apply \napply \nCreates an async workflow that is the result of applying the resulting function of\n an async workflow to the resulting value of another async workflow."},{"uri":"/FSharpPlusreference/fsharpplus-async.html#raise","title":"Async.raise","content":"Async.raise \nraise \n\n Raises an exception in the async workflow\n"},{"uri":"/FSharpPlusreference/fsharpplus-builders.html","title":"Builders","content":"Builders \n\n Constructs to express generic computations\n \nBuilders.Builder \nBuilder \nBuilders.DelayedBuilder \nDelayedBuilder \nBuilders.Idiomatic \nIdiomatic \nBuilders.Ii \nIi \nBuilders.J \nJ \nBuilders.Ji \nJi \nBuilders.MonadFxBuilder \nMonadFxBuilder \nBuilders.MonadFxStrictBuilder \nMonadFxStrictBuilder \nBuilders.MonadPlusBuilder \nMonadPlusBuilder \nBuilders.MonadPlusStrictBuilder \nMonadPlusStrictBuilder \nBuilders.StrictBuilder \nStrictBuilder \nBuilders.idiomatic \nidiomatic \nBuilders.iI \niI \nBuilders.monad \nmonad \nBuilders.monad' \nmonad'"},{"uri":"/FSharpPlusreference/fsharpplus-builders.html#idiomatic","title":"Builders.idiomatic","content":"Builders.idiomatic \nidiomatic \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders.html#iI","title":"Builders.iI","content":"Builders.iI \niI \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders.html#monad","title":"Builders.monad","content":"Builders.monad \nmonad \n\n Creates a (lazy) monadic computation expression with side-effects (see http://fsprojects.github.io/FSharpPlus/computation-expressions.html for more information)\n"},{"uri":"/FSharpPlusreference/fsharpplus-builders.html#monad'","title":"Builders.monad'","content":"Builders.monad' \nmonad' \n\n Creates a strict monadic computation expression with side-effects (see http://fsprojects.github.io/FSharpPlus/computation-expressions.html for more information)\n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html","title":"Builder","content":"Builder \n \nBuilder.( .ctor ) \n( .ctor ) \nBuilder.Bind \nBind \nBuilder.BindReturn \nBindReturn \nBuilder.ChunkBy \nChunkBy \nBuilder.GroupBy \nGroupBy \nBuilder.MergeSources \nMergeSources \nBuilder.OrderBy \nOrderBy \nBuilder.Return \nReturn \nBuilder.ReturnFrom \nReturnFrom \nBuilder.Select \nSelect \nBuilder.Top \nTop \nBuilder.Where \nWhere \nBuilder.Yield \nYield"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html#( .ctor )","title":"Builder.( .ctor )","content":"Builder.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html#Bind","title":"Builder.Bind","content":"Builder.Bind \nBind \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html#BindReturn","title":"Builder.BindReturn","content":"Builder.BindReturn \nBindReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html#ChunkBy","title":"Builder.ChunkBy","content":"Builder.ChunkBy \nChunkBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html#GroupBy","title":"Builder.GroupBy","content":"Builder.GroupBy \nGroupBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html#MergeSources","title":"Builder.MergeSources","content":"Builder.MergeSources \nMergeSources \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html#OrderBy","title":"Builder.OrderBy","content":"Builder.OrderBy \nOrderBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html#Return","title":"Builder.Return","content":"Builder.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html#ReturnFrom","title":"Builder.ReturnFrom","content":"Builder.ReturnFrom \nReturnFrom \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html#Select","title":"Builder.Select","content":"Builder.Select \nSelect \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html#Top","title":"Builder.Top","content":"Builder.Top \nTop \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html#Where","title":"Builder.Where","content":"Builder.Where \nWhere \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-builder.html#Yield","title":"Builder.Yield","content":"Builder.Yield \nYield \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-delayedbuilder.html","title":"DelayedBuilder","content":"DelayedBuilder \n \nDelayedBuilder.( .ctor ) \n( .ctor ) \nDelayedBuilder.Delay \nDelay \nDelayedBuilder.Run \nRun \nDelayedBuilder.TryFinally \nTryFinally \nDelayedBuilder.TryWith \nTryWith \nDelayedBuilder.Using \nUsing"},{"uri":"/FSharpPlusreference/fsharpplus-builders-delayedbuilder.html#( .ctor )","title":"DelayedBuilder.( .ctor )","content":"DelayedBuilder.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-delayedbuilder.html#Delay","title":"DelayedBuilder.Delay","content":"DelayedBuilder.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-delayedbuilder.html#Run","title":"DelayedBuilder.Run","content":"DelayedBuilder.Run \nRun \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-delayedbuilder.html#TryFinally","title":"DelayedBuilder.TryFinally","content":"DelayedBuilder.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-delayedbuilder.html#TryWith","title":"DelayedBuilder.TryWith","content":"DelayedBuilder.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-delayedbuilder.html#Using","title":"DelayedBuilder.Using","content":"DelayedBuilder.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-idiomatic.html","title":"Idiomatic","content":"Idiomatic \n \nIdiomatic.( $ ) \n( $ ) \nIdiomatic.( $ ) \n( $ ) \nIdiomatic.( $ ) \n( $ ) \nIdiomatic.( $ ) \n( $ ) \nIdiomatic.Idiomatic \nIdiomatic"},{"uri":"/FSharpPlusreference/fsharpplus-builders-idiomatic.html#( $ )","title":"Idiomatic.( $ )","content":"Idiomatic.( $ ) \n( $ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-idiomatic.html#( $ )","title":"Idiomatic.( $ )","content":"Idiomatic.( $ ) \n( $ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-idiomatic.html#( $ )","title":"Idiomatic.( $ )","content":"Idiomatic.( $ ) \n( $ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-idiomatic.html#( $ )","title":"Idiomatic.( $ )","content":"Idiomatic.( $ ) \n( $ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-idiomatic.html#Idiomatic","title":"Idiomatic.Idiomatic","content":"Idiomatic.Idiomatic \nIdiomatic \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-ii.html","title":"Ii","content":"Ii \n \nIi.Ii \nIi"},{"uri":"/FSharpPlusreference/fsharpplus-builders-ii.html#Ii","title":"Ii.Ii","content":"Ii.Ii \nIi \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-j.html","title":"J","content":"J \n \nJ.J \nJ"},{"uri":"/FSharpPlusreference/fsharpplus-builders-j.html#J","title":"J.J","content":"J.J \nJ \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-ji.html","title":"Ji","content":"Ji \n \nJi.Ji \nJi"},{"uri":"/FSharpPlusreference/fsharpplus-builders-ji.html#Ji","title":"Ji.Ji","content":"Ji.Ji \nJi \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxbuilder.html","title":"MonadFxBuilder","content":"MonadFxBuilder \n \nMonadFxBuilder.( .ctor ) \n( .ctor ) \nMonadFxBuilder.Combine \nCombine \nMonadFxBuilder.For \nFor \nMonadFxBuilder.While \nWhile \nMonadFxBuilder.WhileImpl \nWhileImpl \nMonadFxBuilder.Zero \nZero \nMonadFxBuilder.strict \nstrict \nMonadFxBuilder.plus' \nplus' \nMonadFxBuilder.plus \nplus \nMonadFxBuilder.fx' \nfx' \nMonadFxBuilder.fx \nfx"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxbuilder.html#( .ctor )","title":"MonadFxBuilder.( .ctor )","content":"MonadFxBuilder.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxbuilder.html#Combine","title":"MonadFxBuilder.Combine","content":"MonadFxBuilder.Combine \nCombine \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxbuilder.html#For","title":"MonadFxBuilder.For","content":"MonadFxBuilder.For \nFor \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxbuilder.html#While","title":"MonadFxBuilder.While","content":"MonadFxBuilder.While \nWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxbuilder.html#WhileImpl","title":"MonadFxBuilder.WhileImpl","content":"MonadFxBuilder.WhileImpl \nWhileImpl \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxbuilder.html#Zero","title":"MonadFxBuilder.Zero","content":"MonadFxBuilder.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxbuilder.html#strict","title":"MonadFxBuilder.strict","content":"MonadFxBuilder.strict \nstrict \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxbuilder.html#plus'","title":"MonadFxBuilder.plus'","content":"MonadFxBuilder.plus' \nplus' \n\n Makes it a strict monadplus computation expression.\n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxbuilder.html#plus","title":"MonadFxBuilder.plus","content":"MonadFxBuilder.plus \nplus \n\n Makes it a (lazy) monadplus computation expression.\n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxbuilder.html#fx'","title":"MonadFxBuilder.fx'","content":"MonadFxBuilder.fx' \nfx' \n\n Makes it a strict monadic computation expression with side-effects\n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxbuilder.html#fx","title":"MonadFxBuilder.fx","content":"MonadFxBuilder.fx \nfx \n\n Makes it a (lazy) monadic computation expression with side-effects\n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxstrictbuilder.html","title":"MonadFxStrictBuilder","content":"MonadFxStrictBuilder \n \nMonadFxStrictBuilder.( .ctor ) \n( .ctor ) \nMonadFxStrictBuilder.Combine \nCombine \nMonadFxStrictBuilder.For \nFor \nMonadFxStrictBuilder.While \nWhile \nMonadFxStrictBuilder.Zero \nZero"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxstrictbuilder.html#( .ctor )","title":"MonadFxStrictBuilder.( .ctor )","content":"MonadFxStrictBuilder.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxstrictbuilder.html#Combine","title":"MonadFxStrictBuilder.Combine","content":"MonadFxStrictBuilder.Combine \nCombine \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxstrictbuilder.html#For","title":"MonadFxStrictBuilder.For","content":"MonadFxStrictBuilder.For \nFor \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxstrictbuilder.html#While","title":"MonadFxStrictBuilder.While","content":"MonadFxStrictBuilder.While \nWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadfxstrictbuilder.html#Zero","title":"MonadFxStrictBuilder.Zero","content":"MonadFxStrictBuilder.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusbuilder.html","title":"MonadPlusBuilder","content":"MonadPlusBuilder \n \nMonadPlusBuilder.( .ctor ) \n( .ctor ) \nMonadPlusBuilder.Combine \nCombine \nMonadPlusBuilder.For \nFor \nMonadPlusBuilder.While \nWhile \nMonadPlusBuilder.WhileImpl \nWhileImpl \nMonadPlusBuilder.Zero \nZero \nMonadPlusBuilder.strict \nstrict"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusbuilder.html#( .ctor )","title":"MonadPlusBuilder.( .ctor )","content":"MonadPlusBuilder.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusbuilder.html#Combine","title":"MonadPlusBuilder.Combine","content":"MonadPlusBuilder.Combine \nCombine \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusbuilder.html#For","title":"MonadPlusBuilder.For","content":"MonadPlusBuilder.For \nFor \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusbuilder.html#While","title":"MonadPlusBuilder.While","content":"MonadPlusBuilder.While \nWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusbuilder.html#WhileImpl","title":"MonadPlusBuilder.WhileImpl","content":"MonadPlusBuilder.WhileImpl \nWhileImpl \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusbuilder.html#Zero","title":"MonadPlusBuilder.Zero","content":"MonadPlusBuilder.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusbuilder.html#strict","title":"MonadPlusBuilder.strict","content":"MonadPlusBuilder.strict \nstrict \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusstrictbuilder.html","title":"MonadPlusStrictBuilder","content":"MonadPlusStrictBuilder \n \nMonadPlusStrictBuilder.( .ctor ) \n( .ctor ) \nMonadPlusStrictBuilder.Combine \nCombine \nMonadPlusStrictBuilder.For \nFor \nMonadPlusStrictBuilder.While \nWhile \nMonadPlusStrictBuilder.Zero \nZero"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusstrictbuilder.html#( .ctor )","title":"MonadPlusStrictBuilder.( .ctor )","content":"MonadPlusStrictBuilder.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusstrictbuilder.html#Combine","title":"MonadPlusStrictBuilder.Combine","content":"MonadPlusStrictBuilder.Combine \nCombine \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusstrictbuilder.html#For","title":"MonadPlusStrictBuilder.For","content":"MonadPlusStrictBuilder.For \nFor \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusstrictbuilder.html#While","title":"MonadPlusStrictBuilder.While","content":"MonadPlusStrictBuilder.While \nWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-monadplusstrictbuilder.html#Zero","title":"MonadPlusStrictBuilder.Zero","content":"MonadPlusStrictBuilder.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-strictbuilder.html","title":"StrictBuilder","content":"StrictBuilder \n \nStrictBuilder.( .ctor ) \n( .ctor ) \nStrictBuilder.Delay \nDelay \nStrictBuilder.Run \nRun \nStrictBuilder.TryFinally \nTryFinally \nStrictBuilder.TryWith \nTryWith \nStrictBuilder.Using \nUsing"},{"uri":"/FSharpPlusreference/fsharpplus-builders-strictbuilder.html#( .ctor )","title":"StrictBuilder.( .ctor )","content":"StrictBuilder.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-strictbuilder.html#Delay","title":"StrictBuilder.Delay","content":"StrictBuilder.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-strictbuilder.html#Run","title":"StrictBuilder.Run","content":"StrictBuilder.Run \nRun \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-strictbuilder.html#TryFinally","title":"StrictBuilder.TryFinally","content":"StrictBuilder.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-strictbuilder.html#TryWith","title":"StrictBuilder.TryWith","content":"StrictBuilder.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-builders-strictbuilder.html#Using","title":"StrictBuilder.Using","content":"StrictBuilder.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-choice.html","title":"Choice","content":"Choice \n\n Additional operations on Choice\n \nChoice.result \nresult \nChoice.throw \nthrow \nChoice.apply \napply \nChoice.map \nmap \nChoice.map2 \nmap2 \nChoice.flatten \nflatten \nChoice.bind \nbind \nChoice.catch \ncatch \nChoice.bindChoice2Of2 \nbindChoice2Of2 \nChoice.either \neither \nChoice.protect \nprotect"},{"uri":"/FSharpPlusreference/fsharpplus-choice.html#result","title":"Choice.result","content":"Choice.result \nresult \n\n Creates a Choice1Of2 with the supplied value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-choice.html#throw","title":"Choice.throw","content":"Choice.throw \nthrow \n\n Creates a Choice2Of2 with the supplied value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-choice.html#apply","title":"Choice.apply","content":"Choice.apply \napply \n\n Applies the wrapped value to the wrapped function when both are Choice1Of2 and returns a wrapped result or the first Choice2Of2.\n This is as if Choice1Of2 respresents a Success value and Choice2Of2 a Failure.\n <param name=\"f\">The function wrapped in a Choice1Of2 or a Choice2Of2.</param>\n <param name=\"x\">The value wrapped in a Choice1Of2 or a Choice2Of2.</param>\n <returns>A Choice1Of2 of the function applied to the value, or the first <c>Choice2Of2</c> if either the function or the value is <c>Choice2Of2</c>.</returns>\n"},{"uri":"/FSharpPlusreference/fsharpplus-choice.html#map","title":"Choice.map","content":"Choice.map \nmap \nMaps the value on the Choice1Of2 if any."},{"uri":"/FSharpPlusreference/fsharpplus-choice.html#map2","title":"Choice.map2","content":"Choice.map2 \nmap2 \nCreates a Choice value from a pair of Choice values, using a function to combine the Choice1Of2 values."},{"uri":"/FSharpPlusreference/fsharpplus-choice.html#flatten","title":"Choice.flatten","content":"Choice.flatten \nflatten \nFlattens two nested Choice. \n<code>flatten</code> is equivalent to <code>bind id</code>."},{"uri":"/FSharpPlusreference/fsharpplus-choice.html#bind","title":"Choice.bind","content":"Choice.bind \nbind \nIf the input value is a Choice2Of2 leaves it unchanged, otherwise maps the value on the Choice1Of2 and flattens the resulting nested Choice."},{"uri":"/FSharpPlusreference/fsharpplus-choice.html#catch","title":"Choice.catch","content":"Choice.catch \ncatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-choice.html#bindChoice2Of2","title":"Choice.bindChoice2Of2","content":"Choice.bindChoice2Of2 \nbindChoice2Of2 \nIf the input value is a Choice1Of2 leaves it unchanged, otherwise maps the value on the Choice2Of2 and flattens the resulting nested Choice."},{"uri":"/FSharpPlusreference/fsharpplus-choice.html#either","title":"Choice.either","content":"Choice.either \neither \nExtracts a value from either side of a Choice."},{"uri":"/FSharpPlusreference/fsharpplus-choice.html#protect","title":"Choice.protect","content":"Choice.protect \nprotect \n\n Creates a safe version of the supplied function, which returns a Choice<'U,exn> instead of throwing exceptions.\n"},{"uri":"/FSharpPlusreference/fsharpplus-dict.html","title":"Dict","content":"Dict \n\n Additional operations on IDictionary<'Key, 'Value>\n \nDict.toIReadOnlyDictionary \ntoIReadOnlyDictionary \nDict.tryGetValue \ntryGetValue \nDict.containsKey \ncontainsKey \nDict.keys \nkeys \nDict.values \nvalues \nDict.map \nmap \nDict.map2 \nmap2 \nDict.zip \nzip \nDict.unzip \nunzip \nDict.unionWith \nunionWith \nDict.union \nunion \nDict.intersectWith \nintersectWith \nDict.intersect \nintersect"},{"uri":"/FSharpPlusreference/fsharpplus-dict.html#toIReadOnlyDictionary","title":"Dict.toIReadOnlyDictionary","content":"Dict.toIReadOnlyDictionary \ntoIReadOnlyDictionary \n\n Converts an IDictionary to an IReadOnlyDictionary.\n"},{"uri":"/FSharpPlusreference/fsharpplus-dict.html#tryGetValue","title":"Dict.tryGetValue","content":"Dict.tryGetValue \ntryGetValue \nTries to get the value of the given key. \nThis is a function wrapper for the IDictionary.TryGetValue method,\n representing the result as an Option<value> instead of a bool plus an out-value.\n "},{"uri":"/FSharpPlusreference/fsharpplus-dict.html#containsKey","title":"Dict.containsKey","content":"Dict.containsKey \ncontainsKey \nDoes the dictionary contain the given key? \nNote: this is a function wrapper for the IDictionary.ContainsKey method"},{"uri":"/FSharpPlusreference/fsharpplus-dict.html#keys","title":"Dict.keys","content":"Dict.keys \nkeys \nReturns the keys of the given dictionary."},{"uri":"/FSharpPlusreference/fsharpplus-dict.html#values","title":"Dict.values","content":"Dict.values \nvalues \nReturns the values of the given dictionary."},{"uri":"/FSharpPlusreference/fsharpplus-dict.html#map","title":"Dict.map","content":"Dict.map \nmap \nMaps the given function over each value in the dictionary."},{"uri":"/FSharpPlusreference/fsharpplus-dict.html#map2","title":"Dict.map2","content":"Dict.map2 \nmap2 \nCreates a Dictionary value from a pair of Dictionaries, using a function to combine them. \nKeys that are not present on both dictionaries are dropped."},{"uri":"/FSharpPlusreference/fsharpplus-dict.html#zip","title":"Dict.zip","content":"Dict.zip \nzip \nTuples values of two dictionaries. \nKeys that are not present on both dictionaries are dropped."},{"uri":"/FSharpPlusreference/fsharpplus-dict.html#unzip","title":"Dict.unzip","content":"Dict.unzip \nunzip \nSplits a dictionary with tuple pair values to two separate dictionaries."},{"uri":"/FSharpPlusreference/fsharpplus-dict.html#unionWith","title":"Dict.unionWith","content":"Dict.unionWith \nunionWith \n\n Returns the union of two dictionaries, using the combiner function for duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-dict.html#union","title":"Dict.union","content":"Dict.union \nunion \n\nReturns the union of two maps, preferring values from the first in case of duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-dict.html#intersectWith","title":"Dict.intersectWith","content":"Dict.intersectWith \nintersectWith \n\n Returns the intersection of two Dicts, using the combiner function for duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-dict.html#intersect","title":"Dict.intersect","content":"Dict.intersect \nintersect \n\nReturns the intersection of two Dicts, preferring values from the first in case of duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html","title":"Dictionary","content":"Dictionary \n\n Additional operations on Dictionary<'Key, 'Value>\n \nDictionary.toIReadOnlyDictionary \ntoIReadOnlyDictionary \nDictionary.tryGetValue \ntryGetValue \nDictionary.containsKey \ncontainsKey \nDictionary.keys \nkeys \nDictionary.values \nvalues \nDictionary.map \nmap \nDictionary.map2 \nmap2 \nDictionary.zip \nzip \nDictionary.unzip \nunzip \nDictionary.unionWith \nunionWith \nDictionary.union \nunion \nDictionary.intersectWith \nintersectWith \nDictionary.intersect \nintersect"},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html#toIReadOnlyDictionary","title":"Dictionary.toIReadOnlyDictionary","content":"Dictionary.toIReadOnlyDictionary \ntoIReadOnlyDictionary \n\n Converts a Dictionary to an IReadOnlyDictionary\n"},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html#tryGetValue","title":"Dictionary.tryGetValue","content":"Dictionary.tryGetValue \ntryGetValue \nTries to get the value of the given key. \nNote: this is a function wrapper for the Dictionary.TryGetValue method,\n which also represents the result as an Option<value> instead of a bool\n and an out-value.\n "},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html#containsKey","title":"Dictionary.containsKey","content":"Dictionary.containsKey \ncontainsKey \nDoes the dictionary contain the given key? \nNote: this is a function wrapper for the Dictionary.ContainsKey method."},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html#keys","title":"Dictionary.keys","content":"Dictionary.keys \nkeys \nReturns the keys of the given dictionary."},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html#values","title":"Dictionary.values","content":"Dictionary.values \nvalues \nReturns the values of the given dictionary."},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html#map","title":"Dictionary.map","content":"Dictionary.map \nmap \nMaps the given function over each value in the dictionary."},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html#map2","title":"Dictionary.map2","content":"Dictionary.map2 \nmap2 \nCreates a Dictionary value from a pair of Dictionaries, using a function to combine them. \nKeys that are not present on both dictionaries are dropped."},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html#zip","title":"Dictionary.zip","content":"Dictionary.zip \nzip \nTuples values of two dictionaries. \nKeys that are not present on both dictionaries are dropped."},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html#unzip","title":"Dictionary.unzip","content":"Dictionary.unzip \nunzip \nSplits a dictionary with tuple pair values to two separate dictionaries."},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html#unionWith","title":"Dictionary.unionWith","content":"Dictionary.unionWith \nunionWith \n\n Returns the union of two dictionaries, using the combiner function for duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html#union","title":"Dictionary.union","content":"Dictionary.union \nunion \n\nReturns the union of two maps, preferring values from the first in case of duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html#intersectWith","title":"Dictionary.intersectWith","content":"Dictionary.intersectWith \nintersectWith \n\n Returns the intersection of two Dicts, using the combiner function for duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-dictionary.html#intersect","title":"Dictionary.intersect","content":"Dictionary.intersect \nintersect \n\nReturns the intersection of two maps, preferring values from the first in case of duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html","title":"Enumerator","content":"Enumerator \n\n Additional operations on IEnumerator\n \nEnumerator.ConcatEnumerator<'T> \nConcatEnumerator<'T> \nEnumerator.EmptyEnumerator<'T> \nEmptyEnumerator<'T> \nEnumerator.IFinallyEnumerator \nIFinallyEnumerator \nEnumerator.MapEnumerator<'T> \nMapEnumerator<'T> \nEnumerator.MapEnumeratorState \nMapEnumeratorState \nEnumerator.invalidArgFmt \ninvalidArgFmt \nEnumerator.noReset \nnoReset \nEnumerator.notStarted \nnotStarted \nEnumerator.alreadyFinished \nalreadyFinished \nEnumerator.check \ncheck \nEnumerator.dispose \ndispose \nEnumerator.Empty \nEmpty \nEnumerator.singleton \nsingleton \nEnumerator.concat \nconcat \nEnumerator.tryItem \ntryItem \nEnumerator.nth \nnth \nEnumerator.map \nmap \nEnumerator.mapi \nmapi \nEnumerator.map2 \nmap2 \nEnumerator.mapi2 \nmapi2 \nEnumerator.map3 \nmap3 \nEnumerator.choose \nchoose \nEnumerator.filter \nfilter \nEnumerator.unfold \nunfold \nEnumerator.upto \nupto \nEnumerator.zip \nzip \nEnumerator.zip3 \nzip3"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#invalidArgFmt","title":"Enumerator.invalidArgFmt","content":"Enumerator.invalidArgFmt \ninvalidArgFmt \n\n [omit]\n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#noReset","title":"Enumerator.noReset","content":"Enumerator.noReset \nnoReset \n\n [omit]\n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#notStarted","title":"Enumerator.notStarted","content":"Enumerator.notStarted \nnotStarted \n\n [omit]\n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#alreadyFinished","title":"Enumerator.alreadyFinished","content":"Enumerator.alreadyFinished \nalreadyFinished \n\n [omit]\n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#check","title":"Enumerator.check","content":"Enumerator.check \ncheck \n\n [omit]\n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#dispose","title":"Enumerator.dispose","content":"Enumerator.dispose \ndispose \n\n [omit]\n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#Empty","title":"Enumerator.Empty","content":"Enumerator.Empty \nEmpty \n\n Constructs an EmptyEnumerator of type 'T.\n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#singleton","title":"Enumerator.singleton","content":"Enumerator.singleton \nsingleton \n\n Constructs an Enumerator that yields the single value given.\n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#concat","title":"Enumerator.concat","content":"Enumerator.concat \nconcat \n\n Enumerates the elements of each of the Enumerators in order.\n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#tryItem","title":"Enumerator.tryItem","content":"Enumerator.tryItem \ntryItem \n\n Tries to find the nth element in the Enumerator.\n Returns None if index is negative or the Enumerator does not contain enough elements. \n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#nth","title":"Enumerator.nth","content":"Enumerator.nth \nnth \n\n Retuns the nth element in the Enumerator.\n  \n\n This is called <code>item</code> in some other parts of core.\n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#map","title":"Enumerator.map","content":"Enumerator.map \nmap \n\n Maps over an enumerator.\n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#mapi","title":"Enumerator.mapi","content":"Enumerator.mapi \nmapi \n\n Maps over an Enumerator, with the mapping function also given the index.\n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#map2","title":"Enumerator.map2","content":"Enumerator.map2 \nmap2 \n\n Maps over two Enumerators, with the mapping function is given the corresponding elements\n of the two Enumerators pairwise.\n  \n\n Stops enumerating when either of the input Enumerators are finished enumerating.\n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#mapi2","title":"Enumerator.mapi2","content":"Enumerator.mapi2 \nmapi2 \n\n Maps over two Enumerators, where the mapping function is given the index and corresponding elements\n of the two input Enumerators pairwise.\n  \n\n Stops enumerating when either of the input Enumerators are finished enumerating.\n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#map3","title":"Enumerator.map3","content":"Enumerator.map3 \nmap3 \n\n Maps over three Enumerators, where the mapping function is given the corresponding elements\n of the three Enumerators.\n  \n\n Stops enumerating when any of the input Enumerators are finished enumerating.\n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#choose","title":"Enumerator.choose","content":"Enumerator.choose \nchoose \n\n Applies the given function to each element in the input Enumerator.\n Returns an Enumerator comprised of the resuls <code>x</code> for each element\n where the function returns <code>Some(x)</code>.\n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#filter","title":"Enumerator.filter","content":"Enumerator.filter \nfilter \n\n Returns a new Enumerator yielding only the elements of the input Enumerator for which the\n given predicate returns \"true\".\n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#unfold","title":"Enumerator.unfold","content":"Enumerator.unfold \nunfold \n\n Returns a new Enumerator yielding elements <code>x</code> generated by the given computation\n so long as it generates a <code>Some(x)</code> - and stops when it generates a <code>None</code>.\n The given initial <code>state</code> argument is passed to the element generator.\n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#upto","title":"Enumerator.upto","content":"Enumerator.upto \nupto \n\n Enumerates from zero up to the given <code>lastOption</code>, yielding elements\n generated by the given function applied to the index.\n  \n\n The Current value for a valid index is \"f i\".\n\n Lazy<_> values are used as caches, to store either the result or an exception if thrown.\n \n These \"Lazy<_>\" caches are created only on the first call to current and forced immediately.\n The lazy creation of the cache nodes means enumerations that skip many Current values are not delayed by GC.\n For example, the full enumeration of Seq.initInfinite in the tests.\n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#zip","title":"Enumerator.zip","content":"Enumerator.zip \nzip \n\n Zip two input Enumerators into a new Enumerator yielding pairs.\n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator.html#zip3","title":"Enumerator.zip3","content":"Enumerator.zip3 \nzip3 \n\n Zip three input Enumerators into a new Enumerator yielding triples.\n "},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-concatenumerator-1.html","title":"ConcatEnumerator<'T>","content":"ConcatEnumerator<'T> \n\n Enumerate all sources in sequence\n [omit]\n \nConcatEnumerator<'T>.( .ctor ) \n( .ctor ) \nConcatEnumerator<'T>.Finish \nFinish \nConcatEnumerator<'T>.GetCurrent \nGetCurrent \nConcatEnumerator<'T>.currElement \ncurrElement"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-concatenumerator-1.html#( .ctor )","title":"ConcatEnumerator<'T>.( .ctor )","content":"ConcatEnumerator<'T>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-concatenumerator-1.html#Finish","title":"ConcatEnumerator<'T>.Finish","content":"ConcatEnumerator<'T>.Finish \nFinish \n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-concatenumerator-1.html#GetCurrent","title":"ConcatEnumerator<'T>.GetCurrent","content":"ConcatEnumerator<'T>.GetCurrent \nGetCurrent \n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-concatenumerator-1.html#currElement","title":"ConcatEnumerator<'T>.currElement","content":"ConcatEnumerator<'T>.currElement \ncurrElement \n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-emptyenumerator-1.html","title":"EmptyEnumerator<'T>","content":"EmptyEnumerator<'T> \n\n An enumerator that is empty -- useful in combination with other enumerators\n [omit]\n \nEmptyEnumerator<'T>.( .ctor ) \n( .ctor )"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-emptyenumerator-1.html#( .ctor )","title":"EmptyEnumerator<'T>.( .ctor )","content":"EmptyEnumerator<'T>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-ifinallyenumerator.html","title":"IFinallyEnumerator","content":"IFinallyEnumerator \n\n [omit]\n \nIFinallyEnumerator.AppendFinallyAction \nAppendFinallyAction"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-ifinallyenumerator.html#AppendFinallyAction","title":"IFinallyEnumerator.AppendFinallyAction","content":"IFinallyEnumerator.AppendFinallyAction \nAppendFinallyAction \n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-mapenumerator-1.html","title":"MapEnumerator<'T>","content":"MapEnumerator<'T> \n\n An abstract enumerator, useful when mapping over enumerators.\n \n It maintains a mutable `curr` item, and a process MapEnumeratorState `state`.\n \n Implement DoMoveNext such that `curr` is set after calling, and return\n whether the enumerator actually moved next.\n [omit]\n \nMapEnumerator<'T>.( .ctor ) \n( .ctor ) \nMapEnumerator<'T>.Dispose \nDispose \nMapEnumerator<'T>.DoMoveNext \nDoMoveNext \nMapEnumerator<'T>.GetCurrent \nGetCurrent \nMapEnumerator<'T>.curr \ncurr"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-mapenumerator-1.html#( .ctor )","title":"MapEnumerator<'T>.( .ctor )","content":"MapEnumerator<'T>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-mapenumerator-1.html#Dispose","title":"MapEnumerator<'T>.Dispose","content":"MapEnumerator<'T>.Dispose \nDispose \n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-mapenumerator-1.html#DoMoveNext","title":"MapEnumerator<'T>.DoMoveNext","content":"MapEnumerator<'T>.DoMoveNext \nDoMoveNext \n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-mapenumerator-1.html#GetCurrent","title":"MapEnumerator<'T>.GetCurrent","content":"MapEnumerator<'T>.GetCurrent \nGetCurrent \n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-mapenumerator-1.html#curr","title":"MapEnumerator<'T>.curr","content":"MapEnumerator<'T>.curr \ncurr \n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-mapenumeratorstate.html","title":"MapEnumeratorState","content":"MapEnumeratorState \n\n Defines the possible states of a MapEnumerator.\n [omit]\n \nMapEnumeratorState.NotStarted \nNotStarted \nMapEnumeratorState.InProcess \nInProcess \nMapEnumeratorState.Finished \nFinished"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-mapenumeratorstate.html#NotStarted","title":"MapEnumeratorState.NotStarted","content":"MapEnumeratorState.NotStarted \nNotStarted \n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-mapenumeratorstate.html#InProcess","title":"MapEnumeratorState.InProcess","content":"MapEnumeratorState.InProcess \nInProcess \n"},{"uri":"/FSharpPlusreference/fsharpplus-enumerator-mapenumeratorstate.html#Finished","title":"MapEnumeratorState.Finished","content":"MapEnumeratorState.Finished \nFinished \n"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html","title":"Extensions","content":"Extensions \n\n Module containing F#+ Extension Methods on existing types\n \nExtensions.GetSlice \nGetSlice \nExtensions.GetSlice \nGetSlice \nExtensions.GetSlice \nGetSlice \nExtensions.GetSlice \nGetSlice \nExtensions.WhenAll \nWhenAll \nExtensions.Sequence \nSequence \nExtensions.Sequence \nSequence \nExtensions.Sequence \nSequence \nExtensions.Sequence \nSequence \nExtensions.Sequence \nSequence \nExtensions.Bisequence \nBisequence \nExtensions.Bisequence \nBisequence \nExtensions.Sequence \nSequence"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html#GetSlice","title":"Extensions.GetSlice","content":"Extensions.GetSlice \nGetSlice \n"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html#GetSlice","title":"Extensions.GetSlice","content":"Extensions.GetSlice \nGetSlice \n"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html#GetSlice","title":"Extensions.GetSlice","content":"Extensions.GetSlice \nGetSlice \n"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html#GetSlice","title":"Extensions.GetSlice","content":"Extensions.GetSlice \nGetSlice \n"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html#WhenAll","title":"Extensions.WhenAll","content":"Extensions.WhenAll \nWhenAll \n"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html#Sequence","title":"Extensions.Sequence","content":"Extensions.Sequence \nSequence \n\n Combine all asyncs in one, chaining them in sequence order.\n"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html#Sequence","title":"Extensions.Sequence","content":"Extensions.Sequence \nSequence \n\n Combine all asyncs in one, chaining them in sequence order.\n"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html#Sequence","title":"Extensions.Sequence","content":"Extensions.Sequence \nSequence \n\n Combine all asyncs in one, chaining them in sequence order.\n"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html#Sequence","title":"Extensions.Sequence","content":"Extensions.Sequence \nSequence \n\n Creates an async Result from a Result where the Ok case is async.\n"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html#Sequence","title":"Extensions.Sequence","content":"Extensions.Sequence \nSequence \n\n Creates an async Choice from a Choice where the Choice1Of2 case is async.\n"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html#Bisequence","title":"Extensions.Bisequence","content":"Extensions.Bisequence \nBisequence \n\n Creates an async Result from a Result where both cases are async.\n"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html#Bisequence","title":"Extensions.Bisequence","content":"Extensions.Bisequence \nBisequence \n\n Creates an async Choice from a Choice where both cases are async.\n"},{"uri":"/FSharpPlusreference/fsharpplus-extensions.html#Sequence","title":"Extensions.Sequence","content":"Extensions.Sequence \nSequence \n\n Returns None if it contains a None element, otherwise a list of all elements\n"},{"uri":"/FSharpPlusreference/fsharpplus-ilist.html","title":"IList","content":"IList \n\n Additional operations IList<'T>\n \nIList.toIReadOnlyList \ntoIReadOnlyList"},{"uri":"/FSharpPlusreference/fsharpplus-ilist.html#toIReadOnlyList","title":"IList.toIReadOnlyList","content":"IList.toIReadOnlyList \ntoIReadOnlyList \nConverts an IList to an IReadOnlyList (from System.Collections.Generic)."},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlycollection.html","title":"IReadOnlyCollection","content":"IReadOnlyCollection \n\n Additional operations on IReadOnlyCollection<'T>\n \nIReadOnlyCollection.ofArray \nofArray \nIReadOnlyCollection.ofList \nofList \nIReadOnlyCollection.ofSeq \nofSeq \nIReadOnlyCollection.map \nmap \nIReadOnlyCollection.iter \niter"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlycollection.html#ofArray","title":"IReadOnlyCollection.ofArray","content":"IReadOnlyCollection.ofArray \nofArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlycollection.html#ofList","title":"IReadOnlyCollection.ofList","content":"IReadOnlyCollection.ofList \nofList \n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlycollection.html#ofSeq","title":"IReadOnlyCollection.ofSeq","content":"IReadOnlyCollection.ofSeq \nofSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlycollection.html#map","title":"IReadOnlyCollection.map","content":"IReadOnlyCollection.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlycollection.html#iter","title":"IReadOnlyCollection.iter","content":"IReadOnlyCollection.iter \niter \n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html","title":"IReadOnlyDictionary","content":"IReadOnlyDictionary \n\n Additional operations on IReadOnlyDictionary<'Key, 'Value>\n \nIReadOnlyDictionary.add \nadd \nIReadOnlyDictionary.remove \nremove \nIReadOnlyDictionary.tryGetValue \ntryGetValue \nIReadOnlyDictionary.containsKey \ncontainsKey \nIReadOnlyDictionary.keys \nkeys \nIReadOnlyDictionary.values \nvalues \nIReadOnlyDictionary.map \nmap \nIReadOnlyDictionary.map2 \nmap2 \nIReadOnlyDictionary.zip \nzip \nIReadOnlyDictionary.unzip \nunzip \nIReadOnlyDictionary.unionWith \nunionWith \nIReadOnlyDictionary.union \nunion \nIReadOnlyDictionary.intersectWith \nintersectWith \nIReadOnlyDictionary.intersect \nintersect"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#add","title":"IReadOnlyDictionary.add","content":"IReadOnlyDictionary.add \nadd \n\n Replaces or sets the item associated with a specified key with the specified value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#remove","title":"IReadOnlyDictionary.remove","content":"IReadOnlyDictionary.remove \nremove \n\n Removes the given key from the read-only dictionary.\n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#tryGetValue","title":"IReadOnlyDictionary.tryGetValue","content":"IReadOnlyDictionary.tryGetValue \ntryGetValue \nTries to get the value of the given key. \nThis is a function wrapper for the IReadOnlyDictionary.TryGetValue method,\n representing the result as an Option<value> instead of a bool plus an out-value.\n "},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#containsKey","title":"IReadOnlyDictionary.containsKey","content":"IReadOnlyDictionary.containsKey \ncontainsKey \nDoes the read-only dictionary contain the given key? \nNote: this is a function wrapper for the IReadOnlyDictionary.ContainsKey method."},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#keys","title":"IReadOnlyDictionary.keys","content":"IReadOnlyDictionary.keys \nkeys \nReturns the keys of the given read-only dictionary."},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#values","title":"IReadOnlyDictionary.values","content":"IReadOnlyDictionary.values \nvalues \nReturns the values of the given read-only dictionary."},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#map","title":"IReadOnlyDictionary.map","content":"IReadOnlyDictionary.map \nmap \nMaps the given function over each value in the read-only dictionary."},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#map2","title":"IReadOnlyDictionary.map2","content":"IReadOnlyDictionary.map2 \nmap2 \nCreates a read-only dictionary value from a pair of read-only dictionaries,\n using a function to combine them. \nKeys that are not present on both read-only dictionaries are dropped."},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#zip","title":"IReadOnlyDictionary.zip","content":"IReadOnlyDictionary.zip \nzip \nTuples values of two read-only dictionaries. \nKeys that are not present on both read-only dictionaries are dropped."},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#unzip","title":"IReadOnlyDictionary.unzip","content":"IReadOnlyDictionary.unzip \nunzip \nSplits a read-only dictionary with tuple pair values to two separate read-only dictionaries."},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#unionWith","title":"IReadOnlyDictionary.unionWith","content":"IReadOnlyDictionary.unionWith \nunionWith \n\n Returns the union of two read-only dictionaries, using the combiner function for duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#union","title":"IReadOnlyDictionary.union","content":"IReadOnlyDictionary.union \nunion \n\n Returns the union of two read-only dictionaries, preferring values from the first in case of duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#intersectWith","title":"IReadOnlyDictionary.intersectWith","content":"IReadOnlyDictionary.intersectWith \nintersectWith \n\n Returns the intersection of two read-only dictionaries, using the combiner function for duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlydictionary.html#intersect","title":"IReadOnlyDictionary.intersect","content":"IReadOnlyDictionary.intersect \nintersect \n\n Returns the intersection of two read-only dictionaries, preferring values from the first in case of duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlylist.html","title":"IReadOnlyList","content":"IReadOnlyList \n\n Additional operations on ReadOnlyList<'T>\n \nIReadOnlyList.ofArray \nofArray \nIReadOnlyList.toArray \ntoArray \nIReadOnlyList.trySetItem \ntrySetItem \nIReadOnlyList.tryItem \ntryItem"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlylist.html#ofArray","title":"IReadOnlyList.ofArray","content":"IReadOnlyList.ofArray \nofArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlylist.html#toArray","title":"IReadOnlyList.toArray","content":"IReadOnlyList.toArray \ntoArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlylist.html#trySetItem","title":"IReadOnlyList.trySetItem","content":"IReadOnlyList.trySetItem \ntrySetItem \n\n Returns a new IReadOnlyList from a given IReadOnlyList, with replaced binding for index.\n"},{"uri":"/FSharpPlusreference/fsharpplus-ireadonlylist.html#tryItem","title":"IReadOnlyList.tryItem","content":"IReadOnlyList.tryItem \ntryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-lazy.html","title":"Lazy","content":"Lazy \n\n Additional operations on Lazy - delayed computations\n \nLazy.map \nmap \nLazy.map2 \nmap2 \nLazy.apply \napply"},{"uri":"/FSharpPlusreference/fsharpplus-lazy.html#map","title":"Lazy.map","content":"Lazy.map \nmap \nCreates a Lazy value from another Lazy value, mapping through a function."},{"uri":"/FSharpPlusreference/fsharpplus-lazy.html#map2","title":"Lazy.map2","content":"Lazy.map2 \nmap2 \nCreates a Lazy value from a pair of Lazy values, using a mapping function to combine them."},{"uri":"/FSharpPlusreference/fsharpplus-lazy.html#apply","title":"Lazy.apply","content":"Lazy.apply \napply \nApplies a Lazy value to a Lazy function."},{"uri":"/FSharpPlusreference/fsharpplus-lens.html","title":"Lens","content":"Lens \n\n Lens functions and operators\n \nLens.IReadOnlyDictionary \nIReadOnlyDictionary \nLens.Internals \nInternals \nLens.Map \nMap \nLens.Set \nSet \nLens.setl \nsetl \nLens.over \nover \nLens.view \nview \nLens.preview \npreview \nLens.lens \nlens \nLens.prism \nprism \nLens.prism' \nprism' \nLens.iso \niso \nLens.choosing \nchoosing \nLens._1 \n_1 \nLens._2 \n_2 \nLens._3 \n_3 \nLens._4 \n_4 \nLens._5 \n_5 \nLens.non \nnon \nLens._Ok \n_Ok \nLens._Error \n_Error \nLens._Some \n_Some \nLens._None \n_None \nLens._all \n_all \nLens.to' \nto' \nLens.foldMapOf \nfoldMapOf \nLens.foldOf \nfoldOf \nLens.foldrOf \nfoldrOf \nLens.foldlOf \nfoldlOf \nLens.toListOf \ntoListOf \nLens.maximumOf \nmaximumOf \nLens.minimumOf \nminimumOf \nLens.anyOf \nanyOf \nLens.allOf \nallOf \nLens.elemOf \nelemOf \nLens.items \nitems \nLens.filtered \nfiltered \nLens.choosed \nchoosed \nLens.both \nboth \nLens.withIso \nwithIso \nLens.from' \nfrom' \nLens.mapping \nmapping \nLens.( ^. ) \n( ^. ) \nLens.( .-> ) \n( .-> ) \nLens.( %-> ) \n( %-> ) \nLens.( ^? ) \n( ^? ) \nLens.( ^.. ) \n( ^.. ) \nLens.( <&> ) \n( <&> )"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#setl","title":"Lens.setl","content":"Lens.setl \nsetl \nWrite to a lens."},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#over","title":"Lens.over","content":"Lens.over \nover \nUpdate a value in a lens."},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#view","title":"Lens.view","content":"Lens.view \nview \nRead from a lens."},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#preview","title":"Lens.preview","content":"Lens.preview \npreview \nRetrieve the first value targeted by a Prism, Fold or Traversal (or Some result from a Getter or Lens). See also (^?)."},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#lens","title":"Lens.lens","content":"Lens.lens \nlens \nBuild a 'Lens' from a getter and a setter. \nThe lens should be assigned as an inline function of the free parameter, not a value, otherwise compiler will fail with a type constraint mismatch."},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#prism","title":"Lens.prism","content":"Lens.prism \nprism \nBuild a 'Prism' from a constructor and a getter. \nThe prism should be assigned as an inline function of the free parameter, not a value, otherwise compiler will fail with a type constraint mismatch.Using Result instead of Option to permit the types of 's and 't to differ."},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#prism'","title":"Lens.prism'","content":"Lens.prism' \nprism' \nBuild a 'Prism' from a constructor and a getter. \nThe prism should be assigned as an inline function of the free parameter, not a value, otherwise compiler will fail with a type constraint mismatch.Using Option which makes 's and 't the same type."},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#iso","title":"Lens.iso","content":"Lens.iso \niso \nBuild an 'Iso' from a pair of inverse functions."},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#choosing","title":"Lens.choosing","content":"Lens.choosing \nchoosing \n\n Merge two lenses, getters, setters, folds or traversals.\n <param name=\"optic1\">The first optic.</param>\n <param name=\"optic2\">The second optic.</param>\n <param name=\"f\">The free parameter.</param>\n <returns>An optic for a Result which uses the first optic for the Ok and the second for the Error.</returns>\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#_1","title":"Lens._1","content":"Lens._1 \n_1 \n\n Lens for the first element of a tuple\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#_2","title":"Lens._2","content":"Lens._2 \n_2 \n\n Lens for the second element of a tuple\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#_3","title":"Lens._3","content":"Lens._3 \n_3 \n\n Lens for the third element of a tuple\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#_4","title":"Lens._4","content":"Lens._4 \n_4 \n\n Lens for the fourth element of a tuple\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#_5","title":"Lens._5","content":"Lens._5 \n_5 \n\n Lens for the fifth element of a tuple\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#non","title":"Lens.non","content":"Lens.non \nnon \n\n Lens for the value inside an Option or the given default value if the Option is None.  Works well when combined with Map._item\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#_Ok","title":"Lens._Ok","content":"Lens._Ok \n_Ok \n\n Prism providing a Traversal for targeting the 'Ok' part of a Result<'T,'Error>\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#_Error","title":"Lens._Error","content":"Lens._Error \n_Error \n\n Prism providing a Traversal for targeting the 'Error' part of a Result<'T,'Error>\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#_Some","title":"Lens._Some","content":"Lens._Some \n_Some \n\n Prism providing a Traversal for targeting the 'Some' part of an Option<'T>\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#_None","title":"Lens._None","content":"Lens._None \n_None \n\n Prism providing a Traversal for targeting the 'None' part of an Option<'T>\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#_all","title":"Lens._all","content":"Lens._all \n_all \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#to'","title":"Lens.to'","content":"Lens.to' \nto' \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#foldMapOf","title":"Lens.foldMapOf","content":"Lens.foldMapOf \nfoldMapOf \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#foldOf","title":"Lens.foldOf","content":"Lens.foldOf \nfoldOf \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#foldrOf","title":"Lens.foldrOf","content":"Lens.foldrOf \nfoldrOf \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#foldlOf","title":"Lens.foldlOf","content":"Lens.foldlOf \nfoldlOf \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#toListOf","title":"Lens.toListOf","content":"Lens.toListOf \ntoListOf \n\n Extract a list of the targets of a Fold. See also (^..).\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#maximumOf","title":"Lens.maximumOf","content":"Lens.maximumOf \nmaximumOf \n\n Get the largest target of a Fold.\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#minimumOf","title":"Lens.minimumOf","content":"Lens.minimumOf \nminimumOf \n\n Get the smallest target of a Fold.\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#anyOf","title":"Lens.anyOf","content":"Lens.anyOf \nanyOf \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#allOf","title":"Lens.allOf","content":"Lens.allOf \nallOf \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#elemOf","title":"Lens.elemOf","content":"Lens.elemOf \nelemOf \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#items","title":"Lens.items","content":"Lens.items \nitems \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#filtered","title":"Lens.filtered","content":"Lens.filtered \nfiltered \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#choosed","title":"Lens.choosed","content":"Lens.choosed \nchoosed \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#both","title":"Lens.both","content":"Lens.both \nboth \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#withIso","title":"Lens.withIso","content":"Lens.withIso \nwithIso \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#from'","title":"Lens.from'","content":"Lens.from' \nfrom' \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#mapping","title":"Lens.mapping","content":"Lens.mapping \nmapping \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#( ^. )","title":"Lens.( ^. )","content":"Lens.( ^. ) \n( ^. ) \nRead from a lens. Same as ``view`` but with the arguments flipped."},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#( .-> )","title":"Lens.( .-> )","content":"Lens.( .-> ) \n( .-> ) \nWrite to a lens. Same as ``setl``."},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#( %-> )","title":"Lens.( %-> )","content":"Lens.( %-> ) \n( %-> ) \nUpdate a value in a lens. Same as ``over``."},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#( ^? )","title":"Lens.( ^? )","content":"Lens.( ^? ) \n( ^? ) \nRetrieve the first value targeted by a Prism, Fold or Traversal (or Some result from a Getter or Lens). Same as ``preview`` but with the arguments flipped."},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#( ^.. )","title":"Lens.( ^.. )","content":"Lens.( ^.. ) \n( ^.. ) \n\n Extract a list of the targets of a Fold. Same as ``toListOf`` but with the arguments flipped.\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens.html#( <&> )","title":"Lens.( <&> )","content":"Lens.( <&> ) \n( <&> ) \nAn infix flipped map, restricted to non-primitive types."},{"uri":"/FSharpPlusreference/fsharpplus-lens-ireadonlydictionary.html","title":"IReadOnlyDictionary","content":"IReadOnlyDictionary \n \nIReadOnlyDictionary._item \n_item"},{"uri":"/FSharpPlusreference/fsharpplus-lens-ireadonlydictionary.html#_item","title":"IReadOnlyDictionary._item","content":"IReadOnlyDictionary._item \n_item \n\n Given a specific key, produces a Lens from a IReadOnlyDictionary<key, value> to an Option<value>.  When setting,\n a Some(value) will insert or replace the value into the dictionary at the given key.  Setting a value of\n None will delete the value at the specified key.  Works well together with non.\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens-internals.html","title":"Internals","content":"Internals \n\n [omit]\n \nInternals.Exchange<'A, 'B, 'S, 'T> \nExchange<'A, 'B, 'S, 'T> \nInternals.dimap' \ndimap' \nInternals.getAny \ngetAny \nInternals.getAll \ngetAll"},{"uri":"/FSharpPlusreference/fsharpplus-lens-internals.html#dimap'","title":"Internals.dimap'","content":"Internals.dimap' \ndimap' \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens-internals.html#getAny","title":"Internals.getAny","content":"Internals.getAny \ngetAny \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens-internals.html#getAll","title":"Internals.getAll","content":"Internals.getAll \ngetAll \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens-internals-exchange-4.html","title":"Exchange<'A, 'B, 'S, 'T>","content":"Exchange<'A, 'B, 'S, 'T> \n \nExchange<'A, 'B, 'S, 'T>.Dimap \nDimap \nExchange<'A, 'B, 'S, 'T>.Exchange \nExchange"},{"uri":"/FSharpPlusreference/fsharpplus-lens-internals-exchange-4.html#Dimap","title":"Exchange<'A, 'B, 'S, 'T>.Dimap","content":"Exchange<'A, 'B, 'S, 'T>.Dimap \nDimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens-internals-exchange-4.html#Exchange","title":"Exchange<'A, 'B, 'S, 'T>.Exchange","content":"Exchange<'A, 'B, 'S, 'T>.Exchange \nExchange \n"},{"uri":"/FSharpPlusreference/fsharpplus-lens-map.html","title":"Map","content":"Map \n \nMap._item \n_item"},{"uri":"/FSharpPlusreference/fsharpplus-lens-map.html#_item","title":"Map._item","content":"Map._item \n_item \n\n Given a specific key, produces a Lens from a Map<key, value> to an Option<value>.  When setting,\n a Some(value) will insert or replace the value into the map at the given key.  Setting a value of\n None will delete the value at the specified key.  Works well together with non.\n"},{"uri":"/FSharpPlusreference/fsharpplus-lens-set.html","title":"Set","content":"Set \n \nSet._contains \n_contains"},{"uri":"/FSharpPlusreference/fsharpplus-lens-set.html#_contains","title":"Set._contains","content":"Set._contains \n_contains \n"},{"uri":"/FSharpPlusreference/fsharpplus-list.html","title":"List","content":"List \n\n Additional operations on List\n \nList.singleton \nsingleton \nList.cons \ncons \nList.apply \napply \nList.lift2 \nlift2 \nList.tails \ntails \nList.take \ntake \nList.skip \nskip \nList.drop \ndrop \nList.intercalate \nintercalate \nList.intersperse \nintersperse \nList.split \nsplit \nList.replace \nreplace \nList.toIReadOnlyList \ntoIReadOnlyList \nList.findSliceIndex \nfindSliceIndex \nList.tryFindSliceIndex \ntryFindSliceIndex \nList.partitionMap \npartitionMap"},{"uri":"/FSharpPlusreference/fsharpplus-list.html#singleton","title":"List.singleton","content":"List.singleton \nsingleton \n\n Creates a list with a single element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-list.html#cons","title":"List.cons","content":"List.cons \ncons \nAdds an element to the beginning of the given list"},{"uri":"/FSharpPlusreference/fsharpplus-list.html#apply","title":"List.apply","content":"List.apply \napply \nApplies a list of functions to a list of values and concatenates them"},{"uri":"/FSharpPlusreference/fsharpplus-list.html#lift2","title":"List.lift2","content":"List.lift2 \nlift2 \n\n Combines all values from the first list with the second, using the supplied mapping function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-list.html#tails","title":"List.tails","content":"List.tails \ntails \n\n Returns a list with all possible tails of the source list.\n"},{"uri":"/FSharpPlusreference/fsharpplus-list.html#take","title":"List.take","content":"List.take \ntake \n"},{"uri":"/FSharpPlusreference/fsharpplus-list.html#skip","title":"List.skip","content":"List.skip \nskip \n"},{"uri":"/FSharpPlusreference/fsharpplus-list.html#drop","title":"List.drop","content":"List.drop \ndrop \nReturns a list that drops N elements of the original list and then yields the\n remaining elements of the list. \nWhen count exceeds the number of elements in the list it\n returns an empty list instead of throwing an exception."},{"uri":"/FSharpPlusreference/fsharpplus-list.html#intercalate","title":"List.intercalate","content":"List.intercalate \nintercalate \n\n Concatenates all elements, using the specified separator between each element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-list.html#intersperse","title":"List.intersperse","content":"List.intersperse \nintersperse \n\n Inserts a separator element between each element in the source list.\n"},{"uri":"/FSharpPlusreference/fsharpplus-list.html#split","title":"List.split","content":"List.split \nsplit \n\n Creates a sequence of lists by splitting the source list on any of the given separators.\n"},{"uri":"/FSharpPlusreference/fsharpplus-list.html#replace","title":"List.replace","content":"List.replace \nreplace \n\n Replaces a subsequence of the source list with the given replacement list.\n"},{"uri":"/FSharpPlusreference/fsharpplus-list.html#toIReadOnlyList","title":"List.toIReadOnlyList","content":"List.toIReadOnlyList \ntoIReadOnlyList \nConverts a list to an IReadOnlyList (from System.Collections.Generic)."},{"uri":"/FSharpPlusreference/fsharpplus-list.html#findSliceIndex","title":"List.findSliceIndex","content":"List.findSliceIndex \nfindSliceIndex \n\n Gets the index of the first occurrence of the specified slice in the source.\n "},{"uri":"/FSharpPlusreference/fsharpplus-list.html#tryFindSliceIndex","title":"List.tryFindSliceIndex","content":"List.tryFindSliceIndex \ntryFindSliceIndex \n\n Gets the index of the first occurrence of the specified slice in the source.\n Returns <code>None</code> if not found.\n "},{"uri":"/FSharpPlusreference/fsharpplus-list.html#partitionMap","title":"List.partitionMap","content":"List.partitionMap \npartitionMap \n\n Creates two lists by applying the mapping function to each element in the list\n and classifying the transformed values depending on whether they were wrapped with Choice1Of2 or Choice2Of2.\n "},{"uri":"/FSharpPlusreference/fsharpplus-map.html","title":"Map","content":"Map \n\n Additional operations on Map<'Key, 'Value>\n \nMap.keys \nkeys \nMap.values \nvalues \nMap.mapValues \nmapValues \nMap.mapValues2 \nmapValues2 \nMap.zip \nzip \nMap.unzip \nunzip \nMap.unionWith \nunionWith \nMap.union \nunion \nMap.intersectWith \nintersectWith \nMap.intersect \nintersect"},{"uri":"/FSharpPlusreference/fsharpplus-map.html#keys","title":"Map.keys","content":"Map.keys \nkeys \nReturns the keys of the given map."},{"uri":"/FSharpPlusreference/fsharpplus-map.html#values","title":"Map.values","content":"Map.values \nvalues \nReturns the values of the given map."},{"uri":"/FSharpPlusreference/fsharpplus-map.html#mapValues","title":"Map.mapValues","content":"Map.mapValues \nmapValues \nMaps the values of the original Map. \n\n The core `Map.map` function maps over values too, but it passes both\n key and value to the mapping function.\n "},{"uri":"/FSharpPlusreference/fsharpplus-map.html#mapValues2","title":"Map.mapValues2","content":"Map.mapValues2 \nmapValues2 \nMaps values of two Maps. \nKeys that are not present on both Maps are dropped."},{"uri":"/FSharpPlusreference/fsharpplus-map.html#zip","title":"Map.zip","content":"Map.zip \nzip \nTuples values of two Maps. \nKeys that are not present on both Maps are dropped."},{"uri":"/FSharpPlusreference/fsharpplus-map.html#unzip","title":"Map.unzip","content":"Map.unzip \nunzip \nSplits a Map with tuple pair values to two separate Maps."},{"uri":"/FSharpPlusreference/fsharpplus-map.html#unionWith","title":"Map.unionWith","content":"Map.unionWith \nunionWith \n\n Returns the union of two maps, using the combiner function for duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-map.html#union","title":"Map.union","content":"Map.union \nunion \n\n Returns the union of two maps, preferring values from the first in case of duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-map.html#intersectWith","title":"Map.intersectWith","content":"Map.intersectWith \nintersectWith \n\n Returns the intersection of two maps, using the combiner function for duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-map.html#intersect","title":"Map.intersect","content":"Map.intersect \nintersect \n\nReturns the intersection of two maps, preferring values from the first in case of duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-memoization.html","title":"Memoization","content":"Memoization \n \nMemoization.MemoizationKeyWrapper<'a> \nMemoizationKeyWrapper<'a> \nMemoization.MemoizeN \nMemoizeN \nMemoization.memoizeN \nmemoizeN"},{"uri":"/FSharpPlusreference/fsharpplus-memoization.html#memoizeN","title":"Memoization.memoizeN","content":"Memoization.memoizeN \nmemoizeN \n"},{"uri":"/FSharpPlusreference/fsharpplus-memoization-memoizationkeywrapper-1.html","title":"MemoizationKeyWrapper<'a>","content":"MemoizationKeyWrapper<'a> \n \nMemoizationKeyWrapper<'a>.MemoizationKeyWrapper \nMemoizationKeyWrapper"},{"uri":"/FSharpPlusreference/fsharpplus-memoization-memoizationkeywrapper-1.html#MemoizationKeyWrapper","title":"MemoizationKeyWrapper<'a>.MemoizationKeyWrapper","content":"MemoizationKeyWrapper<'a>.MemoizationKeyWrapper \nMemoizationKeyWrapper \n"},{"uri":"/FSharpPlusreference/fsharpplus-memoization-memoizen.html","title":"MemoizeN","content":"MemoizeN \n \nMemoizeN.MemoizeN \nMemoizeN \nMemoizeN.MemoizeN \nMemoizeN \nMemoizeN.getOrAdd \ngetOrAdd"},{"uri":"/FSharpPlusreference/fsharpplus-memoization-memoizen.html#MemoizeN","title":"MemoizeN.MemoizeN","content":"MemoizeN.MemoizeN \nMemoizeN \n"},{"uri":"/FSharpPlusreference/fsharpplus-memoization-memoizen.html#MemoizeN","title":"MemoizeN.MemoizeN","content":"MemoizeN.MemoizeN \nMemoizeN \n"},{"uri":"/FSharpPlusreference/fsharpplus-memoization-memoizen.html#getOrAdd","title":"MemoizeN.getOrAdd","content":"MemoizeN.getOrAdd \ngetOrAdd \n"},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html","title":"Nullable","content":"Nullable \n\n Additional operations on Nullable\n \nNullable.bind \nbind \nNullable.map \nmap \nNullable.iter \niter \nNullable.hasValue \nhasValue \nNullable.isNull \nisNull \nNullable.count \ncount \nNullable.defaultValue \ndefaultValue \nNullable.defaultWith \ndefaultWith \nNullable.exists \nexists \nNullable.filter \nfilter \nNullable.fold \nfold \nNullable.foldBack \nfoldBack \nNullable.forall \nforall \nNullable.toArray \ntoArray \nNullable.toList \ntoList"},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#bind","title":"Nullable.bind","content":"Nullable.bind \nbind \nMonadic Bind; Transforms the value inside a Nullable to a Nullable using a specified binding function."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#map","title":"Nullable.map","content":"Nullable.map \nmap \nTransforms the value inside a Nullable by using a specified mapping function."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#iter","title":"Nullable.iter","content":"Nullable.iter \niter \nInvokes a side-effect function to the value of a Nullable if present and ignores the result."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#hasValue","title":"Nullable.hasValue","content":"Nullable.hasValue \nhasValue \nReturns whether a Nullable has a value."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#isNull","title":"Nullable.isNull","content":"Nullable.isNull \nisNull \nReturns whether a Nullable is empty."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#count","title":"Nullable.count","content":"Nullable.count \ncount \nReturns the number of values in the Nullable (0 or 1)."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#defaultValue","title":"Nullable.defaultValue","content":"Nullable.defaultValue \ndefaultValue \nReturns the value inside a Nullable if it has one, otherwise returns defValue."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#defaultWith","title":"Nullable.defaultWith","content":"Nullable.defaultWith \ndefaultWith \nReturns the value inside a Nullable if it has one, otherwise returns the result of evaluating defThunk."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#exists","title":"Nullable.exists","content":"Nullable.exists \nexists \nReturns whether a Nullable contains a value for which the given predicate returns true."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#filter","title":"Nullable.filter","content":"Nullable.filter \nfilter \nFilters the value in a Nullable with the given predicate."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#fold","title":"Nullable.fold","content":"Nullable.fold \nfold \nUpdates state data with an update function and the value from a Nullable if it has one."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#foldBack","title":"Nullable.foldBack","content":"Nullable.foldBack \nfoldBack \nFold, but the update function has reversed arguments."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#forall","title":"Nullable.forall","content":"Nullable.forall \nforall \nReturns whether a Nullable is empty or its value passes the given predicate. Like exists, but returns true when there is no value."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#toArray","title":"Nullable.toArray","content":"Nullable.toArray \ntoArray \nConverts a Nullable to an array with 0 or 1 items."},{"uri":"/FSharpPlusreference/fsharpplus-nullable.html#toList","title":"Nullable.toList","content":"Nullable.toList \ntoList \nConverts a Nullable to a list with 0 or 1 items."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html","title":"Operators","content":"Operators \n\n Generic functions and operators\n \nOperators.Arrows \nArrows \nOperators.Seq \nSeq \nOperators.flip \nflip \nOperators.konst \nkonst \nOperators.curry \ncurry \nOperators.curryN \ncurryN \nOperators.uncurry \nuncurry \nOperators.uncurryN \nuncurryN \nOperators.( </ ) \n( </ ) \nOperators.( /> ) \n( /> ) \nOperators.tap \ntap \nOperators.either \neither \nOperators.option \noption \nOperators.tuple2 \ntuple2 \nOperators.tuple3 \ntuple3 \nOperators.tuple4 \ntuple4 \nOperators.tuple5 \ntuple5 \nOperators.tuple6 \ntuple6 \nOperators.tuple7 \ntuple7 \nOperators.tuple8 \ntuple8 \nOperators.map \nmap \nOperators.( <!> ) \n( <!> ) \nOperators.( <<| ) \n( <<| ) \nOperators.( |>> ) \n( |>> ) \nOperators.iter \niter \nOperators.unzip \nunzip \nOperators.zip \nzip \nOperators.result \nresult \nOperators.( <*> ) \n( <*> ) \nOperators.lift2 \nlift2 \nOperators.liftA2 \nliftA2 \nOperators.( *> ) \n( *> ) \nOperators.( <* ) \n( <* ) \nOperators.( <**> ) \n( <**> ) \nOperators.optional \noptional \nOperators.opt \nopt \nOperators.bind \nbind \nOperators.( >>= ) \n( >>= ) \nOperators.( =<< ) \n( =<< ) \nOperators.( >=> ) \n( >=> ) \nOperators.( <=< ) \n( <=< ) \nOperators.join \njoin \nOperators.liftM \nliftM \nOperators.getZero \ngetZero \nOperators.zero \nzero \nOperators.( ++ ) \n( ++ ) \nOperators.plus \nplus \nOperators.getEmpty \ngetEmpty \nOperators.empty \nempty \nOperators.( <|> ) \n( <|> ) \nOperators.guard \nguard \nOperators.contramap \ncontramap \nOperators.bimap \nbimap \nOperators.first \nfirst \nOperators.second \nsecond \nOperators.dimap \ndimap \nOperators.lmap \nlmap \nOperators.rmap \nrmap \nOperators.invmap \ninvmap \nOperators.getCatId \ngetCatId \nOperators.catId \ncatId \nOperators.catComp \ncatComp \nOperators.arr \narr \nOperators.arrFirst \narrFirst \nOperators.arrSecond \narrSecond \nOperators.( *** ) \n( *** ) \nOperators.fanout \nfanout \nOperators.fanin \nfanin \nOperators.( +++ ) \n( +++ ) \nOperators.left \nleft \nOperators.right \nright \nOperators.getApp \ngetApp \nOperators.app \napp \nOperators.foldBack \nfoldBack \nOperators.fold \nfold \nOperators.foldMap \nfoldMap \nOperators.toList \ntoList \nOperators.toArray \ntoArray \nOperators.toSeq \ntoSeq \nOperators.exists \nexists \nOperators.forall \nforall \nOperators.find \nfind \nOperators.tryFind \ntryFind \nOperators.pick \npick \nOperators.tryPick \ntryPick \nOperators.intercalate \nintercalate \nOperators.head \nhead \nOperators.tryHead \ntryHead \nOperators.length \nlength \nOperators.maximum \nmaximum \nOperators.minimum \nminimum \nOperators.maxBy \nmaxBy \nOperators.minBy \nminBy \nOperators.nth \nnth \nOperators.reduce \nreduce \nOperators.traverse \ntraverse \nOperators.sequence \nsequence \nOperators.bifoldMap \nbifoldMap \nOperators.bifold \nbifold \nOperators.bifoldBack \nbifoldBack \nOperators.bisum \nbisum \nOperators.bitraverse \nbitraverse \nOperators.bisequence \nbisequence \nOperators.item \nitem \nOperators.tryItem \ntryItem \nOperators.mapi \nmapi \nOperators.iteri \niteri \nOperators.foldi \nfoldi \nOperators.traversei \ntraversei \nOperators.findIndex \nfindIndex \nOperators.tryFindIndex \ntryFindIndex \nOperators.findSliceIndex \nfindSliceIndex \nOperators.tryFindSliceIndex \ntryFindSliceIndex \nOperators.extract \nextract \nOperators.extend \nextend \nOperators.( =>> ) \n( =>> ) \nOperators.duplicate \nduplicate \nOperators.lift \nlift \nOperators.liftAsync \nliftAsync \nOperators.callCC \ncallCC \nOperators.get \nget \nOperators.gets \ngets \nOperators.put \nput \nOperators.modify \nmodify \nOperators.ask \nask \nOperators.local \nlocal \nOperators.tell \ntell \nOperators.listen \nlisten \nOperators.pass \npass \nOperators.throw \nthrow \nOperators.catch \ncatch \nOperators.ofList \nofList \nOperators.ofSeq \nofSeq \nOperators.filter \nfilter \nOperators.skip \nskip \nOperators.take \ntake \nOperators.drop \ndrop \nOperators.limit \nlimit \nOperators.groupBy \ngroupBy \nOperators.chunkBy \nchunkBy \nOperators.takeWhile \ntakeWhile \nOperators.skipWhile \nskipWhile \nOperators.choose \nchoose \nOperators.distinct \ndistinct \nOperators.distinctBy \ndistinctBy \nOperators.intersperse \nintersperse \nOperators.replace \nreplace \nOperators.rev \nrev \nOperators.scan \nscan \nOperators.sort \nsort \nOperators.sortBy \nsortBy \nOperators.sortByDescending \nsortByDescending \nOperators.split \nsplit \nOperators.item1 \nitem1 \nOperators.item2 \nitem2 \nOperators.item3 \nitem3 \nOperators.item4 \nitem4 \nOperators.item5 \nitem5 \nOperators.mapItem1 \nmapItem1 \nOperators.mapItem2 \nmapItem2 \nOperators.mapItem3 \nmapItem3 \nOperators.mapItem4 \nmapItem4 \nOperators.mapItem5 \nmapItem5 \nOperators.explicit \nexplicit \nOperators.ofBytesWithOptions \nofBytesWithOptions \nOperators.ofBytes \nofBytes \nOperators.ofBytesBE \nofBytesBE \nOperators.toBytes \ntoBytes \nOperators.toBytesBE \ntoBytesBE \nOperators.parse \nparse \nOperators.tryParse \ntryParse \nOperators.getOne \ngetOne \nOperators.one \none \nOperators.divRem \ndivRem \nOperators.getMinValue \ngetMinValue \nOperators.minValue \nminValue \nOperators.getMaxValue \ngetMaxValue \nOperators.maxValue \nmaxValue \nOperators.fromBigInt \nfromBigInt \nOperators.toBigInt \ntoBigInt \nOperators.getPi \ngetPi \nOperators.pi \npi \nOperators.negate \nnegate \nOperators.negate' \nnegate' \nOperators.tryNegate' \ntryNegate' \nOperators.subtract \nsubtract \nOperators.trySubtract \ntrySubtract \nOperators.div \ndiv \nOperators.tryDiv \ntryDiv \nOperators.sqrt \nsqrt \nOperators.trySqrt \ntrySqrt \nOperators.isqrt \nisqrt \nOperators.sqrtRem \nsqrtRem \nOperators.signum \nsignum \nOperators.signum' \nsignum' \nOperators.abs \nabs \nOperators.abs' \nabs' \nOperators.choice \nchoice \nOperators.mfilter \nmfilter \nOperators.sum \nsum \nOperators.implicit \nimplicit \nOperators.dispose \ndispose \nOperators.( |Parse|_| ) \n( |Parse|_| )"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#flip","title":"Operators.flip","content":"Operators.flip \nflip \n\n Creates a new function with first two arguments flipped.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#konst","title":"Operators.konst","content":"Operators.konst \nkonst \n Creates a constant function."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#curry","title":"Operators.curry","content":"Operators.curry \ncurry \n\n Takes a function expecting a tuple of two elements and returns a function expecting two curried arguments.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#curryN","title":"Operators.curryN","content":"Operators.curryN \ncurryN \n\n Takes a function expecting a tuple of any N number of elements and returns a function expecting N curried arguments.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#uncurry","title":"Operators.uncurry","content":"Operators.uncurry \nuncurry \n\n Takes a function expecting two curried arguments and returns a function expecting a tuple of two elements. Same as (<||).\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#uncurryN","title":"Operators.uncurryN","content":"Operators.uncurryN \nuncurryN \n\n Takes a function expecting any N number of curried arguments and returns a function expecting a tuple of N elements.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( </ )","title":"Operators.( </ )","content":"Operators.( </ ) \n( </ ) \n\n Used in conjunction with /> to make an ad-hoc binary operator out of a function (x </f/> y).\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( /> )","title":"Operators.( /> )","content":"Operators.( /> ) \n( /> ) \n\n Used in conjunction with </ to make an ad-hoc binary operator out of a function (x </f/> y).\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tap","title":"Operators.tap","content":"Operators.tap \ntap \n\n Executes a side-effect function and returns the original input value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#either","title":"Operators.either","content":"Operators.either \neither \n Extracts a value from either side of a Result."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#option","title":"Operators.option","content":"Operators.option \noption \n\n Takes a function, a default value and a option value. If the option value is None, the function returns the default value.\n Otherwise, it applies the function to the value inside Some and returns the result.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tuple2","title":"Operators.tuple2","content":"Operators.tuple2 \ntuple2 \n\n Tuple two arguments\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tuple3","title":"Operators.tuple3","content":"Operators.tuple3 \ntuple3 \n\n Tuple three arguments\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tuple4","title":"Operators.tuple4","content":"Operators.tuple4 \ntuple4 \n\n Tuple four arguments\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tuple5","title":"Operators.tuple5","content":"Operators.tuple5 \ntuple5 \n\n Tuple five arguments\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tuple6","title":"Operators.tuple6","content":"Operators.tuple6 \ntuple6 \n\n Tuple six arguments\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tuple7","title":"Operators.tuple7","content":"Operators.tuple7 \ntuple7 \n\n Tuple seven arguments\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tuple8","title":"Operators.tuple8","content":"Operators.tuple8 \ntuple8 \n\n Tuple eight arguments\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#map","title":"Operators.map","content":"Operators.map \nmap \n\n Lifts a function into a Functor.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( <!> )","title":"Operators.( <!> )","content":"Operators.( <!> ) \n( <!> ) \n\n Lifts a function into a Functor. Same as map.\n To be used in Applicative Style expressions, combined with <*>\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( <<| )","title":"Operators.( <<| )","content":"Operators.( <<| ) \n( <<| ) \n\n Lifts a function into a Functor. Same as map.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( |>> )","title":"Operators.( |>> )","content":"Operators.( |>> ) \n( |>> ) \n\n Lifts a function into a Functor. Same as map but with flipped arguments.\n To be used in pipe-forward style expressions\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#iter","title":"Operators.iter","content":"Operators.iter \niter \n\n Like map but ignoring the results.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#unzip","title":"Operators.unzip","content":"Operators.unzip \nunzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#zip","title":"Operators.zip","content":"Operators.zip \nzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#result","title":"Operators.result","content":"Operators.result \nresult \n\n Lifts a value into a Functor. Same as return in Computation Expressions.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( <*> )","title":"Operators.( <*> )","content":"Operators.( <*> ) \n( <*> ) \n\n Apply a lifted argument to a lifted function: f <*> arg\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#lift2","title":"Operators.lift2","content":"Operators.lift2 \nlift2 \n\n Applies 2 lifted arguments to a non-lifted function. Equivalent to map2 in non list-like types.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#liftA2","title":"Operators.liftA2","content":"Operators.liftA2 \nliftA2 \n\n Apply 2 lifted arguments to a non-lifted function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( *> )","title":"Operators.( *> )","content":"Operators.( *> ) \n( *> ) \n\n Sequences two applicatives left-to-right, discarding the value of the first argument.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( <* )","title":"Operators.( <* )","content":"Operators.( <* ) \n( <* ) \n\n Sequences two applicatives left-to-right, discarding the value of the second argument.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( <**> )","title":"Operators.( <**> )","content":"Operators.( <**> ) \n( <**> ) \n\n Apply a lifted argument to a lifted function (flipped): arg <**> f\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#optional","title":"Operators.optional","content":"Operators.optional \noptional \n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#opt","title":"Operators.opt","content":"Operators.opt \nopt \n\n Transforms an alternative value (which has the notion of success/failure) to an alternative\n that always succeed, wrapping the original value into an option to signify success/failure of the original alternative.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#bind","title":"Operators.bind","content":"Operators.bind \nbind \n\n Takes a function from a plain type to a monadic value and a monadic value, and returns a new monadic value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( >>= )","title":"Operators.( >>= )","content":"Operators.( >>= ) \n( >>= ) \n\n Takes a monadic value and a function from a plain type to a monadic value, and returns a new monadic value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( =<< )","title":"Operators.( =<< )","content":"Operators.( =<< ) \n( =<< ) \n\n Takes a function from a plain type to a monadic value and a monadic value, and returns a new monadic value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( >=> )","title":"Operators.( >=> )","content":"Operators.( >=> ) \n( >=> ) \n\n Composes left-to-right two monadic functions (Kleisli composition).\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( <=< )","title":"Operators.( <=< )","content":"Operators.( <=< ) \n( <=< ) \n\n Composes right-to-left two monadic functions (Kleisli composition).\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#join","title":"Operators.join","content":"Operators.join \njoin \n\n Flattens two layers of monadic information into one.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#liftM","title":"Operators.liftM","content":"Operators.liftM \nliftM \n\n Equivalent to map but only for Monads.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#getZero","title":"Operators.getZero","content":"Operators.getZero \ngetZero \n\n Gets a value that represents the 0 element of a Monoid.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#zero","title":"Operators.zero","content":"Operators.zero \nzero \n\n A value that represents the 0 element of a Monoid.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( ++ )","title":"Operators.( ++ )","content":"Operators.( ++ ) \n( ++ ) \n\n Combines two monoids in one.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#plus","title":"Operators.plus","content":"Operators.plus \nplus \n\n Combines two monoids in one.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#getEmpty","title":"Operators.getEmpty","content":"Operators.getEmpty \ngetEmpty \n\n Gets a functor representing the empty value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#empty","title":"Operators.empty","content":"Operators.empty \nempty \n\n A functor representing the empty value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( <|> )","title":"Operators.( <|> )","content":"Operators.( <|> ) \n( <|> ) \n\n Combines two Alternatives\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#guard","title":"Operators.guard","content":"Operators.guard \nguard \n\n Conditional failure of Alternative computations.\n If true it lifts the unit value, else it returns empty.\n\n Common uses of guard include conditionally signaling an error in an error monad and conditionally rejecting the current choice in an Alternative-based parser.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#contramap","title":"Operators.contramap","content":"Operators.contramap \ncontramap \n\n Maps over the input.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#bimap","title":"Operators.bimap","content":"Operators.bimap \nbimap \n\n Maps over both arguments of the Bifunctor at the same time.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#first","title":"Operators.first","content":"Operators.first \nfirst \n\n Maps covariantly over the first argument of the Bifunctor.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#second","title":"Operators.second","content":"Operators.second \nsecond \n\n Maps covariantly over the second argument of the Bifunctor.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#dimap","title":"Operators.dimap","content":"Operators.dimap \ndimap \n\n Maps over both arguments at the same time of a Profunctor.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#lmap","title":"Operators.lmap","content":"Operators.lmap \nlmap \n\n Maps over the left part of a Profunctor.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#rmap","title":"Operators.rmap","content":"Operators.rmap \nrmap \n\n Maps over the right part of a Profunctor.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#invmap","title":"Operators.invmap","content":"Operators.invmap \ninvmap \n\n Maps a pair of functions over an Invariant Functor\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#getCatId","title":"Operators.getCatId","content":"Operators.getCatId \ngetCatId \n\n Gets the identity morphism.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#catId","title":"Operators.catId","content":"Operators.catId \ncatId \n\n The identity morphism.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#catComp","title":"Operators.catComp","content":"Operators.catComp \ncatComp \n\n Right-to-left morphism composition.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#arr","title":"Operators.arr","content":"Operators.arr \narr \n\n Lifts a function to an arrow.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#arrFirst","title":"Operators.arrFirst","content":"Operators.arrFirst \narrFirst \n\n Sends the first component of the input through the argument arrow, and copy the rest unchanged to the output.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#arrSecond","title":"Operators.arrSecond","content":"Operators.arrSecond \narrSecond \n\n Sends the second component of the input through the argument arrow, and copy the rest unchanged to the output.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( *** )","title":"Operators.( *** )","content":"Operators.( *** ) \n( *** ) \n\n Splits the input between the two argument arrows and combine their output. Note that this is in general not a functor.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#fanout","title":"Operators.fanout","content":"Operators.fanout \nfanout \n\n Sends the input to both argument arrows and combine their output. Also known as the (&&&) operator.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#fanin","title":"Operators.fanin","content":"Operators.fanin \nfanin \n\n Splits the input between the two argument arrows and merge their outputs. Also known as the (|||) operator.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( +++ )","title":"Operators.( +++ )","content":"Operators.( +++ ) \n( +++ ) \n\n Splits the input between both argument arrows, retagging and merging their outputs. Note that this is in general not a functor.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#left","title":"Operators.left","content":"Operators.left \nleft \n\n Feeds marked inputs through the left argument arrow, passing the rest through unchanged to the output.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#right","title":"Operators.right","content":"Operators.right \nright \n\n Feeds marked inputs through the right argument arrow, passing the rest through unchanged to the output.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#getApp","title":"Operators.getApp","content":"Operators.getApp \ngetApp \n\n Applies an arrow produced as the output of some previous computation to an input, producing its output as the output of app.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#app","title":"Operators.app","content":"Operators.app \napp \n\n Applies an arrow produced as the output of some previous computation to an input, producing its output as the output of app.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#foldBack","title":"Operators.foldBack","content":"Operators.foldBack \nfoldBack \nApplies a function to each element of the foldable, starting from the end, threading an accumulator argument\n through the computation. If the input function is <code>f</code> and the elements are <code>i0...iN</code> then \n computes <code>f i0 (...(f iN s))</code>."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#fold","title":"Operators.fold","content":"Operators.fold \nfold \nApplies a function to each element of the foldable, threading an accumulator argument\n through the computation. Take the second argument, and apply the function to it\n and the first element of the foldable. Then feed this result into the function along\n with the second element and so on. Return the final result.\n If the input function is <code>f</code> and the elements are <code>i0...iN</code> then \n computes <code>f (... (f s i0) i1 ...) iN</code>."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#foldMap","title":"Operators.foldMap","content":"Operators.foldMap \nfoldMap \n\n Folds by mapping all values to a Monoid\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#toList","title":"Operators.toList","content":"Operators.toList \ntoList \nBuilds a list from the given foldable."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#toArray","title":"Operators.toArray","content":"Operators.toArray \ntoArray \nBuilds an array from the given foldable."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#toSeq","title":"Operators.toSeq","content":"Operators.toSeq \ntoSeq \nViews the given foldable as a sequence."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#exists","title":"Operators.exists","content":"Operators.exists \nexists \nTests if any element of the list satisfies the given predicate. \nThe predicate is applied to the elements of the input foldable. If any application \n returns true then the overall result is true and no further elements are tested. \n Otherwise, false is returned."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#forall","title":"Operators.forall","content":"Operators.forall \nforall \nTests if all elements of the collection satisfy the given predicate. \nThe predicate is applied to the elements of the input foldable. If any application \n returns false then the overall result is false and no further elements are tested. \n Otherwise, true is returned."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#find","title":"Operators.find","content":"Operators.find \nfind \nGets the first element for which the given function returns true.\n Raises <code>KeyNotFoundException</code> if no such element exists."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tryFind","title":"Operators.tryFind","content":"Operators.tryFind \ntryFind \nGets the first element for which the given function returns true.\n Returns None if no such element exists."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#pick","title":"Operators.pick","content":"Operators.pick \npick \nApplies the given function to successive elements, returning the first\n result where function returns <code>Some(x)</code> for some x. If no such\n element exists then raise <code>System.Collections.Generic.KeyNotFoundException</code>"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tryPick","title":"Operators.tryPick","content":"Operators.tryPick \ntryPick \nApplies the given function to successive elements, returning <code>Some(x)</code> the first\n result where function returns <code>Some(x)</code> for some x. If no such element \n exists then return <code>None</code>."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#intercalate","title":"Operators.intercalate","content":"Operators.intercalate \nintercalate \n\n Folds the source, inserting a separator between each element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#head","title":"Operators.head","content":"Operators.head \nhead \nGets the first element of the foldable."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tryHead","title":"Operators.tryHead","content":"Operators.tryHead \ntryHead \nGets the first element of the foldable, or\n <code>None</code> if the foldable is empty."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#length","title":"Operators.length","content":"Operators.length \nlength \nGets the number of elements in the foldable."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#maximum","title":"Operators.maximum","content":"Operators.maximum \nmaximum \n\n Gets the maximum value in the foldable\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#minimum","title":"Operators.minimum","content":"Operators.minimum \nminimum \n\n Gets the minimum value in the foldable\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#maxBy","title":"Operators.maxBy","content":"Operators.maxBy \nmaxBy \n\n Gets the maximum value after projecting in the foldable\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#minBy","title":"Operators.minBy","content":"Operators.minBy \nminBy \n\n Gets the minimum value after projecting in the foldable\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#nth","title":"Operators.nth","content":"Operators.nth \nnth \n\n Gets the nth value in the foldable - i.e. at position 'n'\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#reduce","title":"Operators.reduce","content":"Operators.reduce \nreduce \nApplies a function to each element of the reducible, threading an accumulator argument\n through the computation. Apply the function to the first two elements of the reducible.\n Then feed this result into the function along with the third element and so on. \n Return the final result. If the input function is <code>f</code> and the elements are <code>i0...iN</code> then computes \n <code>f (... (f i0 i1) i2 ...) iN</code>."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#traverse","title":"Operators.traverse","content":"Operators.traverse \ntraverse \n\n Map each element of a structure to an action, evaluate these actions from left to right, and collect the results.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#sequence","title":"Operators.sequence","content":"Operators.sequence \nsequence \n\n Evaluate each action in the structure from left to right, and and collect the results.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#bifoldMap","title":"Operators.bifoldMap","content":"Operators.bifoldMap \nbifoldMap \n\n Combines the elements of a structure, given ways of mapping them to a common monoid.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#bifold","title":"Operators.bifold","content":"Operators.bifold \nbifold \n\n Combines the elements of a structure in a right associative manner.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#bifoldBack","title":"Operators.bifoldBack","content":"Operators.bifoldBack \nbifoldBack \n\n Combines the elements of a structure in a left associative manner.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#bisum","title":"Operators.bisum","content":"Operators.bisum \nbisum \n\n Combines the elements of a structure using a monoid.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#bitraverse","title":"Operators.bitraverse","content":"Operators.bitraverse \nbitraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#bisequence","title":"Operators.bisequence","content":"Operators.bisequence \nbisequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#item","title":"Operators.item","content":"Operators.item \nitem \n\n Gets an item from the given index.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tryItem","title":"Operators.tryItem","content":"Operators.tryItem \ntryItem \n\n Tries to get an item from the given index.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#mapi","title":"Operators.mapi","content":"Operators.mapi \nmapi \n\n Maps with access to the index.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#iteri","title":"Operators.iteri","content":"Operators.iteri \niteri \n\n Maps an action with access to an index.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#foldi","title":"Operators.foldi","content":"Operators.foldi \nfoldi \n\n Left-associative fold of an indexed container with access to the index i.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#traversei","title":"Operators.traversei","content":"Operators.traversei \ntraversei \n\n Traverses an indexed container. Behaves exactly like a regular traverse except that the traversing function also has access to the key associated with a value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#findIndex","title":"Operators.findIndex","content":"Operators.findIndex \nfindIndex \n\n Gets the index of the first element in the source\n that satisfies the given predicate.\n "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tryFindIndex","title":"Operators.tryFindIndex","content":"Operators.tryFindIndex \ntryFindIndex \n\n Gets the index of the first element in the source\n that satisfies the given predicate.\n Returns <code>None</code> if not found.\n "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#findSliceIndex","title":"Operators.findSliceIndex","content":"Operators.findSliceIndex \nfindSliceIndex \n\n Gets the index of the first occurrence of the specified slice in the source.\n "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tryFindSliceIndex","title":"Operators.tryFindSliceIndex","content":"Operators.tryFindSliceIndex \ntryFindSliceIndex \n\n Gets the index of the first occurrence of the specified slice in the source.\n Returns <code>None</code> if not found.\n "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#extract","title":"Operators.extract","content":"Operators.extract \nextract \n\n Extracts a value from a comonadic context.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#extend","title":"Operators.extend","content":"Operators.extend \nextend \n Extends a local context-dependent computation to a global computation. "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( =>> )","title":"Operators.( =>> )","content":"Operators.( =>> ) \n( =>> ) \n Extends a local context-dependent computation to a global computation.\n Same as <code>extend</code> but with flipped arguments. "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#duplicate","title":"Operators.duplicate","content":"Operators.duplicate \nduplicate \n\n Duplicates a comonadic context.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#lift","title":"Operators.lift","content":"Operators.lift \nlift \n\n Lifts a computation from the inner monad to the constructed monad.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#liftAsync","title":"Operators.liftAsync","content":"Operators.liftAsync \nliftAsync \n\n A specialized lift for Async<'T> which is able to bring an Async value from any depth of monad-layers.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#callCC","title":"Operators.callCC","content":"Operators.callCC \ncallCC \n\n Calls a function with the current continuation as its argument (call-with-current-continuation).\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#get","title":"Operators.get","content":"Operators.get \nget \n\n The state from the internals of the monad.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#gets","title":"Operators.gets","content":"Operators.gets \ngets \n\n Gets a value which depends on the current state.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#put","title":"Operators.put","content":"Operators.put \nput \n\n Replaces the state inside the monad.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#modify","title":"Operators.modify","content":"Operators.modify \nmodify \n\n Modifies the state inside the monad by applying a function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#ask","title":"Operators.ask","content":"Operators.ask \nask \n\n The environment from the monad.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#local","title":"Operators.local","content":"Operators.local \nlocal \n Executes a computation in a modified environment. "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tell","title":"Operators.tell","content":"Operators.tell \ntell \n\n Embeds a simple writer action.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#listen","title":"Operators.listen","content":"Operators.listen \nlisten \n Executes the action <span class=\"fsdocs-param-name\">m</span> and adds its output to the value of the computation. "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#pass","title":"Operators.pass","content":"Operators.pass \npass \n\n Executes the action <paramref name=\"m\"/>, which returns a value and a function, and returns the value, applying the function to the output.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#throw","title":"Operators.throw","content":"Operators.throw \nthrow \n\n Throws an error value inside the Error monad.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#catch","title":"Operators.catch","content":"Operators.catch \ncatch \n Executes a handler when the value contained in the Error monad represents an error. "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#ofList","title":"Operators.ofList","content":"Operators.ofList \nofList \n\n Converts to a Collection from a list.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#ofSeq","title":"Operators.ofSeq","content":"Operators.ofSeq \nofSeq \n\n Converts to a Collection from a seq.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#filter","title":"Operators.filter","content":"Operators.filter \nfilter \nReturns a new collection containing only the elements of the collection\n for which the given predicate returns \"true\""},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#skip","title":"Operators.skip","content":"Operators.skip \nskip \nReturns a collection that skips N elements of the original collection and then yields the\n remaining elements of the collection. \nThrows <code>InvalidOperationException</code>\n when count exceeds the number of elements in the collection. <code>drop</code>\n returns an empty collection instead of throwing an exception."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#take","title":"Operators.take","content":"Operators.take \ntake \nGets the first N elements of the collection. \nThrows <code>InvalidOperationException</code>\n if the count exceeds the number of elements in the collection. <code>limit</code>\n returns as many items as the collection contains instead of throwing an exception."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#drop","title":"Operators.drop","content":"Operators.drop \ndrop \nReturns a collection that drops N elements of the original collection and then yields the\n remaining elements of the collection. \nWhen count exceeds the number of elements in the collection it\n returns an empty collection instead of throwing an exception."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#limit","title":"Operators.limit","content":"Operators.limit \nlimit \nReturns a collection with at most N elements."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#groupBy","title":"Operators.groupBy","content":"Operators.groupBy \ngroupBy \nApplies a key-generating function to each element of a collection and yields a collection of \n unique keys. Each unique key contains a collection of all elements that match \n to this key. \nThis function returns a collection that digests the whole initial collection as soon as \n that collection is iterated. As a result this function should not be used with \n large or infinite collections. The function makes no assumption on the ordering of the original \n collection."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#chunkBy","title":"Operators.chunkBy","content":"Operators.chunkBy \nchunkBy \nApplies a key-generating function to each element of a collection and yields a collection of \n keys tupled with values. Each key contains a collection of all adjacent elements that match \n to this key, therefore keys are not unique but they can't be adjacent\n as each time the key changes, a new group is yield. \nThe ordering of the original collection is respected."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#takeWhile","title":"Operators.takeWhile","content":"Operators.takeWhile \ntakeWhile \nReturns a collection that contains all elements of the original collection while the\n given predicate returns true, and then returns no further elements."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#skipWhile","title":"Operators.skipWhile","content":"Operators.skipWhile \nskipWhile \nBypasses elements in a collection while the given predicate returns true, and then returns\n the remaining elements of the collection."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#choose","title":"Operators.choose","content":"Operators.choose \nchoose \n\n Generic 'choose' for any collection.\n \n A combination of map and filter, `choose` enables you to transform\n and select elements at the same time.\n "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#distinct","title":"Operators.distinct","content":"Operators.distinct \ndistinct \nReturns a collection that contains no duplicate entries according to generic hash and\n equality comparisons on the entries.\n If an element occurs multiple times in the collection then the later occurrences are discarded."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#distinctBy","title":"Operators.distinctBy","content":"Operators.distinctBy \ndistinctBy \nReturns a collection that contains no duplicate entries according to the \n generic hash and equality comparisons on the keys returned by the given key-generating function.\n If an element occurs multiple times in the collection then the later occurrences are discarded."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#intersperse","title":"Operators.intersperse","content":"Operators.intersperse \nintersperse \n\n Inserts a separator between each element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#replace","title":"Operators.replace","content":"Operators.replace \nreplace \nReplaces part of the collection with a new part"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#rev","title":"Operators.rev","content":"Operators.rev \nrev \nReturns a new collection with the elements in reverse order."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#scan","title":"Operators.scan","content":"Operators.scan \nscan \nLike fold, but computes on-demand and returns the collection of intermediary and final results."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#sort","title":"Operators.sort","content":"Operators.sort \nsort \nReturns a collection ordered by keys. \nThis function makes no assumption on the ordering of the original collection.\n\n This is a stable sort, that is the original order of equal elements is preserved."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#sortBy","title":"Operators.sortBy","content":"Operators.sortBy \nsortBy \nApplies a key-generating function to each element of a collection and returns a collection ordered\n by keys. The keys are compared using generic comparison as implemented by <code>Operators.compare</code>. \nThis function makes no assumption on the ordering of the original collection.\n\n This is a stable sort, that is the original order of equal elements is preserved."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#sortByDescending","title":"Operators.sortByDescending","content":"Operators.sortByDescending \nsortByDescending \nYields a collection ordered descending by keys. \nThis function makes no assumption on the ordering of the original collection.\n\n This is a stable sort, that is the original order of equal elements is preserved."},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#split","title":"Operators.split","content":"Operators.split \nsplit \n\n Splits a given ordered collection at each of the given sub-ordered collections\n\n <example>\n <code>\n > \"asdf\" |> split [\"s\"];;\n val it : string list = [\"a\"; \"df\"]\n\n > [1;2;3;4;5;6;7] |> split [ [2;3]; [5] ];;\n val it : int list list = [[1]; [4]; [6; 7]]\n </code>\n </example>\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#item1","title":"Operators.item1","content":"Operators.item1 \nitem1 \n\n Gets the value of the first component of a tuple.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#item2","title":"Operators.item2","content":"Operators.item2 \nitem2 \n\n Gets the value of the second component of a tuple.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#item3","title":"Operators.item3","content":"Operators.item3 \nitem3 \n\n Gets the value of the third component of a tuple.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#item4","title":"Operators.item4","content":"Operators.item4 \nitem4 \n\n Gets the value of the fourth component of a tuple.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#item5","title":"Operators.item5","content":"Operators.item5 \nitem5 \n\n Gets the value of the fifth component of a tuple.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#mapItem1","title":"Operators.mapItem1","content":"Operators.mapItem1 \nmapItem1 \n\n Maps the first value of a tuple.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#mapItem2","title":"Operators.mapItem2","content":"Operators.mapItem2 \nmapItem2 \n\n Maps the second value of a tuple.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#mapItem3","title":"Operators.mapItem3","content":"Operators.mapItem3 \nmapItem3 \n\n Maps the third value of a tuple.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#mapItem4","title":"Operators.mapItem4","content":"Operators.mapItem4 \nmapItem4 \n\n Maps the fourth value of a tuple.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#mapItem5","title":"Operators.mapItem5","content":"Operators.mapItem5 \nmapItem5 \n\n Maps the fifth value of a tuple.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#explicit","title":"Operators.explicit","content":"Operators.explicit \nexplicit \n\n Converts using the explicit operator.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#ofBytesWithOptions","title":"Operators.ofBytesWithOptions","content":"Operators.ofBytesWithOptions \nofBytesWithOptions \n\n Convert from a byte array value, given options of little-endian, and startIndex\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#ofBytes","title":"Operators.ofBytes","content":"Operators.ofBytes \nofBytes \n\n Convert from a byte array value, assuming little-endian\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#ofBytesBE","title":"Operators.ofBytesBE","content":"Operators.ofBytesBE \nofBytesBE \n\n Convert from a byte array value, assuming big-endian\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#toBytes","title":"Operators.toBytes","content":"Operators.toBytes \ntoBytes \n\n Convert to a byte array value, assuming little endian\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#toBytesBE","title":"Operators.toBytesBE","content":"Operators.toBytesBE \ntoBytesBE \n\n Convert to a byte array value, assuming big endian\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#parse","title":"Operators.parse","content":"Operators.parse \nparse \n\n Converts to a value from its string representation.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tryParse","title":"Operators.tryParse","content":"Operators.tryParse \ntryParse \n\n Converts to a value from its string representation. Returns None if the convertion doesn't succeed.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#getOne","title":"Operators.getOne","content":"Operators.getOne \ngetOne \n\n Gets a value that represents the number 1 (one).\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#one","title":"Operators.one","content":"Operators.one \none \n\n A value that represents the 1 element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#divRem","title":"Operators.divRem","content":"Operators.divRem \ndivRem \n\n Divides one number by another, returns a tuple with the result and the remainder.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#getMinValue","title":"Operators.getMinValue","content":"Operators.getMinValue \ngetMinValue \n\n Gets the smallest possible value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#minValue","title":"Operators.minValue","content":"Operators.minValue \nminValue \n\n The smallest possible value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#getMaxValue","title":"Operators.getMaxValue","content":"Operators.getMaxValue \ngetMaxValue \n\n Gets the largest possible value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#maxValue","title":"Operators.maxValue","content":"Operators.maxValue \nmaxValue \n\n The largest possible value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#fromBigInt","title":"Operators.fromBigInt","content":"Operators.fromBigInt \nfromBigInt \n\n Converts from BigInteger to the inferred destination type.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#toBigInt","title":"Operators.toBigInt","content":"Operators.toBigInt \ntoBigInt \n\n Converts to BigInteger.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#getPi","title":"Operators.getPi","content":"Operators.getPi \ngetPi \n\n Gets the pi number.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#pi","title":"Operators.pi","content":"Operators.pi \npi \n\n The pi number.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#negate","title":"Operators.negate","content":"Operators.negate \nnegate \n\n Additive inverse of the number.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#negate'","title":"Operators.negate'","content":"Operators.negate' \nnegate' \n\n Additive inverse of the number.\n Works also for unsigned types (Throws an exception if there is no inverse).\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tryNegate'","title":"Operators.tryNegate'","content":"Operators.tryNegate' \ntryNegate' \n\n Additive inverse of the number.\n Works also for unsigned types (Returns none if there is no inverse).\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#subtract","title":"Operators.subtract","content":"Operators.subtract \nsubtract \n\n Subtraction between two numbers. Throws an error if the result is negative on unsigned types.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#trySubtract","title":"Operators.trySubtract","content":"Operators.trySubtract \ntrySubtract \n\n Subtraction between two numbers. Returns None if the result is negative on unsigned types.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#div","title":"Operators.div","content":"Operators.div \ndiv \n\n Division between two numbers. If the numbers are not divisible throws an error.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#tryDiv","title":"Operators.tryDiv","content":"Operators.tryDiv \ntryDiv \n\n Division between two numbers. Returns None if the numbers are not divisible.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#sqrt","title":"Operators.sqrt","content":"Operators.sqrt \nsqrt \n\n Square root of a number of any type. Throws an exception if there is no square root.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#trySqrt","title":"Operators.trySqrt","content":"Operators.trySqrt \ntrySqrt \n\n Square root of a number of any type. Returns None if there is no square root.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#isqrt","title":"Operators.isqrt","content":"Operators.isqrt \nisqrt \n\n Square root of an integral number.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#sqrtRem","title":"Operators.sqrtRem","content":"Operators.sqrtRem \nsqrtRem \n\n Square root of an integral number.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#signum","title":"Operators.signum","content":"Operators.signum \nsignum \nSign of the given number\n <p class='fsdocs-para'></p>   Rule: signum x * abs x = x "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#signum'","title":"Operators.signum'","content":"Operators.signum' \nsignum' \nSign of the given number\n           Works also for unsigned types. \n <p class='fsdocs-para'></p>   Rule: signum x * abs x = x "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#abs","title":"Operators.abs","content":"Operators.abs \nabs \n Gets the absolute value of the given number.\n <p class='fsdocs-para'></p>   Rule: signum x * abs x = x "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#abs'","title":"Operators.abs'","content":"Operators.abs' \nabs' \n Gets the absolute value of the given number.\n           Works also for unsigned types. \n <p class='fsdocs-para'></p>   Rule: signum x * abs x = x "},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#choice","title":"Operators.choice","content":"Operators.choice \nchoice \n\n Reduces using alternative operator `<|>`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#mfilter","title":"Operators.mfilter","content":"Operators.mfilter \nmfilter \n\n Generic filter operation for MonadZero. It returns all values satisfying the predicate, if the predicate returns false will use the empty value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#sum","title":"Operators.sum","content":"Operators.sum \nsum \n\n Folds the sum of all monoid elements in the Foldable.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#implicit","title":"Operators.implicit","content":"Operators.implicit \nimplicit \n\n Converts using the implicit operator. \n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#dispose","title":"Operators.dispose","content":"Operators.dispose \ndispose \n\n Safely dispose a resource (includes null-checking).\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators.html#( |Parse|_| )","title":"Operators.( |Parse|_| )","content":"Operators.( |Parse|_| ) \n( |Parse|_| ) \n\n An active recognizer for a generic value parser.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators-arrows.html","title":"Arrows","content":"Arrows \nAdditional operators for Arrows related functions which shadows some F# operators for bitwise functions. \nArrows.( <<< ) \n( <<< ) \nArrows.( >>> ) \n( >>> ) \nArrows.( &&& ) \n( &&& ) \nArrows.( ||| ) \n( ||| )"},{"uri":"/FSharpPlusreference/fsharpplus-operators-arrows.html#( <<< )","title":"Arrows.( <<< )","content":"Arrows.( <<< ) \n( <<< ) \n\n Right-to-left morphism composition.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators-arrows.html#( >>> )","title":"Arrows.( >>> )","content":"Arrows.( >>> ) \n( >>> ) \n\n Left-to-right morphism composition.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators-arrows.html#( &&& )","title":"Arrows.( &&& )","content":"Arrows.( &&& ) \n( &&& ) \n\n Sends the input to both argument arrows and combine their output. Also known as fanout.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators-arrows.html#( ||| )","title":"Arrows.( ||| )","content":"Arrows.( ||| ) \n( ||| ) \n\n Splits the input between the two argument arrows and merge their outputs. Also known as fanin.\n"},{"uri":"/FSharpPlusreference/fsharpplus-operators-seq.html","title":"Seq","content":"Seq \n \nSeq.sum \nsum"},{"uri":"/FSharpPlusreference/fsharpplus-operators-seq.html#sum","title":"Seq.sum","content":"Seq.sum \nsum \n\n Folds all values in the sequence using the monoidal addition.\n"},{"uri":"/FSharpPlusreference/fsharpplus-option.html","title":"Option","content":"Option \n\n Additional operations on Option\n \nOption.apply \napply \nOption.unzip \nunzip \nOption.zip \nzip \nOption.toResult \ntoResult \nOption.toResultWith \ntoResultWith \nOption.ofResult \nofResult \nOption.protect \nprotect"},{"uri":"/FSharpPlusreference/fsharpplus-option.html#apply","title":"Option.apply","content":"Option.apply \napply \nApplies an option value to an option function."},{"uri":"/FSharpPlusreference/fsharpplus-option.html#unzip","title":"Option.unzip","content":"Option.unzip \nunzip \nIf value is Some, returns both of them tupled. Otherwise it returns None tupled."},{"uri":"/FSharpPlusreference/fsharpplus-option.html#zip","title":"Option.zip","content":"Option.zip \nzip \nIf both value are Some, returns both of them tupled. Otherwise it returns None."},{"uri":"/FSharpPlusreference/fsharpplus-option.html#toResult","title":"Option.toResult","content":"Option.toResult \ntoResult \nConverts an option to a Result."},{"uri":"/FSharpPlusreference/fsharpplus-option.html#toResultWith","title":"Option.toResultWith","content":"Option.toResultWith \ntoResultWith \nConverts an option to a Result."},{"uri":"/FSharpPlusreference/fsharpplus-option.html#ofResult","title":"Option.ofResult","content":"Option.ofResult \nofResult \nConverts a Result to an option. \nThe error value (if any) is lost."},{"uri":"/FSharpPlusreference/fsharpplus-option.html#protect","title":"Option.protect","content":"Option.protect \nprotect \n\n Creates a safe version of the supplied function, which returns an option<'U> instead of throwing exceptions.\n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing.html","title":"Parsing","content":"Parsing \n \nParsing.Internals \nInternals \nParsing.parseArray \nparseArray \nParsing.sscanf \nsscanf \nParsing.scanfn \nscanfn \nParsing.tryParseArray \ntryParseArray \nParsing.trySscanf \ntrySscanf \nParsing.tryScanfn \ntryScanfn"},{"uri":"/FSharpPlusreference/fsharpplus-parsing.html#parseArray","title":"Parsing.parseArray","content":"Parsing.parseArray \nparseArray \n\n Gets a tuple with the result of parsing each element of a string array.\n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing.html#sscanf","title":"Parsing.sscanf","content":"Parsing.sscanf \nsscanf \n\n Gets a tuple with the result of parsing each element of a formatted text.\n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing.html#scanfn","title":"Parsing.scanfn","content":"Parsing.scanfn \nscanfn \n\n Gets a tuple with the result of parsing each element of a formatted text from the Console.\n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing.html#tryParseArray","title":"Parsing.tryParseArray","content":"Parsing.tryParseArray \ntryParseArray \n\n Gets a tuple with the result of parsing each element of a string array. Returns None in case of failure.\n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing.html#trySscanf","title":"Parsing.trySscanf","content":"Parsing.trySscanf \ntrySscanf \n\n Gets a tuple with the result of parsing each element of a formatted text. Returns None in case of failure.\n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing.html#tryScanfn","title":"Parsing.tryScanfn","content":"Parsing.tryScanfn \ntryScanfn \n\n Gets a tuple with the result of parsing each element of a formatted text from the Console. Returns None in case of failure.\n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals.html","title":"Internals","content":"Internals \n\n [omit]\n \nInternals.ParseArray \nParseArray \nInternals.TryParseArray \nTryParseArray \nInternals.formatters \nformatters \nInternals.getGroups \ngetGroups \nInternals.tryParseElemAt \ntryParseElemAt"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals.html#formatters","title":"Internals.formatters","content":"Internals.formatters \nformatters \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals.html#getGroups","title":"Internals.getGroups","content":"Internals.getGroups \ngetGroups \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals.html#tryParseElemAt","title":"Internals.tryParseElemAt","content":"Internals.tryParseElemAt \ntryParseElemAt \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-parsearray.html","title":"ParseArray","content":"ParseArray \n \nParseArray.Invoke \nInvoke \nParseArray.ParseArray \nParseArray \nParseArray.ParseArray \nParseArray \nParseArray.ParseArray \nParseArray \nParseArray.ParseArray \nParseArray \nParseArray.ParseArray \nParseArray \nParseArray.ParseArray \nParseArray \nParseArray.ParseArray \nParseArray \nParseArray.ParseArray \nParseArray \nParseArray.ParseArray \nParseArray \nParseArray.ParseArray \nParseArray \nParseArray.ParseArray \nParseArray"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-parsearray.html#Invoke","title":"ParseArray.Invoke","content":"ParseArray.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-parsearray.html#ParseArray","title":"ParseArray.ParseArray","content":"ParseArray.ParseArray \nParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-parsearray.html#ParseArray","title":"ParseArray.ParseArray","content":"ParseArray.ParseArray \nParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-parsearray.html#ParseArray","title":"ParseArray.ParseArray","content":"ParseArray.ParseArray \nParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-parsearray.html#ParseArray","title":"ParseArray.ParseArray","content":"ParseArray.ParseArray \nParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-parsearray.html#ParseArray","title":"ParseArray.ParseArray","content":"ParseArray.ParseArray \nParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-parsearray.html#ParseArray","title":"ParseArray.ParseArray","content":"ParseArray.ParseArray \nParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-parsearray.html#ParseArray","title":"ParseArray.ParseArray","content":"ParseArray.ParseArray \nParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-parsearray.html#ParseArray","title":"ParseArray.ParseArray","content":"ParseArray.ParseArray \nParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-parsearray.html#ParseArray","title":"ParseArray.ParseArray","content":"ParseArray.ParseArray \nParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-parsearray.html#ParseArray","title":"ParseArray.ParseArray","content":"ParseArray.ParseArray \nParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-parsearray.html#ParseArray","title":"ParseArray.ParseArray","content":"ParseArray.ParseArray \nParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-tryparsearray.html","title":"TryParseArray","content":"TryParseArray \n \nTryParseArray.Invoke \nInvoke \nTryParseArray.TryParseArray \nTryParseArray \nTryParseArray.TryParseArray \nTryParseArray \nTryParseArray.TryParseArray \nTryParseArray \nTryParseArray.TryParseArray \nTryParseArray \nTryParseArray.TryParseArray \nTryParseArray \nTryParseArray.TryParseArray \nTryParseArray \nTryParseArray.TryParseArray \nTryParseArray \nTryParseArray.TryParseArray \nTryParseArray \nTryParseArray.TryParseArray \nTryParseArray \nTryParseArray.TryParseArray \nTryParseArray \nTryParseArray.TryParseArray \nTryParseArray"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-tryparsearray.html#Invoke","title":"TryParseArray.Invoke","content":"TryParseArray.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-tryparsearray.html#TryParseArray","title":"TryParseArray.TryParseArray","content":"TryParseArray.TryParseArray \nTryParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-tryparsearray.html#TryParseArray","title":"TryParseArray.TryParseArray","content":"TryParseArray.TryParseArray \nTryParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-tryparsearray.html#TryParseArray","title":"TryParseArray.TryParseArray","content":"TryParseArray.TryParseArray \nTryParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-tryparsearray.html#TryParseArray","title":"TryParseArray.TryParseArray","content":"TryParseArray.TryParseArray \nTryParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-tryparsearray.html#TryParseArray","title":"TryParseArray.TryParseArray","content":"TryParseArray.TryParseArray \nTryParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-tryparsearray.html#TryParseArray","title":"TryParseArray.TryParseArray","content":"TryParseArray.TryParseArray \nTryParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-tryparsearray.html#TryParseArray","title":"TryParseArray.TryParseArray","content":"TryParseArray.TryParseArray \nTryParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-tryparsearray.html#TryParseArray","title":"TryParseArray.TryParseArray","content":"TryParseArray.TryParseArray \nTryParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-tryparsearray.html#TryParseArray","title":"TryParseArray.TryParseArray","content":"TryParseArray.TryParseArray \nTryParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-tryparsearray.html#TryParseArray","title":"TryParseArray.TryParseArray","content":"TryParseArray.TryParseArray \nTryParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-parsing-internals-tryparsearray.html#TryParseArray","title":"TryParseArray.TryParseArray","content":"TryParseArray.TryParseArray \nTryParseArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-resizearray.html","title":"ResizeArray","content":"ResizeArray \n\n Additional operations on ResizeArray\n \nResizeArray.map \nmap \nResizeArray.apply \napply \nResizeArray.lift2 \nlift2 \nResizeArray.intercalate \nintercalate \nResizeArray.intersperse \nintersperse \nResizeArray.split \nsplit \nResizeArray.replace \nreplace \nResizeArray.findSliceIndex \nfindSliceIndex \nResizeArray.tryFindSliceIndex \ntryFindSliceIndex \nResizeArray.partitionMap \npartitionMap"},{"uri":"/FSharpPlusreference/fsharpplus-resizearray.html#map","title":"ResizeArray.map","content":"ResizeArray.map \nmap \nBuilds a new ResizeArray whose elements are the results of applying the given function\n to each of the elements of the ResizeArray."},{"uri":"/FSharpPlusreference/fsharpplus-resizearray.html#apply","title":"ResizeArray.apply","content":"ResizeArray.apply \napply \nApplies a ResizeArray of functions to a ResizeArray of values and concatenates them."},{"uri":"/FSharpPlusreference/fsharpplus-resizearray.html#lift2","title":"ResizeArray.lift2","content":"ResizeArray.lift2 \nlift2 \n\n Combines all values from the first ResizeArray with the second, using the supplied mapping function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-resizearray.html#intercalate","title":"ResizeArray.intercalate","content":"ResizeArray.intercalate \nintercalate \n\n Concatenates all elements, using the specified separator between each element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-resizearray.html#intersperse","title":"ResizeArray.intersperse","content":"ResizeArray.intersperse \nintersperse \n\n Inserts a separator element between each element in the source ResizeArray.\n"},{"uri":"/FSharpPlusreference/fsharpplus-resizearray.html#split","title":"ResizeArray.split","content":"ResizeArray.split \nsplit \n\n Creates a sequence of arrays by splitting the source array on any of the given separators.\n"},{"uri":"/FSharpPlusreference/fsharpplus-resizearray.html#replace","title":"ResizeArray.replace","content":"ResizeArray.replace \nreplace \n\n Replaces a subsequence of the source array with the given replacement array.\n"},{"uri":"/FSharpPlusreference/fsharpplus-resizearray.html#findSliceIndex","title":"ResizeArray.findSliceIndex","content":"ResizeArray.findSliceIndex \nfindSliceIndex \n\n Returns the index of the first occurrence of the specified slice in the source.\n "},{"uri":"/FSharpPlusreference/fsharpplus-resizearray.html#tryFindSliceIndex","title":"ResizeArray.tryFindSliceIndex","content":"ResizeArray.tryFindSliceIndex \ntryFindSliceIndex \n\n Returns the index of the first occurrence of the specified slice in the source.\n Returns <code>None</code> if not found.\n "},{"uri":"/FSharpPlusreference/fsharpplus-resizearray.html#partitionMap","title":"ResizeArray.partitionMap","content":"ResizeArray.partitionMap \npartitionMap \n\n Creates two arrays by applying the mapper function to each element in the array\n and classifying the transformed values depending on whether they were wrapped with Choice1Of2 or Choice2Of2.\n "},{"uri":"/FSharpPlusreference/fsharpplus-result.html","title":"Result","content":"Result \n\n Additional operations on Result<'T,'Error>\n \nResult.result \nresult \nResult.throw \nthrow \nResult.apply \napply \nResult.map2 \nmap2 \nResult.flatten \nflatten \nResult.catch \ncatch \nResult.bindError \nbindError \nResult.either \neither \nResult.protect \nprotect \nResult.get \nget \nResult.defaultValue \ndefaultValue \nResult.defaultWith \ndefaultWith \nResult.toChoice \ntoChoice \nResult.ofChoice \nofChoice \nResult.partition \npartition"},{"uri":"/FSharpPlusreference/fsharpplus-result.html#result","title":"Result.result","content":"Result.result \nresult \n\n Creates an Ok with the supplied value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-result.html#throw","title":"Result.throw","content":"Result.throw \nthrow \n\n Creates an Error With the supplied value.\n"},{"uri":"/FSharpPlusreference/fsharpplus-result.html#apply","title":"Result.apply","content":"Result.apply \napply \n\n Applies the wrapped value to the wrapped function when both are Ok and returns a wrapped result or the first Error.\n <param name=\"f\">The function wrapped in an Ok or an Error.</param>\n <param name=\"x\">The value wrapped in an Ok or an Error.</param>\n <returns>An Ok of the function applied to the value, or the first <c>Error</c> if either the function or the value is <c>Error</c>.</returns>\n"},{"uri":"/FSharpPlusreference/fsharpplus-result.html#map2","title":"Result.map2","content":"Result.map2 \nmap2 \nCreates a Result value from a pair of Result values, using a function to combine them."},{"uri":"/FSharpPlusreference/fsharpplus-result.html#flatten","title":"Result.flatten","content":"Result.flatten \nflatten \nFlattens two nested Results. \n<code>flatten</code> is equivalent to <code>bind id</code>."},{"uri":"/FSharpPlusreference/fsharpplus-result.html#catch","title":"Result.catch","content":"Result.catch \ncatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-result.html#bindError","title":"Result.bindError","content":"Result.bindError \nbindError \nIf the input value is an Ok leaves it unchanged, otherwise maps the Error value and flattens the resulting nested Result."},{"uri":"/FSharpPlusreference/fsharpplus-result.html#either","title":"Result.either","content":"Result.either \neither \nExtracts a value from either side of a Result."},{"uri":"/FSharpPlusreference/fsharpplus-result.html#protect","title":"Result.protect","content":"Result.protect \nprotect \n\n Creates a safe version of the supplied function, which returns a Result<'U,exn> instead of throwing exceptions.\n"},{"uri":"/FSharpPlusreference/fsharpplus-result.html#get","title":"Result.get","content":"Result.get \nget \n\n Gets the 'Ok' value. If it's an 'Error' this function will throw an exception.\n"},{"uri":"/FSharpPlusreference/fsharpplus-result.html#defaultValue","title":"Result.defaultValue","content":"Result.defaultValue \ndefaultValue \n\n Extracts the Ok value or use the supplied default value when it's an Error.\n"},{"uri":"/FSharpPlusreference/fsharpplus-result.html#defaultWith","title":"Result.defaultWith","content":"Result.defaultWith \ndefaultWith \n\n Extracts the Ok value or applies the compensation function over the Error.\n"},{"uri":"/FSharpPlusreference/fsharpplus-result.html#toChoice","title":"Result.toChoice","content":"Result.toChoice \ntoChoice \n\n Converts a Result<'T,'Error> to a Choice<'T,'Error>.\n"},{"uri":"/FSharpPlusreference/fsharpplus-result.html#ofChoice","title":"Result.ofChoice","content":"Result.ofChoice \nofChoice \n\n Creates a Result<'T,'Error> from a Choice<'T,'Error>.\n"},{"uri":"/FSharpPlusreference/fsharpplus-result.html#partition","title":"Result.partition","content":"Result.partition \npartition \n\n Creates two lists by classifying the values depending on whether they were wrapped with Ok or Error.\n "},{"uri":"/FSharpPlusreference/fsharpplus-seq.html","title":"Seq","content":"Seq \n\n Additional operations on Seq\n \nSeq.bind \nbind \nSeq.apply \napply \nSeq.lift2 \nlift2 \nSeq.foldBack \nfoldBack \nSeq.chunkBy \nchunkBy \nSeq.intersperse \nintersperse \nSeq.intercalate \nintercalate \nSeq.split \nsplit \nSeq.replace \nreplace \nSeq.drop \ndrop \nSeq.replicate \nreplicate \nSeq.toIReadOnlyList \ntoIReadOnlyList \nSeq.findSliceIndex \nfindSliceIndex \nSeq.tryFindSliceIndex \ntryFindSliceIndex"},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#bind","title":"Seq.bind","content":"Seq.bind \nbind \nApplies the given function to each element of the sequence and concatenates the results. \nRemember sequence is lazy, effects are delayed until it is enumerated.This is the same as Seq.collect but the type of the mapping function is not flexible."},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#apply","title":"Seq.apply","content":"Seq.apply \napply \nApplies a sequence of functions to a sequence of values and concatenates them."},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#lift2","title":"Seq.lift2","content":"Seq.lift2 \nlift2 \n\n Combines all values from the first seq with the second, using the supplied mapping function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#foldBack","title":"Seq.foldBack","content":"Seq.foldBack \nfoldBack \n\n Applies a function to each element of the collection, starting from the end,\n threading an accumulator argument through the computation.\n  \n\n Note: this function has since been added to FSharpCore, so effectively\n overrides it. It will be removed in next major release of FSharpPlus.\n "},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#chunkBy","title":"Seq.chunkBy","content":"Seq.chunkBy \nchunkBy \n\n Chunks the seq up into groups with the same projected key by applying\n the key-generating projection function to each element and yielding a sequence of \n keys tupled with values.\n  \n\n Each key is tupled with an array of all adjacent elements that match \n to the key, therefore keys are not unique but can't be adjacent\n as each time the key changes a new group is yield.\n \n The ordering of the original sequence is respected.\n "},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#intersperse","title":"Seq.intersperse","content":"Seq.intersperse \nintersperse \n\n Inserts a separator element between each element in the source seq.\nhttp://codebetter.com/matthewpodwysocki/2009/05/06/functionally-implementing-intersperse/\n"},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#intercalate","title":"Seq.intercalate","content":"Seq.intercalate \nintercalate \n\n Inserts a separator between each element in the source sequence.\n"},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#split","title":"Seq.split","content":"Seq.split \nsplit \n\n Creates a sequence of sequences by splitting the source sequence on any of the given separators.\n"},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#replace","title":"Seq.replace","content":"Seq.replace \nreplace \n\n Replaces a subsequence of the source seq with the given replacement seq.\n"},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#drop","title":"Seq.drop","content":"Seq.drop \ndrop \nReturns a sequence that drops N elements of the original sequence and then yields the\n remaining elements of the sequence. \nWhen count exceeds the number of elements in the sequence it\n returns an empty sequence instead of throwing an exception."},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#replicate","title":"Seq.replicate","content":"Seq.replicate \nreplicate \n\n Creates a sequence by replicating the given initial value count times.\n  \n\n Note: this function has since been added to FSharpCore, so effectively\n overrides it. It will be removed in next major release of FSharpPlus.\n "},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#toIReadOnlyList","title":"Seq.toIReadOnlyList","content":"Seq.toIReadOnlyList \ntoIReadOnlyList \nConverts a seq to an IReadOnlyList (from System.Collections.Generic)."},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#findSliceIndex","title":"Seq.findSliceIndex","content":"Seq.findSliceIndex \nfindSliceIndex \n\n Gets the index of the first occurrence of the specified slice in the source.\n  \n\n It is assumed that 1) the slice is finite and 2) either the source is finite or actually contains the slice, otherwise it will not return forever.\n The slice will always be iterated to the end.\n The source will be iterated until the slice is found or it reaches the end.\n "},{"uri":"/FSharpPlusreference/fsharpplus-seq.html#tryFindSliceIndex","title":"Seq.tryFindSliceIndex","content":"Seq.tryFindSliceIndex \ntryFindSliceIndex \n\n Gets the index of the first occurrence of the specified slice in the source.\n Returns <code>None</code> if not found.\n  \n\n It is assumed that 1) the slice is finite and 2) either the source is finite or actually contains the slice, otherwise it will not return forever.\n The slice will always be iterated to the end.\n The source will be iterated until the slice is found or it reaches the end.\n "},{"uri":"/FSharpPlusreference/fsharpplus-string.html","title":"String","content":"String \n\n Additional operations on String\n \nString.intercalate \nintercalate \nString.intersperse \nintersperse \nString.split \nsplit \nString.replace \nreplace \nString.isSubString \nisSubString \nString.startsWith \nstartsWith \nString.endsWith \nendsWith \nString.contains \ncontains \nString.toUpper \ntoUpper \nString.toLower \ntoLower \nString.trimWhiteSpaces \ntrimWhiteSpaces \nString.normalize \nnormalize \nString.removeDiacritics \nremoveDiacritics \nString.padLeft \npadLeft \nString.padLeftWith \npadLeftWith \nString.padRight \npadRight \nString.padRightWith \npadRightWith \nString.trim \ntrim \nString.trimStart \ntrimStart \nString.trimEnd \ntrimEnd \nString.toArray \ntoArray \nString.ofArray \nofArray \nString.toList \ntoList \nString.ofList \nofList \nString.toSeq \ntoSeq \nString.ofSeq \nofSeq \nString.item \nitem \nString.tryItem \ntryItem \nString.rev \nrev \nString.take \ntake \nString.skip \nskip \nString.takeWhile \ntakeWhile \nString.skipWhile \nskipWhile \nString.truncate \ntruncate \nString.drop \ndrop \nString.findIndex \nfindIndex \nString.tryFindIndex \ntryFindIndex \nString.findSliceIndex \nfindSliceIndex \nString.tryFindSliceIndex \ntryFindSliceIndex \nString.toCodePoints \ntoCodePoints \nString.ofCodePoints \nofCodePoints \nString.getBytes \ngetBytes"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#intercalate","title":"String.intercalate","content":"String.intercalate \nintercalate \n\n Concatenates all elements, using the specified separator between each element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#intersperse","title":"String.intersperse","content":"String.intersperse \nintersperse \n\n Inserts a separator char between each char in the source string.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#split","title":"String.split","content":"String.split \nsplit \n\n Creates a sequence of strings by splitting the source string on any of the given separators.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#replace","title":"String.replace","content":"String.replace \nreplace \n\n Replaces a substring with the given replacement string.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#isSubString","title":"String.isSubString","content":"String.isSubString \nisSubString \n\n Does the source string contain the given subString? -- function wrapper for String.Contains method.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#startsWith","title":"String.startsWith","content":"String.startsWith \nstartsWith \n\n Does the source string start with the given subString? -- function wrapper for String.StartsWith method using InvariantCulture.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#endsWith","title":"String.endsWith","content":"String.endsWith \nendsWith \n\n Does the source string end with the given subString? -- function wrapper for String.EndsWith method using InvariantCulture.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#contains","title":"String.contains","content":"String.contains \ncontains \n\n Does the source string contain the given character?\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#toUpper","title":"String.toUpper","content":"String.toUpper \ntoUpper \n\n Converts to uppercase -- nullsafe function wrapper for String.ToUpperInvariant method.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#toLower","title":"String.toLower","content":"String.toLower \ntoLower \n\n Converts to lowercase -- nullsafe function wrapper for String.ToLowerInvariant method.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#trimWhiteSpaces","title":"String.trimWhiteSpaces","content":"String.trimWhiteSpaces \ntrimWhiteSpaces \n\n Trims white space -- function wrapper for String.Trim method.\n \n Note this is distinct from trim which trims the given characters,\n not whitespace.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#normalize","title":"String.normalize","content":"String.normalize \nnormalize \n\n Returns a new string whose textual value is the same as this string, but whose binary representation is in the specified Unicode normalization form.\n \n This is a null safe function wrapper of the String.Normalize method.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#removeDiacritics","title":"String.removeDiacritics","content":"String.removeDiacritics \nremoveDiacritics \n\n Removes diacritics (accents) from the given source string.\n \n The approach uses `normalize` to split the input string into constituent glyphs\n (basically separating the \"base\" characters from the diacritics) and then scans\n the result and retains only the base characters. \n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#padLeft","title":"String.padLeft","content":"String.padLeft \npadLeft \n\n Pads the beginning of the given string with spaces so that it has a specified total length.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#padLeftWith","title":"String.padLeftWith","content":"String.padLeftWith \npadLeftWith \n\n Pads the beginning of the given string with a specified character so that it has a specified total length.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#padRight","title":"String.padRight","content":"String.padRight \npadRight \n\n Pads the end of the given string with spaces so that it has a specified total length.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#padRightWith","title":"String.padRightWith","content":"String.padRightWith \npadRightWith \n\n Pads the end of the given string with a specified character so that it has a specified total length.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#trim","title":"String.trim","content":"String.trim \ntrim \n\n Removes all leading and trailing occurrences of specified characters from the given string.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#trimStart","title":"String.trimStart","content":"String.trimStart \ntrimStart \n\n Removes all leading occurrences of specified characters from the given string.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#trimEnd","title":"String.trimEnd","content":"String.trimEnd \ntrimEnd \n\n Removes all trailing occurrences of specified characters from the given string.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#toArray","title":"String.toArray","content":"String.toArray \ntoArray \n\n Converts the given string to an array of chars.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#ofArray","title":"String.ofArray","content":"String.ofArray \nofArray \n\n Converts an array of chars to a String.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#toList","title":"String.toList","content":"String.toList \ntoList \n\n Converts the given string to a list of chars.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#ofList","title":"String.ofList","content":"String.ofList \nofList \n\n Converts a list of chars to a String.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#toSeq","title":"String.toSeq","content":"String.toSeq \ntoSeq \n\n Converts the given string to a seq of chars.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#ofSeq","title":"String.ofSeq","content":"String.ofSeq \nofSeq \n\n Converts a seq of chars to a String.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#item","title":"String.item","content":"String.item \nitem \n\n (Unsafely) Returns the char at the given index in the source string.\n \n This is a function wrapper for `source.[index]` method.\n \n Note: this is not exception safe, and will throw System.IndexOutOfRangeException when\n the given index is out of bounds.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#tryItem","title":"String.tryItem","content":"String.tryItem \ntryItem \n\n Returns the char (as an Option) at the given index in the source string,\n returning `None` if out of bounds.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#rev","title":"String.rev","content":"String.rev \nrev \n\n Reverses the given string.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#take","title":"String.take","content":"String.take \ntake \n\n (Unsafely) Takes the first count chars in the string.\n Use `String.truncate` for a safe version.\n \n Note: will throw System.ArgumentOutOfRangeException if you try to take more than the\n number of chars in the string.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#skip","title":"String.skip","content":"String.skip \nskip \n\n (Unsafely) Skips over the first count chars in the string.\n Use `String.drop` for a safe version.\n \n Note: will throw System.ArgumentOutOfRangeException if you try to skip more than the\n number of chars in the string.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#takeWhile","title":"String.takeWhile","content":"String.takeWhile \ntakeWhile \n\n Takes chars from the source string while the given predicate is true.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#skipWhile","title":"String.skipWhile","content":"String.skipWhile \nskipWhile \n\n Skips over chars from the source string while the given predicate is true.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#truncate","title":"String.truncate","content":"String.truncate \ntruncate \n\n Returns a string that has at most N characters from the beginning of the original string.\n It returns the original string if it is shorter than count.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#drop","title":"String.drop","content":"String.drop \ndrop \n\n Returns a string that drops first N characters of the original string.\n When count exceeds the length of the string it returns an empty string.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#findIndex","title":"String.findIndex","content":"String.findIndex \nfindIndex \n\n Finds the first index of the char in the substring which satisfies the given predicate.\n \n Note: throws an ArgumentException when not found.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#tryFindIndex","title":"String.tryFindIndex","content":"String.tryFindIndex \ntryFindIndex \n\n Tries to find the first index of the char in the substring which satisfies the given predicate.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#findSliceIndex","title":"String.findSliceIndex","content":"String.findSliceIndex \nfindSliceIndex \n\n Returns the index of the first occurrence of the specified slice in the source.\n "},{"uri":"/FSharpPlusreference/fsharpplus-string.html#tryFindSliceIndex","title":"String.tryFindSliceIndex","content":"String.tryFindSliceIndex \ntryFindSliceIndex \n\n Returns the index of the first occurrence of the specified slice in the source.\n Returns <code>None</code> if not found.\n "},{"uri":"/FSharpPlusreference/fsharpplus-string.html#toCodePoints","title":"String.toCodePoints","content":"String.toCodePoints \ntoCodePoints \n\n Converts the given string to an array of Int32 code-points (the actual Unicode Code Point number).\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#ofCodePoints","title":"String.ofCodePoints","content":"String.ofCodePoints \nofCodePoints \n\n Converts the array of Int32 code-points (the actual Unicode Code Point number) to a string.\n"},{"uri":"/FSharpPlusreference/fsharpplus-string.html#getBytes","title":"String.getBytes","content":"String.getBytes \ngetBytes \n\n Converts a string to a byte-array using the specified encoding.\n"},{"uri":"/FSharpPlusreference/fsharpplus-task.html","title":"Task","content":"Task \n\n Additional operations on Task<'T>\n \nTask.map \nmap \nTask.map2 \nmap2 \nTask.apply \napply \nTask.zip \nzip \nTask.join \njoin"},{"uri":"/FSharpPlusreference/fsharpplus-task.html#map","title":"Task.map","content":"Task.map \nmap \nCreates a task workflow from another workflow 'x', mapping its result with 'f'."},{"uri":"/FSharpPlusreference/fsharpplus-task.html#map2","title":"Task.map2","content":"Task.map2 \nmap2 \nCreates a task workflow from two workflows 'x' and 'y', mapping its results with 'f'. \nWorkflows are run in sequence."},{"uri":"/FSharpPlusreference/fsharpplus-task.html#apply","title":"Task.apply","content":"Task.apply \napply \nCreates a task workflow that is the result of applying the resulting function of a task workflow\n to the resulting value of another task workflow"},{"uri":"/FSharpPlusreference/fsharpplus-task.html#zip","title":"Task.zip","content":"Task.zip \nzip \nCreates a task workflow from two workflows 'x' and 'y', tupling its results."},{"uri":"/FSharpPlusreference/fsharpplus-task.html#join","title":"Task.join","content":"Task.join \njoin \n\n Flattens two nested tasks into one.\n"},{"uri":"/FSharpPlusreference/fsharpplus-tuple2.html","title":"Tuple2","content":"Tuple2 \n\n Additional operations on Tuple (,)\n \nTuple2.mapItem1 \nmapItem1 \nTuple2.mapItem2 \nmapItem2"},{"uri":"/FSharpPlusreference/fsharpplus-tuple2.html#mapItem1","title":"Tuple2.mapItem1","content":"Tuple2.mapItem1 \nmapItem1 \n"},{"uri":"/FSharpPlusreference/fsharpplus-tuple2.html#mapItem2","title":"Tuple2.mapItem2","content":"Tuple2.mapItem2 \nmapItem2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-tuple3.html","title":"Tuple3","content":"Tuple3 \n\n Additional operations on Tuple (,,)\n \nTuple3.mapItem1 \nmapItem1 \nTuple3.mapItem2 \nmapItem2 \nTuple3.mapItem3 \nmapItem3"},{"uri":"/FSharpPlusreference/fsharpplus-tuple3.html#mapItem1","title":"Tuple3.mapItem1","content":"Tuple3.mapItem1 \nmapItem1 \n"},{"uri":"/FSharpPlusreference/fsharpplus-tuple3.html#mapItem2","title":"Tuple3.mapItem2","content":"Tuple3.mapItem2 \nmapItem2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-tuple3.html#mapItem3","title":"Tuple3.mapItem3","content":"Tuple3.mapItem3 \nmapItem3 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryblock.html","title":"TryBlock","content":"TryBlock \n \nTryBlock.False \nFalse \nTryBlock.True \nTrue \nTryBlock.While \nWhile \nTryBlock.MessageTryWith \nMessageTryWith \nTryBlock.CodeTryWith \nCodeTryWith \nTryBlock.MessageTryFinally \nMessageTryFinally \nTryBlock.CodeTryFinally \nCodeTryFinally \nTryBlock.MessageWhile \nMessageWhile \nTryBlock.CodeWhile \nCodeWhile"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryblock.html#MessageTryWith","title":"TryBlock.MessageTryWith","content":"TryBlock.MessageTryWith \nMessageTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryblock.html#CodeTryWith","title":"TryBlock.CodeTryWith","content":"TryBlock.CodeTryWith \nCodeTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryblock.html#MessageTryFinally","title":"TryBlock.MessageTryFinally","content":"TryBlock.MessageTryFinally \nMessageTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryblock.html#CodeTryFinally","title":"TryBlock.CodeTryFinally","content":"TryBlock.CodeTryFinally \nCodeTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryblock.html#MessageWhile","title":"TryBlock.MessageWhile","content":"TryBlock.MessageWhile \nMessageWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryblock.html#CodeWhile","title":"TryBlock.CodeWhile","content":"TryBlock.CodeWhile \nCodeWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryblock-false.html","title":"False","content":"False \n \nFalse.False \nFalse"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryblock-false.html#False","title":"False.False","content":"False.False \nFalse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryblock-true.html","title":"True","content":"True \n \nTrue.True \nTrue"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryblock-true.html#True","title":"True.True","content":"True.True \nTrue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryblock-while.html","title":"While","content":"While \n \nWhile.While \nWhile"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryblock-while.html#While","title":"While.While","content":"While.While \nWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-abs.html","title":"Abs","content":"Abs \n \nAbs.Abs \nAbs \nAbs.Abs \nAbs \nAbs.Abs \nAbs \nAbs.Abs \nAbs \nAbs.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-abs.html#Abs","title":"Abs.Abs","content":"Abs.Abs \nAbs \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-abs.html#Abs","title":"Abs.Abs","content":"Abs.Abs \nAbs \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-abs.html#Abs","title":"Abs.Abs","content":"Abs.Abs \nAbs \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-abs.html#Abs","title":"Abs.Abs","content":"Abs.Abs \nAbs \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-abs.html#Invoke","title":"Abs.Invoke","content":"Abs.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-abs'.html","title":"Abs'","content":"Abs' \n \nAbs'.Abs \nAbs \nAbs'.Abs \nAbs \nAbs'.Abs \nAbs \nAbs'.Abs \nAbs \nAbs'.Abs \nAbs \nAbs'.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-abs'.html#Abs","title":"Abs'.Abs","content":"Abs'.Abs \nAbs \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-abs'.html#Abs","title":"Abs'.Abs","content":"Abs'.Abs \nAbs \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-abs'.html#Abs","title":"Abs'.Abs","content":"Abs'.Abs \nAbs \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-abs'.html#Abs","title":"Abs'.Abs","content":"Abs'.Abs \nAbs \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-abs'.html#Abs","title":"Abs'.Abs","content":"Abs'.Abs \nAbs \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-abs'.html#Invoke","title":"Abs'.Invoke","content":"Abs'.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acleft.html","title":"AcLeft","content":"AcLeft \n \nAcLeft.Invoke \nInvoke \nAcLeft.InvokeOnInstance \nInvokeOnInstance \nAcLeft.Left \nLeft \nAcLeft.Left \nLeft \nAcLeft.Left \nLeft \nAcLeft.Left \nLeft"},{"uri":"/FSharpPlusreference/fsharpplus-control-acleft.html#Invoke","title":"AcLeft.Invoke","content":"AcLeft.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acleft.html#InvokeOnInstance","title":"AcLeft.InvokeOnInstance","content":"AcLeft.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acleft.html#Left","title":"AcLeft.Left","content":"AcLeft.Left \nLeft \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acleft.html#Left","title":"AcLeft.Left","content":"AcLeft.Left \nLeft \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acleft.html#Left","title":"AcLeft.Left","content":"AcLeft.Left \nLeft \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acleft.html#Left","title":"AcLeft.Left","content":"AcLeft.Left \nLeft \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acmerge.html","title":"AcMerge","content":"AcMerge \n \nAcMerge.( +++ ) \n( +++ ) \nAcMerge.( +++ ) \n( +++ ) \nAcMerge.( +++ ) \n( +++ ) \nAcMerge.( +++ ) \n( +++ ) \nAcMerge.Invoke \nInvoke \nAcMerge.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-acmerge.html#( +++ )","title":"AcMerge.( +++ )","content":"AcMerge.( +++ ) \n( +++ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acmerge.html#( +++ )","title":"AcMerge.( +++ )","content":"AcMerge.( +++ ) \n( +++ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acmerge.html#( +++ )","title":"AcMerge.( +++ )","content":"AcMerge.( +++ ) \n( +++ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acmerge.html#( +++ )","title":"AcMerge.( +++ )","content":"AcMerge.( +++ ) \n( +++ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acmerge.html#Invoke","title":"AcMerge.Invoke","content":"AcMerge.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acmerge.html#InvokeOnInstance","title":"AcMerge.InvokeOnInstance","content":"AcMerge.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acright.html","title":"AcRight","content":"AcRight \n \nAcRight.Invoke \nInvoke \nAcRight.InvokeOnInstance \nInvokeOnInstance \nAcRight.Right \nRight \nAcRight.Right \nRight \nAcRight.Right \nRight \nAcRight.Right \nRight"},{"uri":"/FSharpPlusreference/fsharpplus-control-acright.html#Invoke","title":"AcRight.Invoke","content":"AcRight.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acright.html#InvokeOnInstance","title":"AcRight.InvokeOnInstance","content":"AcRight.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acright.html#Right","title":"AcRight.Right","content":"AcRight.Right \nRight \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acright.html#Right","title":"AcRight.Right","content":"AcRight.Right \nRight \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acright.html#Right","title":"AcRight.Right","content":"AcRight.Right \nRight \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-acright.html#Right","title":"AcRight.Right","content":"AcRight.Right \nRight \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-app.html","title":"App","content":"App \n \nApp.App \nApp \nApp.App \nApp \nApp.App \nApp \nApp.App \nApp \nApp.Invoke \nInvoke \nApp.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-app.html#App","title":"App.App","content":"App.App \nApp \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-app.html#App","title":"App.App","content":"App.App \nApp \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-app.html#App","title":"App.App","content":"App.App \nApp \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-app.html#App","title":"App.App","content":"App.App \nApp \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-app.html#Invoke","title":"App.Invoke","content":"App.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-app.html#InvokeOnInstance","title":"App.InvokeOnInstance","content":"App.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-append.html","title":"Append","content":"Append \n \nAppend.( <|> ) \n( <|> ) \nAppend.( <|> ) \n( <|> ) \nAppend.( <|> ) \n( <|> ) \nAppend.( <|> ) \n( <|> ) \nAppend.( <|> ) \n( <|> ) \nAppend.( <|> ) \n( <|> ) \nAppend.( <|> ) \n( <|> ) \nAppend.( <|> ) \n( <|> ) \nAppend.( <|> ) \n( <|> ) \nAppend.( <|> ) \n( <|> ) \nAppend.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-append.html#( <|> )","title":"Append.( <|> )","content":"Append.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-append.html#( <|> )","title":"Append.( <|> )","content":"Append.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-append.html#( <|> )","title":"Append.( <|> )","content":"Append.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-append.html#( <|> )","title":"Append.( <|> )","content":"Append.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-append.html#( <|> )","title":"Append.( <|> )","content":"Append.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-append.html#( <|> )","title":"Append.( <|> )","content":"Append.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-append.html#( <|> )","title":"Append.( <|> )","content":"Append.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-append.html#( <|> )","title":"Append.( <|> )","content":"Append.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-append.html#( <|> )","title":"Append.( <|> )","content":"Append.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-append.html#( <|> )","title":"Append.( <|> )","content":"Append.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-append.html#Invoke","title":"Append.Invoke","content":"Append.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html","title":"Apply","content":"Apply \n \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.( <*> ) \n( <*> ) \nApply.Invoke \nInvoke \nApply.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#( <*> )","title":"Apply.( <*> )","content":"Apply.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#Invoke","title":"Apply.Invoke","content":"Apply.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-apply.html#InvokeOnInstance","title":"Apply.InvokeOnInstance","content":"Apply.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arr.html","title":"Arr","content":"Arr \n \nArr.Arr \nArr \nArr.Arr \nArr \nArr.Arr \nArr \nArr.Arr \nArr \nArr.Invoke \nInvoke \nArr.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-arr.html#Arr","title":"Arr.Arr","content":"Arr.Arr \nArr \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arr.html#Arr","title":"Arr.Arr","content":"Arr.Arr \nArr \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arr.html#Arr","title":"Arr.Arr","content":"Arr.Arr \nArr \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arr.html#Arr","title":"Arr.Arr","content":"Arr.Arr \nArr \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arr.html#Invoke","title":"Arr.Invoke","content":"Arr.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arr.html#InvokeOnInstance","title":"Arr.InvokeOnInstance","content":"Arr.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrcombine.html","title":"ArrCombine","content":"ArrCombine \n \nArrCombine.( *** ) \n( *** ) \nArrCombine.( *** ) \n( *** ) \nArrCombine.( *** ) \n( *** ) \nArrCombine.( *** ) \n( *** ) \nArrCombine.( *** ) \n( *** ) \nArrCombine.Invoke \nInvoke \nArrCombine.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrcombine.html#( *** )","title":"ArrCombine.( *** )","content":"ArrCombine.( *** ) \n( *** ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrcombine.html#( *** )","title":"ArrCombine.( *** )","content":"ArrCombine.( *** ) \n( *** ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrcombine.html#( *** )","title":"ArrCombine.( *** )","content":"ArrCombine.( *** ) \n( *** ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrcombine.html#( *** )","title":"ArrCombine.( *** )","content":"ArrCombine.( *** ) \n( *** ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrcombine.html#( *** )","title":"ArrCombine.( *** )","content":"ArrCombine.( *** ) \n( *** ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrcombine.html#Invoke","title":"ArrCombine.Invoke","content":"ArrCombine.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrcombine.html#InvokeOnInstance","title":"ArrCombine.InvokeOnInstance","content":"ArrCombine.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrfirst.html","title":"ArrFirst","content":"ArrFirst \n \nArrFirst.First \nFirst \nArrFirst.First \nFirst \nArrFirst.First \nFirst \nArrFirst.First \nFirst \nArrFirst.Invoke \nInvoke \nArrFirst.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrfirst.html#First","title":"ArrFirst.First","content":"ArrFirst.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrfirst.html#First","title":"ArrFirst.First","content":"ArrFirst.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrfirst.html#First","title":"ArrFirst.First","content":"ArrFirst.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrfirst.html#First","title":"ArrFirst.First","content":"ArrFirst.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrfirst.html#Invoke","title":"ArrFirst.Invoke","content":"ArrFirst.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrfirst.html#InvokeOnInstance","title":"ArrFirst.InvokeOnInstance","content":"ArrFirst.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrsecond.html","title":"ArrSecond","content":"ArrSecond \n \nArrSecond.Invoke \nInvoke \nArrSecond.InvokeOnInstance \nInvokeOnInstance \nArrSecond.Second \nSecond \nArrSecond.Second \nSecond \nArrSecond.Second \nSecond \nArrSecond.Second \nSecond \nArrSecond.Second \nSecond"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrsecond.html#Invoke","title":"ArrSecond.Invoke","content":"ArrSecond.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrsecond.html#InvokeOnInstance","title":"ArrSecond.InvokeOnInstance","content":"ArrSecond.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrsecond.html#Second","title":"ArrSecond.Second","content":"ArrSecond.Second \nSecond \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrsecond.html#Second","title":"ArrSecond.Second","content":"ArrSecond.Second \nSecond \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrsecond.html#Second","title":"ArrSecond.Second","content":"ArrSecond.Second \nSecond \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrsecond.html#Second","title":"ArrSecond.Second","content":"ArrSecond.Second \nSecond \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arrsecond.html#Second","title":"ArrSecond.Second","content":"ArrSecond.Second \nSecond \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arraytotuple.html","title":"ArrayToTuple","content":"ArrayToTuple \n \nArrayToTuple.ArrayToTuple \nArrayToTuple \nArrayToTuple.ArrayToTuple \nArrayToTuple \nArrayToTuple.ArrayToTuple \nArrayToTuple \nArrayToTuple.ArrayToTuple \nArrayToTuple \nArrayToTuple.ArrayToTuple \nArrayToTuple \nArrayToTuple.ArrayToTuple \nArrayToTuple \nArrayToTuple.ArrayToTuple \nArrayToTuple \nArrayToTuple.ArrayToTuple \nArrayToTuple \nArrayToTuple.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-arraytotuple.html#ArrayToTuple","title":"ArrayToTuple.ArrayToTuple","content":"ArrayToTuple.ArrayToTuple \nArrayToTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arraytotuple.html#ArrayToTuple","title":"ArrayToTuple.ArrayToTuple","content":"ArrayToTuple.ArrayToTuple \nArrayToTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arraytotuple.html#ArrayToTuple","title":"ArrayToTuple.ArrayToTuple","content":"ArrayToTuple.ArrayToTuple \nArrayToTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arraytotuple.html#ArrayToTuple","title":"ArrayToTuple.ArrayToTuple","content":"ArrayToTuple.ArrayToTuple \nArrayToTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arraytotuple.html#ArrayToTuple","title":"ArrayToTuple.ArrayToTuple","content":"ArrayToTuple.ArrayToTuple \nArrayToTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arraytotuple.html#ArrayToTuple","title":"ArrayToTuple.ArrayToTuple","content":"ArrayToTuple.ArrayToTuple \nArrayToTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arraytotuple.html#ArrayToTuple","title":"ArrayToTuple.ArrayToTuple","content":"ArrayToTuple.ArrayToTuple \nArrayToTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arraytotuple.html#ArrayToTuple","title":"ArrayToTuple.ArrayToTuple","content":"ArrayToTuple.ArrayToTuple \nArrayToTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-arraytotuple.html#Invoke","title":"ArrayToTuple.Invoke","content":"ArrayToTuple.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ask.html","title":"Ask","content":"Ask \n \nAsk.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-ask.html#Invoke","title":"Ask.Invoke","content":"Ask.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-asserttupletype.html","title":"AssertTupleType","content":"AssertTupleType \n \nAssertTupleType.AssertTupleType \nAssertTupleType \nAssertTupleType.AssertTupleType \nAssertTupleType \nAssertTupleType.AssertTupleType \nAssertTupleType \nAssertTupleType.AssertTupleType \nAssertTupleType \nAssertTupleType.AssertTupleType \nAssertTupleType \nAssertTupleType.AssertTupleType \nAssertTupleType \nAssertTupleType.AssertTupleType \nAssertTupleType \nAssertTupleType.AssertTupleType \nAssertTupleType \nAssertTupleType.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-asserttupletype.html#AssertTupleType","title":"AssertTupleType.AssertTupleType","content":"AssertTupleType.AssertTupleType \nAssertTupleType \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-asserttupletype.html#AssertTupleType","title":"AssertTupleType.AssertTupleType","content":"AssertTupleType.AssertTupleType \nAssertTupleType \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-asserttupletype.html#AssertTupleType","title":"AssertTupleType.AssertTupleType","content":"AssertTupleType.AssertTupleType \nAssertTupleType \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-asserttupletype.html#AssertTupleType","title":"AssertTupleType.AssertTupleType","content":"AssertTupleType.AssertTupleType \nAssertTupleType \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-asserttupletype.html#AssertTupleType","title":"AssertTupleType.AssertTupleType","content":"AssertTupleType.AssertTupleType \nAssertTupleType \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-asserttupletype.html#AssertTupleType","title":"AssertTupleType.AssertTupleType","content":"AssertTupleType.AssertTupleType \nAssertTupleType \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-asserttupletype.html#AssertTupleType","title":"AssertTupleType.AssertTupleType","content":"AssertTupleType.AssertTupleType \nAssertTupleType \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-asserttupletype.html#AssertTupleType","title":"AssertTupleType.AssertTupleType","content":"AssertTupleType.AssertTupleType \nAssertTupleType \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-asserttupletype.html#Invoke","title":"AssertTupleType.Invoke","content":"AssertTupleType.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifold.html","title":"Bifold","content":"Bifold \n \nBifold.Bifold \nBifold \nBifold.Bifold \nBifold \nBifold.Bifold \nBifold \nBifold.Bifold \nBifold \nBifold.Bifold \nBifold \nBifold.Invoke \nInvoke \nBifold.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifold.html#Bifold","title":"Bifold.Bifold","content":"Bifold.Bifold \nBifold \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifold.html#Bifold","title":"Bifold.Bifold","content":"Bifold.Bifold \nBifold \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifold.html#Bifold","title":"Bifold.Bifold","content":"Bifold.Bifold \nBifold \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifold.html#Bifold","title":"Bifold.Bifold","content":"Bifold.Bifold \nBifold \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifold.html#Bifold","title":"Bifold.Bifold","content":"Bifold.Bifold \nBifold \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifold.html#Invoke","title":"Bifold.Invoke","content":"Bifold.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifold.html#InvokeOnInstance","title":"Bifold.InvokeOnInstance","content":"Bifold.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldback.html","title":"BifoldBack","content":"BifoldBack \n \nBifoldBack.BifoldBack \nBifoldBack \nBifoldBack.BifoldBack \nBifoldBack \nBifoldBack.BifoldBack \nBifoldBack \nBifoldBack.BifoldBack \nBifoldBack \nBifoldBack.BifoldBack \nBifoldBack \nBifoldBack.Invoke \nInvoke \nBifoldBack.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldback.html#BifoldBack","title":"BifoldBack.BifoldBack","content":"BifoldBack.BifoldBack \nBifoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldback.html#BifoldBack","title":"BifoldBack.BifoldBack","content":"BifoldBack.BifoldBack \nBifoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldback.html#BifoldBack","title":"BifoldBack.BifoldBack","content":"BifoldBack.BifoldBack \nBifoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldback.html#BifoldBack","title":"BifoldBack.BifoldBack","content":"BifoldBack.BifoldBack \nBifoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldback.html#BifoldBack","title":"BifoldBack.BifoldBack","content":"BifoldBack.BifoldBack \nBifoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldback.html#Invoke","title":"BifoldBack.Invoke","content":"BifoldBack.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldback.html#InvokeOnInstance","title":"BifoldBack.InvokeOnInstance","content":"BifoldBack.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldmap.html","title":"BifoldMap","content":"BifoldMap \n \nBifoldMap.BifoldMap \nBifoldMap \nBifoldMap.BifoldMap \nBifoldMap \nBifoldMap.BifoldMap \nBifoldMap \nBifoldMap.BifoldMap \nBifoldMap \nBifoldMap.BifoldMap \nBifoldMap \nBifoldMap.Invoke \nInvoke \nBifoldMap.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldmap.html#BifoldMap","title":"BifoldMap.BifoldMap","content":"BifoldMap.BifoldMap \nBifoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldmap.html#BifoldMap","title":"BifoldMap.BifoldMap","content":"BifoldMap.BifoldMap \nBifoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldmap.html#BifoldMap","title":"BifoldMap.BifoldMap","content":"BifoldMap.BifoldMap \nBifoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldmap.html#BifoldMap","title":"BifoldMap.BifoldMap","content":"BifoldMap.BifoldMap \nBifoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldmap.html#BifoldMap","title":"BifoldMap.BifoldMap","content":"BifoldMap.BifoldMap \nBifoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldmap.html#Invoke","title":"BifoldMap.Invoke","content":"BifoldMap.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bifoldmap.html#InvokeOnInstance","title":"BifoldMap.InvokeOnInstance","content":"BifoldMap.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bimap.html","title":"Bimap","content":"Bimap \n \nBimap.Bimap \nBimap \nBimap.Bimap \nBimap \nBimap.Bimap \nBimap \nBimap.Bimap \nBimap \nBimap.Bimap \nBimap \nBimap.Bimap \nBimap \nBimap.Bimap \nBimap \nBimap.Invoke \nInvoke \nBimap.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-bimap.html#Bimap","title":"Bimap.Bimap","content":"Bimap.Bimap \nBimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bimap.html#Bimap","title":"Bimap.Bimap","content":"Bimap.Bimap \nBimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bimap.html#Bimap","title":"Bimap.Bimap","content":"Bimap.Bimap \nBimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bimap.html#Bimap","title":"Bimap.Bimap","content":"Bimap.Bimap \nBimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bimap.html#Bimap","title":"Bimap.Bimap","content":"Bimap.Bimap \nBimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bimap.html#Bimap","title":"Bimap.Bimap","content":"Bimap.Bimap \nBimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bimap.html#Bimap","title":"Bimap.Bimap","content":"Bimap.Bimap \nBimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bimap.html#Invoke","title":"Bimap.Invoke","content":"Bimap.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bimap.html#InvokeOnInstance","title":"Bimap.InvokeOnInstance","content":"Bimap.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html","title":"Bind","content":"Bind \n \nBind.Invoke \nInvoke \nBind.InvokeOnInstance \nInvokeOnInstance \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= ) \nBind.( >>= ) \n( >>= )"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#Invoke","title":"Bind.Invoke","content":"Bind.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#InvokeOnInstance","title":"Bind.InvokeOnInstance","content":"Bind.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bind.html#( >>= )","title":"Bind.( >>= )","content":"Bind.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisequence.html","title":"Bisequence","content":"Bisequence \n \nBisequence.Bisequence \nBisequence \nBisequence.Bisequence \nBisequence \nBisequence.Bisequence \nBisequence \nBisequence.Bisequence \nBisequence \nBisequence.Bisequence \nBisequence \nBisequence.Bisequence \nBisequence \nBisequence.Invoke \nInvoke \nBisequence.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisequence.html#Bisequence","title":"Bisequence.Bisequence","content":"Bisequence.Bisequence \nBisequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisequence.html#Bisequence","title":"Bisequence.Bisequence","content":"Bisequence.Bisequence \nBisequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisequence.html#Bisequence","title":"Bisequence.Bisequence","content":"Bisequence.Bisequence \nBisequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisequence.html#Bisequence","title":"Bisequence.Bisequence","content":"Bisequence.Bisequence \nBisequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisequence.html#Bisequence","title":"Bisequence.Bisequence","content":"Bisequence.Bisequence \nBisequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisequence.html#Bisequence","title":"Bisequence.Bisequence","content":"Bisequence.Bisequence \nBisequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisequence.html#Invoke","title":"Bisequence.Invoke","content":"Bisequence.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisequence.html#InvokeOnInstance","title":"Bisequence.InvokeOnInstance","content":"Bisequence.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisum.html","title":"Bisum","content":"Bisum \n \nBisum.Bisum \nBisum \nBisum.Bisum \nBisum \nBisum.Bisum \nBisum \nBisum.Bisum \nBisum \nBisum.Bisum \nBisum \nBisum.Bisum \nBisum \nBisum.Invoke \nInvoke \nBisum.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisum.html#Bisum","title":"Bisum.Bisum","content":"Bisum.Bisum \nBisum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisum.html#Bisum","title":"Bisum.Bisum","content":"Bisum.Bisum \nBisum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisum.html#Bisum","title":"Bisum.Bisum","content":"Bisum.Bisum \nBisum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisum.html#Bisum","title":"Bisum.Bisum","content":"Bisum.Bisum \nBisum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisum.html#Bisum","title":"Bisum.Bisum","content":"Bisum.Bisum \nBisum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisum.html#Bisum","title":"Bisum.Bisum","content":"Bisum.Bisum \nBisum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisum.html#Invoke","title":"Bisum.Invoke","content":"Bisum.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bisum.html#InvokeOnInstance","title":"Bisum.InvokeOnInstance","content":"Bisum.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bitraverse.html","title":"Bitraverse","content":"Bitraverse \n \nBitraverse.Bitraverse \nBitraverse \nBitraverse.Bitraverse \nBitraverse \nBitraverse.Bitraverse \nBitraverse \nBitraverse.Bitraverse \nBitraverse \nBitraverse.Bitraverse \nBitraverse \nBitraverse.Bitraverse \nBitraverse \nBitraverse.Invoke \nInvoke \nBitraverse.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-bitraverse.html#Bitraverse","title":"Bitraverse.Bitraverse","content":"Bitraverse.Bitraverse \nBitraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bitraverse.html#Bitraverse","title":"Bitraverse.Bitraverse","content":"Bitraverse.Bitraverse \nBitraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bitraverse.html#Bitraverse","title":"Bitraverse.Bitraverse","content":"Bitraverse.Bitraverse \nBitraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bitraverse.html#Bitraverse","title":"Bitraverse.Bitraverse","content":"Bitraverse.Bitraverse \nBitraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bitraverse.html#Bitraverse","title":"Bitraverse.Bitraverse","content":"Bitraverse.Bitraverse \nBitraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bitraverse.html#Bitraverse","title":"Bitraverse.Bitraverse","content":"Bitraverse.Bitraverse \nBitraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bitraverse.html#Invoke","title":"Bitraverse.Invoke","content":"Bitraverse.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-bitraverse.html#InvokeOnInstance","title":"Bitraverse.InvokeOnInstance","content":"Bitraverse.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-callcc.html","title":"CallCC","content":"CallCC \n \nCallCC.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-callcc.html#Invoke","title":"CallCC.Invoke","content":"CallCC.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-catch.html","title":"Catch","content":"Catch \n \nCatch.Catch \nCatch \nCatch.Catch \nCatch \nCatch.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-catch.html#Catch","title":"Catch.Catch","content":"Catch.Catch \nCatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-catch.html#Catch","title":"Catch.Catch","content":"Catch.Catch \nCatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-catch.html#Invoke","title":"Catch.Invoke","content":"Catch.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-choice.html","title":"Choice","content":"Choice \n \nChoice.Choice \nChoice \nChoice.Choice \nChoice \nChoice.Choice \nChoice \nChoice.Choice \nChoice \nChoice.Choice \nChoice \nChoice.Choice \nChoice \nChoice.Choice \nChoice \nChoice.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-choice.html#Choice","title":"Choice.Choice","content":"Choice.Choice \nChoice \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-choice.html#Choice","title":"Choice.Choice","content":"Choice.Choice \nChoice \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-choice.html#Choice","title":"Choice.Choice","content":"Choice.Choice \nChoice \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-choice.html#Choice","title":"Choice.Choice","content":"Choice.Choice \nChoice \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-choice.html#Choice","title":"Choice.Choice","content":"Choice.Choice \nChoice \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-choice.html#Choice","title":"Choice.Choice","content":"Choice.Choice \nChoice \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-choice.html#Choice","title":"Choice.Choice","content":"Choice.Choice \nChoice \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-choice.html#Invoke","title":"Choice.Invoke","content":"Choice.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-choose.html","title":"Choose","content":"Choose \n \nChoose.Choose \nChoose \nChoose.Choose \nChoose \nChoose.Choose \nChoose \nChoose.Choose \nChoose \nChoose.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-choose.html#Choose","title":"Choose.Choose","content":"Choose.Choose \nChoose \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-choose.html#Choose","title":"Choose.Choose","content":"Choose.Choose \nChoose \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-choose.html#Choose","title":"Choose.Choose","content":"Choose.Choose \nChoose \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-choose.html#Choose","title":"Choose.Choose","content":"Choose.Choose \nChoose \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-choose.html#Invoke","title":"Choose.Invoke","content":"Choose.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-chunkby.html","title":"ChunkBy","content":"ChunkBy \n \nChunkBy.ChunkBy \nChunkBy \nChunkBy.ChunkBy \nChunkBy \nChunkBy.ChunkBy \nChunkBy \nChunkBy.ChunkBy \nChunkBy \nChunkBy.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-chunkby.html#ChunkBy","title":"ChunkBy.ChunkBy","content":"ChunkBy.ChunkBy \nChunkBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-chunkby.html#ChunkBy","title":"ChunkBy.ChunkBy","content":"ChunkBy.ChunkBy \nChunkBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-chunkby.html#ChunkBy","title":"ChunkBy.ChunkBy","content":"ChunkBy.ChunkBy \nChunkBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-chunkby.html#ChunkBy","title":"ChunkBy.ChunkBy","content":"ChunkBy.ChunkBy \nChunkBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-chunkby.html#Invoke","title":"ChunkBy.Invoke","content":"ChunkBy.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-comp.html","title":"Comp","content":"Comp \n \nComp.( <<< ) \n( <<< ) \nComp.( <<< ) \n( <<< ) \nComp.( <<< ) \n( <<< ) \nComp.( <<< ) \n( <<< ) \nComp.Invoke \nInvoke \nComp.InvokeOnInstance \nInvokeOnInstance \nComp.InvokeOnInstance' \nInvokeOnInstance'"},{"uri":"/FSharpPlusreference/fsharpplus-control-comp.html#( <<< )","title":"Comp.( <<< )","content":"Comp.( <<< ) \n( <<< ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-comp.html#( <<< )","title":"Comp.( <<< )","content":"Comp.( <<< ) \n( <<< ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-comp.html#( <<< )","title":"Comp.( <<< )","content":"Comp.( <<< ) \n( <<< ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-comp.html#( <<< )","title":"Comp.( <<< )","content":"Comp.( <<< ) \n( <<< ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-comp.html#Invoke","title":"Comp.Invoke","content":"Comp.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-comp.html#InvokeOnInstance","title":"Comp.InvokeOnInstance","content":"Comp.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-comp.html#InvokeOnInstance'","title":"Comp.InvokeOnInstance'","content":"Comp.InvokeOnInstance' \nInvokeOnInstance' \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-composedstaticinvokable-2.html","title":"ComposedStaticInvokable<'F, 'G>","content":"ComposedStaticInvokable<'F, 'G> \n \nComposedStaticInvokable<'F, 'G>.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-composedstaticinvokable-2.html#Invoke","title":"ComposedStaticInvokable<'F, 'G>.Invoke","content":"ComposedStaticInvokable<'F, 'G>.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-contramap.html","title":"Contramap","content":"Contramap \n \nContramap.Contramap \nContramap \nContramap.Contramap \nContramap \nContramap.Contramap \nContramap \nContramap.Contramap \nContramap \nContramap.Contramap \nContramap \nContramap.Contramap \nContramap \nContramap.Contramap \nContramap \nContramap.Contramap \nContramap \nContramap.Invoke \nInvoke \nContramap.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-contramap.html#Contramap","title":"Contramap.Contramap","content":"Contramap.Contramap \nContramap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-contramap.html#Contramap","title":"Contramap.Contramap","content":"Contramap.Contramap \nContramap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-contramap.html#Contramap","title":"Contramap.Contramap","content":"Contramap.Contramap \nContramap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-contramap.html#Contramap","title":"Contramap.Contramap","content":"Contramap.Contramap \nContramap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-contramap.html#Contramap","title":"Contramap.Contramap","content":"Contramap.Contramap \nContramap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-contramap.html#Contramap","title":"Contramap.Contramap","content":"Contramap.Contramap \nContramap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-contramap.html#Contramap","title":"Contramap.Contramap","content":"Contramap.Contramap \nContramap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-contramap.html#Contramap","title":"Contramap.Contramap","content":"Contramap.Contramap \nContramap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-contramap.html#Invoke","title":"Contramap.Invoke","content":"Contramap.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-contramap.html#InvokeOnInstance","title":"Contramap.InvokeOnInstance","content":"Contramap.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-counttuple.html","title":"CountTuple","content":"CountTuple \n \nCountTuple.CountTuple \nCountTuple \nCountTuple.CountTuple \nCountTuple \nCountTuple.CountTuple \nCountTuple \nCountTuple.CountTuple \nCountTuple \nCountTuple.CountTuple \nCountTuple \nCountTuple.CountTuple \nCountTuple \nCountTuple.CountTuple \nCountTuple \nCountTuple.CountTuple \nCountTuple \nCountTuple.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-counttuple.html#CountTuple","title":"CountTuple.CountTuple","content":"CountTuple.CountTuple \nCountTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-counttuple.html#CountTuple","title":"CountTuple.CountTuple","content":"CountTuple.CountTuple \nCountTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-counttuple.html#CountTuple","title":"CountTuple.CountTuple","content":"CountTuple.CountTuple \nCountTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-counttuple.html#CountTuple","title":"CountTuple.CountTuple","content":"CountTuple.CountTuple \nCountTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-counttuple.html#CountTuple","title":"CountTuple.CountTuple","content":"CountTuple.CountTuple \nCountTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-counttuple.html#CountTuple","title":"CountTuple.CountTuple","content":"CountTuple.CountTuple \nCountTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-counttuple.html#CountTuple","title":"CountTuple.CountTuple","content":"CountTuple.CountTuple \nCountTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-counttuple.html#CountTuple","title":"CountTuple.CountTuple","content":"CountTuple.CountTuple \nCountTuple \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-counttuple.html#Invoke","title":"CountTuple.Invoke","content":"CountTuple.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-curry.html","title":"Curry","content":"Curry \n \nCurry.Curry \nCurry \nCurry.Curry \nCurry \nCurry.Curry \nCurry \nCurry.Curry \nCurry \nCurry.Curry \nCurry \nCurry.Curry \nCurry \nCurry.Curry \nCurry \nCurry.Curry \nCurry \nCurry.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-curry.html#Curry","title":"Curry.Curry","content":"Curry.Curry \nCurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-curry.html#Curry","title":"Curry.Curry","content":"Curry.Curry \nCurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-curry.html#Curry","title":"Curry.Curry","content":"Curry.Curry \nCurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-curry.html#Curry","title":"Curry.Curry","content":"Curry.Curry \nCurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-curry.html#Curry","title":"Curry.Curry","content":"Curry.Curry \nCurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-curry.html#Curry","title":"Curry.Curry","content":"Curry.Curry \nCurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-curry.html#Curry","title":"Curry.Curry","content":"Curry.Curry \nCurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-curry.html#Curry","title":"Curry.Curry","content":"Curry.Curry \nCurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-curry.html#Invoke","title":"Curry.Invoke","content":"Curry.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-delay.html","title":"Delay","content":"Delay \n \nDelay.Delay \nDelay \nDelay.Delay \nDelay \nDelay.Delay \nDelay \nDelay.Delay \nDelay \nDelay.Delay \nDelay \nDelay.Delay \nDelay \nDelay.Delay \nDelay \nDelay.Delay \nDelay \nDelay.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-delay.html#Delay","title":"Delay.Delay","content":"Delay.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-delay.html#Delay","title":"Delay.Delay","content":"Delay.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-delay.html#Delay","title":"Delay.Delay","content":"Delay.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-delay.html#Delay","title":"Delay.Delay","content":"Delay.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-delay.html#Delay","title":"Delay.Delay","content":"Delay.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-delay.html#Delay","title":"Delay.Delay","content":"Delay.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-delay.html#Delay","title":"Delay.Delay","content":"Delay.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-delay.html#Delay","title":"Delay.Delay","content":"Delay.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-delay.html#Invoke","title":"Delay.Invoke","content":"Delay.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-dimap.html","title":"Dimap","content":"Dimap \n \nDimap.Dimap \nDimap \nDimap.Dimap \nDimap \nDimap.Dimap \nDimap \nDimap.Dimap \nDimap \nDimap.Dimap \nDimap \nDimap.Invoke \nInvoke \nDimap.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-dimap.html#Dimap","title":"Dimap.Dimap","content":"Dimap.Dimap \nDimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-dimap.html#Dimap","title":"Dimap.Dimap","content":"Dimap.Dimap \nDimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-dimap.html#Dimap","title":"Dimap.Dimap","content":"Dimap.Dimap \nDimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-dimap.html#Dimap","title":"Dimap.Dimap","content":"Dimap.Dimap \nDimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-dimap.html#Dimap","title":"Dimap.Dimap","content":"Dimap.Dimap \nDimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-dimap.html#Invoke","title":"Dimap.Invoke","content":"Dimap.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-dimap.html#InvokeOnInstance","title":"Dimap.InvokeOnInstance","content":"Dimap.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinct.html","title":"Distinct","content":"Distinct \n \nDistinct.Distinct \nDistinct \nDistinct.Distinct \nDistinct \nDistinct.Distinct \nDistinct \nDistinct.Distinct \nDistinct \nDistinct.Distinct \nDistinct \nDistinct.Invoke \nInvoke \nDistinct.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinct.html#Distinct","title":"Distinct.Distinct","content":"Distinct.Distinct \nDistinct \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinct.html#Distinct","title":"Distinct.Distinct","content":"Distinct.Distinct \nDistinct \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinct.html#Distinct","title":"Distinct.Distinct","content":"Distinct.Distinct \nDistinct \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinct.html#Distinct","title":"Distinct.Distinct","content":"Distinct.Distinct \nDistinct \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinct.html#Distinct","title":"Distinct.Distinct","content":"Distinct.Distinct \nDistinct \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinct.html#Invoke","title":"Distinct.Invoke","content":"Distinct.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinct.html#InvokeOnInstance","title":"Distinct.InvokeOnInstance","content":"Distinct.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinctby.html","title":"DistinctBy","content":"DistinctBy \n \nDistinctBy.DistinctBy \nDistinctBy \nDistinctBy.DistinctBy \nDistinctBy \nDistinctBy.DistinctBy \nDistinctBy \nDistinctBy.DistinctBy \nDistinctBy \nDistinctBy.DistinctBy \nDistinctBy \nDistinctBy.Invoke \nInvoke \nDistinctBy.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinctby.html#DistinctBy","title":"DistinctBy.DistinctBy","content":"DistinctBy.DistinctBy \nDistinctBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinctby.html#DistinctBy","title":"DistinctBy.DistinctBy","content":"DistinctBy.DistinctBy \nDistinctBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinctby.html#DistinctBy","title":"DistinctBy.DistinctBy","content":"DistinctBy.DistinctBy \nDistinctBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinctby.html#DistinctBy","title":"DistinctBy.DistinctBy","content":"DistinctBy.DistinctBy \nDistinctBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinctby.html#DistinctBy","title":"DistinctBy.DistinctBy","content":"DistinctBy.DistinctBy \nDistinctBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinctby.html#Invoke","title":"DistinctBy.Invoke","content":"DistinctBy.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-distinctby.html#InvokeOnInstance","title":"DistinctBy.InvokeOnInstance","content":"DistinctBy.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-divrem.html","title":"DivRem","content":"DivRem \n \nDivRem.DivRem \nDivRem \nDivRem.DivRem \nDivRem \nDivRem.DivRem \nDivRem \nDivRem.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-divrem.html#DivRem","title":"DivRem.DivRem","content":"DivRem.DivRem \nDivRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-divrem.html#DivRem","title":"DivRem.DivRem","content":"DivRem.DivRem \nDivRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-divrem.html#DivRem","title":"DivRem.DivRem","content":"DivRem.DivRem \nDivRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-divrem.html#Invoke","title":"DivRem.Invoke","content":"DivRem.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-divide.html","title":"Divide","content":"Divide \n \nDivide.Divide \nDivide \nDivide.Divide \nDivide \nDivide.Divide \nDivide \nDivide.Divide \nDivide \nDivide.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-divide.html#Divide","title":"Divide.Divide","content":"Divide.Divide \nDivide \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-divide.html#Divide","title":"Divide.Divide","content":"Divide.Divide \nDivide \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-divide.html#Divide","title":"Divide.Divide","content":"Divide.Divide \nDivide \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-divide.html#Divide","title":"Divide.Divide","content":"Divide.Divide \nDivide \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-divide.html#Invoke","title":"Divide.Invoke","content":"Divide.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-drop.html","title":"Drop","content":"Drop \n \nDrop.Drop \nDrop \nDrop.Drop \nDrop \nDrop.Drop \nDrop \nDrop.Drop \nDrop \nDrop.Drop \nDrop \nDrop.Drop \nDrop \nDrop.Drop \nDrop \nDrop.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-drop.html#Drop","title":"Drop.Drop","content":"Drop.Drop \nDrop \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-drop.html#Drop","title":"Drop.Drop","content":"Drop.Drop \nDrop \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-drop.html#Drop","title":"Drop.Drop","content":"Drop.Drop \nDrop \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-drop.html#Drop","title":"Drop.Drop","content":"Drop.Drop \nDrop \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-drop.html#Drop","title":"Drop.Drop","content":"Drop.Drop \nDrop \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-drop.html#Drop","title":"Drop.Drop","content":"Drop.Drop \nDrop \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-drop.html#Drop","title":"Drop.Drop","content":"Drop.Drop \nDrop \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-drop.html#Invoke","title":"Drop.Invoke","content":"Drop.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-duplicate.html","title":"Duplicate","content":"Duplicate \n \nDuplicate.Duplicate \nDuplicate \nDuplicate.Duplicate \nDuplicate \nDuplicate.Duplicate \nDuplicate \nDuplicate.Duplicate \nDuplicate \nDuplicate.Duplicate \nDuplicate \nDuplicate.Duplicate \nDuplicate \nDuplicate.Duplicate \nDuplicate \nDuplicate.Duplicate \nDuplicate \nDuplicate.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-duplicate.html#Duplicate","title":"Duplicate.Duplicate","content":"Duplicate.Duplicate \nDuplicate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-duplicate.html#Duplicate","title":"Duplicate.Duplicate","content":"Duplicate.Duplicate \nDuplicate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-duplicate.html#Duplicate","title":"Duplicate.Duplicate","content":"Duplicate.Duplicate \nDuplicate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-duplicate.html#Duplicate","title":"Duplicate.Duplicate","content":"Duplicate.Duplicate \nDuplicate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-duplicate.html#Duplicate","title":"Duplicate.Duplicate","content":"Duplicate.Duplicate \nDuplicate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-duplicate.html#Duplicate","title":"Duplicate.Duplicate","content":"Duplicate.Duplicate \nDuplicate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-duplicate.html#Duplicate","title":"Duplicate.Duplicate","content":"Duplicate.Duplicate \nDuplicate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-duplicate.html#Duplicate","title":"Duplicate.Duplicate","content":"Duplicate.Duplicate \nDuplicate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-duplicate.html#Invoke","title":"Duplicate.Invoke","content":"Duplicate.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-empty.html","title":"Empty","content":"Empty \n \nEmpty.Empty \nEmpty \nEmpty.Empty \nEmpty \nEmpty.Empty \nEmpty \nEmpty.Empty \nEmpty \nEmpty.Empty \nEmpty \nEmpty.Empty \nEmpty \nEmpty.Invoke \nInvoke \nEmpty.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-empty.html#Empty","title":"Empty.Empty","content":"Empty.Empty \nEmpty \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-empty.html#Empty","title":"Empty.Empty","content":"Empty.Empty \nEmpty \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-empty.html#Empty","title":"Empty.Empty","content":"Empty.Empty \nEmpty \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-empty.html#Empty","title":"Empty.Empty","content":"Empty.Empty \nEmpty \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-empty.html#Empty","title":"Empty.Empty","content":"Empty.Empty \nEmpty \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-empty.html#Empty","title":"Empty.Empty","content":"Empty.Empty \nEmpty \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-empty.html#Invoke","title":"Empty.Invoke","content":"Empty.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-empty.html#InvokeOnInstance","title":"Empty.InvokeOnInstance","content":"Empty.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-exists.html","title":"Exists","content":"Exists \n \nExists.Exists \nExists \nExists.Exists \nExists \nExists.Exists \nExists \nExists.Exists \nExists \nExists.Exists \nExists \nExists.Exists \nExists \nExists.Exists \nExists \nExists.Exists \nExists \nExists.Exists \nExists \nExists.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-exists.html#Exists","title":"Exists.Exists","content":"Exists.Exists \nExists \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-exists.html#Exists","title":"Exists.Exists","content":"Exists.Exists \nExists \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-exists.html#Exists","title":"Exists.Exists","content":"Exists.Exists \nExists \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-exists.html#Exists","title":"Exists.Exists","content":"Exists.Exists \nExists \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-exists.html#Exists","title":"Exists.Exists","content":"Exists.Exists \nExists \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-exists.html#Exists","title":"Exists.Exists","content":"Exists.Exists \nExists \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-exists.html#Exists","title":"Exists.Exists","content":"Exists.Exists \nExists \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-exists.html#Exists","title":"Exists.Exists","content":"Exists.Exists \nExists \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-exists.html#Exists","title":"Exists.Exists","content":"Exists.Exists \nExists \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-exists.html#Invoke","title":"Exists.Invoke","content":"Exists.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html","title":"Explicit","content":"Explicit \n \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Explicit \nExplicit \nExplicit.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Explicit","title":"Explicit.Explicit","content":"Explicit.Explicit \nExplicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-explicit.html#Invoke","title":"Explicit.Invoke","content":"Explicit.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extend.html","title":"Extend","content":"Extend \n \nExtend.Invoke \nInvoke \nExtend.( =>> ) \n( =>> ) \nExtend.( =>> ) \n( =>> ) \nExtend.( =>> ) \n( =>> ) \nExtend.( =>> ) \n( =>> ) \nExtend.( =>> ) \n( =>> ) \nExtend.( =>> ) \n( =>> ) \nExtend.( =>> ) \n( =>> ) \nExtend.( =>> ) \n( =>> ) \nExtend.( =>> ) \n( =>> )"},{"uri":"/FSharpPlusreference/fsharpplus-control-extend.html#Invoke","title":"Extend.Invoke","content":"Extend.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extend.html#( =>> )","title":"Extend.( =>> )","content":"Extend.( =>> ) \n( =>> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extend.html#( =>> )","title":"Extend.( =>> )","content":"Extend.( =>> ) \n( =>> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extend.html#( =>> )","title":"Extend.( =>> )","content":"Extend.( =>> ) \n( =>> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extend.html#( =>> )","title":"Extend.( =>> )","content":"Extend.( =>> ) \n( =>> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extend.html#( =>> )","title":"Extend.( =>> )","content":"Extend.( =>> ) \n( =>> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extend.html#( =>> )","title":"Extend.( =>> )","content":"Extend.( =>> ) \n( =>> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extend.html#( =>> )","title":"Extend.( =>> )","content":"Extend.( =>> ) \n( =>> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extend.html#( =>> )","title":"Extend.( =>> )","content":"Extend.( =>> ) \n( =>> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extend.html#( =>> )","title":"Extend.( =>> )","content":"Extend.( =>> ) \n( =>> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extract.html","title":"Extract","content":"Extract \n \nExtract.Extract \nExtract \nExtract.Extract \nExtract \nExtract.Extract \nExtract \nExtract.Extract \nExtract \nExtract.Extract \nExtract \nExtract.Extract \nExtract \nExtract.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-extract.html#Extract","title":"Extract.Extract","content":"Extract.Extract \nExtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extract.html#Extract","title":"Extract.Extract","content":"Extract.Extract \nExtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extract.html#Extract","title":"Extract.Extract","content":"Extract.Extract \nExtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extract.html#Extract","title":"Extract.Extract","content":"Extract.Extract \nExtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extract.html#Extract","title":"Extract.Extract","content":"Extract.Extract \nExtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extract.html#Extract","title":"Extract.Extract","content":"Extract.Extract \nExtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-extract.html#Invoke","title":"Extract.Invoke","content":"Extract.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanin.html","title":"Fanin","content":"Fanin \n \nFanin.Invoke \nInvoke \nFanin.InvokeOnInstance \nInvokeOnInstance \nFanin.( ||| ) \n( ||| ) \nFanin.( ||| ) \n( ||| ) \nFanin.( ||| ) \n( ||| ) \nFanin.( ||| ) \n( ||| )"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanin.html#Invoke","title":"Fanin.Invoke","content":"Fanin.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanin.html#InvokeOnInstance","title":"Fanin.InvokeOnInstance","content":"Fanin.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanin.html#( ||| )","title":"Fanin.( ||| )","content":"Fanin.( ||| ) \n( ||| ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanin.html#( ||| )","title":"Fanin.( ||| )","content":"Fanin.( ||| ) \n( ||| ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanin.html#( ||| )","title":"Fanin.( ||| )","content":"Fanin.( ||| ) \n( ||| ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanin.html#( ||| )","title":"Fanin.( ||| )","content":"Fanin.( ||| ) \n( ||| ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanout.html","title":"Fanout","content":"Fanout \n \nFanout.( &&& ) \n( &&& ) \nFanout.( &&& ) \n( &&& ) \nFanout.( &&& ) \n( &&& ) \nFanout.( &&& ) \n( &&& ) \nFanout.( &&& ) \n( &&& ) \nFanout.( &&& ) \n( &&& ) \nFanout.Invoke \nInvoke \nFanout.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanout.html#( &&& )","title":"Fanout.( &&& )","content":"Fanout.( &&& ) \n( &&& ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanout.html#( &&& )","title":"Fanout.( &&& )","content":"Fanout.( &&& ) \n( &&& ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanout.html#( &&& )","title":"Fanout.( &&& )","content":"Fanout.( &&& ) \n( &&& ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanout.html#( &&& )","title":"Fanout.( &&& )","content":"Fanout.( &&& ) \n( &&& ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanout.html#( &&& )","title":"Fanout.( &&& )","content":"Fanout.( &&& ) \n( &&& ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanout.html#( &&& )","title":"Fanout.( &&& )","content":"Fanout.( &&& ) \n( &&& ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanout.html#Invoke","title":"Fanout.Invoke","content":"Fanout.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fanout.html#InvokeOnInstance","title":"Fanout.InvokeOnInstance","content":"Fanout.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-filter.html","title":"Filter","content":"Filter \n \nFilter.Filter \nFilter \nFilter.Filter \nFilter \nFilter.Filter \nFilter \nFilter.Filter \nFilter \nFilter.Filter \nFilter \nFilter.Filter \nFilter \nFilter.Filter \nFilter \nFilter.Filter \nFilter \nFilter.Filter \nFilter \nFilter.Filter \nFilter \nFilter.Invoke \nInvoke \nFilter.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-filter.html#Filter","title":"Filter.Filter","content":"Filter.Filter \nFilter \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-filter.html#Filter","title":"Filter.Filter","content":"Filter.Filter \nFilter \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-filter.html#Filter","title":"Filter.Filter","content":"Filter.Filter \nFilter \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-filter.html#Filter","title":"Filter.Filter","content":"Filter.Filter \nFilter \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-filter.html#Filter","title":"Filter.Filter","content":"Filter.Filter \nFilter \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-filter.html#Filter","title":"Filter.Filter","content":"Filter.Filter \nFilter \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-filter.html#Filter","title":"Filter.Filter","content":"Filter.Filter \nFilter \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-filter.html#Filter","title":"Filter.Filter","content":"Filter.Filter \nFilter \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-filter.html#Filter","title":"Filter.Filter","content":"Filter.Filter \nFilter \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-filter.html#Filter","title":"Filter.Filter","content":"Filter.Filter \nFilter \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-filter.html#Invoke","title":"Filter.Invoke","content":"Filter.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-filter.html#InvokeOnInstance","title":"Filter.InvokeOnInstance","content":"Filter.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-find.html","title":"Find","content":"Find \n \nFind.Find \nFind \nFind.Find \nFind \nFind.Find \nFind \nFind.Find \nFind \nFind.Find \nFind \nFind.Find \nFind \nFind.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-find.html#Find","title":"Find.Find","content":"Find.Find \nFind \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-find.html#Find","title":"Find.Find","content":"Find.Find \nFind \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-find.html#Find","title":"Find.Find","content":"Find.Find \nFind \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-find.html#Find","title":"Find.Find","content":"Find.Find \nFind \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-find.html#Find","title":"Find.Find","content":"Find.Find \nFind \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-find.html#Find","title":"Find.Find","content":"Find.Find \nFind \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-find.html#Invoke","title":"Find.Invoke","content":"Find.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findindex.html","title":"FindIndex","content":"FindIndex \n \nFindIndex.FindIndex \nFindIndex \nFindIndex.FindIndex \nFindIndex \nFindIndex.FindIndex \nFindIndex \nFindIndex.FindIndex \nFindIndex \nFindIndex.FindIndex \nFindIndex \nFindIndex.FindIndex \nFindIndex \nFindIndex.FindIndex \nFindIndex \nFindIndex.FindIndex \nFindIndex \nFindIndex.Invoke \nInvoke \nFindIndex.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-findindex.html#FindIndex","title":"FindIndex.FindIndex","content":"FindIndex.FindIndex \nFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findindex.html#FindIndex","title":"FindIndex.FindIndex","content":"FindIndex.FindIndex \nFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findindex.html#FindIndex","title":"FindIndex.FindIndex","content":"FindIndex.FindIndex \nFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findindex.html#FindIndex","title":"FindIndex.FindIndex","content":"FindIndex.FindIndex \nFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findindex.html#FindIndex","title":"FindIndex.FindIndex","content":"FindIndex.FindIndex \nFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findindex.html#FindIndex","title":"FindIndex.FindIndex","content":"FindIndex.FindIndex \nFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findindex.html#FindIndex","title":"FindIndex.FindIndex","content":"FindIndex.FindIndex \nFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findindex.html#FindIndex","title":"FindIndex.FindIndex","content":"FindIndex.FindIndex \nFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findindex.html#Invoke","title":"FindIndex.Invoke","content":"FindIndex.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findindex.html#InvokeOnInstance","title":"FindIndex.InvokeOnInstance","content":"FindIndex.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findsliceindex.html","title":"FindSliceIndex","content":"FindSliceIndex \n \nFindSliceIndex.FindSliceIndex \nFindSliceIndex \nFindSliceIndex.FindSliceIndex \nFindSliceIndex \nFindSliceIndex.FindSliceIndex \nFindSliceIndex \nFindSliceIndex.FindSliceIndex \nFindSliceIndex \nFindSliceIndex.FindSliceIndex \nFindSliceIndex \nFindSliceIndex.FindSliceIndex \nFindSliceIndex \nFindSliceIndex.FindSliceIndex \nFindSliceIndex \nFindSliceIndex.FindSliceIndex \nFindSliceIndex \nFindSliceIndex.Invoke \nInvoke \nFindSliceIndex.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-findsliceindex.html#FindSliceIndex","title":"FindSliceIndex.FindSliceIndex","content":"FindSliceIndex.FindSliceIndex \nFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findsliceindex.html#FindSliceIndex","title":"FindSliceIndex.FindSliceIndex","content":"FindSliceIndex.FindSliceIndex \nFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findsliceindex.html#FindSliceIndex","title":"FindSliceIndex.FindSliceIndex","content":"FindSliceIndex.FindSliceIndex \nFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findsliceindex.html#FindSliceIndex","title":"FindSliceIndex.FindSliceIndex","content":"FindSliceIndex.FindSliceIndex \nFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findsliceindex.html#FindSliceIndex","title":"FindSliceIndex.FindSliceIndex","content":"FindSliceIndex.FindSliceIndex \nFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findsliceindex.html#FindSliceIndex","title":"FindSliceIndex.FindSliceIndex","content":"FindSliceIndex.FindSliceIndex \nFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findsliceindex.html#FindSliceIndex","title":"FindSliceIndex.FindSliceIndex","content":"FindSliceIndex.FindSliceIndex \nFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findsliceindex.html#FindSliceIndex","title":"FindSliceIndex.FindSliceIndex","content":"FindSliceIndex.FindSliceIndex \nFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findsliceindex.html#Invoke","title":"FindSliceIndex.Invoke","content":"FindSliceIndex.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-findsliceindex.html#InvokeOnInstance","title":"FindSliceIndex.InvokeOnInstance","content":"FindSliceIndex.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fold.html","title":"Fold","content":"Fold \n \nFold.Fold \nFold \nFold.Fold \nFold \nFold.Fold \nFold \nFold.Fold \nFold \nFold.Fold \nFold \nFold.Fold \nFold \nFold.Fold \nFold \nFold.Fold \nFold \nFold.FromFoldMap \nFromFoldMap \nFold.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-fold.html#Fold","title":"Fold.Fold","content":"Fold.Fold \nFold \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fold.html#Fold","title":"Fold.Fold","content":"Fold.Fold \nFold \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fold.html#Fold","title":"Fold.Fold","content":"Fold.Fold \nFold \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fold.html#Fold","title":"Fold.Fold","content":"Fold.Fold \nFold \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fold.html#Fold","title":"Fold.Fold","content":"Fold.Fold \nFold \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fold.html#Fold","title":"Fold.Fold","content":"Fold.Fold \nFold \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fold.html#Fold","title":"Fold.Fold","content":"Fold.Fold \nFold \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fold.html#Fold","title":"Fold.Fold","content":"Fold.Fold \nFold \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fold.html#FromFoldMap","title":"Fold.FromFoldMap","content":"Fold.FromFoldMap \nFromFoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fold.html#Invoke","title":"Fold.Invoke","content":"Fold.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html","title":"FoldBack","content":"FoldBack \n \nFoldBack.FoldBack \nFoldBack \nFoldBack.FoldBack \nFoldBack \nFoldBack.FoldBack \nFoldBack \nFoldBack.FoldBack \nFoldBack \nFoldBack.FoldBack \nFoldBack \nFoldBack.FoldBack \nFoldBack \nFoldBack.FoldBack \nFoldBack \nFoldBack.FoldBack \nFoldBack \nFoldBack.FoldBack \nFoldBack \nFoldBack.FoldBack \nFoldBack \nFoldBack.FoldBack \nFoldBack \nFoldBack.FromFoldMap \nFromFoldMap \nFoldBack.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html#FoldBack","title":"FoldBack.FoldBack","content":"FoldBack.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html#FoldBack","title":"FoldBack.FoldBack","content":"FoldBack.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html#FoldBack","title":"FoldBack.FoldBack","content":"FoldBack.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html#FoldBack","title":"FoldBack.FoldBack","content":"FoldBack.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html#FoldBack","title":"FoldBack.FoldBack","content":"FoldBack.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html#FoldBack","title":"FoldBack.FoldBack","content":"FoldBack.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html#FoldBack","title":"FoldBack.FoldBack","content":"FoldBack.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html#FoldBack","title":"FoldBack.FoldBack","content":"FoldBack.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html#FoldBack","title":"FoldBack.FoldBack","content":"FoldBack.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html#FoldBack","title":"FoldBack.FoldBack","content":"FoldBack.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html#FoldBack","title":"FoldBack.FoldBack","content":"FoldBack.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html#FromFoldMap","title":"FoldBack.FromFoldMap","content":"FoldBack.FromFoldMap \nFromFoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldback.html#Invoke","title":"FoldBack.Invoke","content":"FoldBack.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldindexed.html","title":"FoldIndexed","content":"FoldIndexed \n \nFoldIndexed.FoldIndexed \nFoldIndexed \nFoldIndexed.FoldIndexed \nFoldIndexed \nFoldIndexed.FoldIndexed \nFoldIndexed \nFoldIndexed.FoldIndexed \nFoldIndexed \nFoldIndexed.FoldIndexed \nFoldIndexed \nFoldIndexed.FoldIndexed \nFoldIndexed \nFoldIndexed.Invoke \nInvoke \nFoldIndexed.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldindexed.html#FoldIndexed","title":"FoldIndexed.FoldIndexed","content":"FoldIndexed.FoldIndexed \nFoldIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldindexed.html#FoldIndexed","title":"FoldIndexed.FoldIndexed","content":"FoldIndexed.FoldIndexed \nFoldIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldindexed.html#FoldIndexed","title":"FoldIndexed.FoldIndexed","content":"FoldIndexed.FoldIndexed \nFoldIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldindexed.html#FoldIndexed","title":"FoldIndexed.FoldIndexed","content":"FoldIndexed.FoldIndexed \nFoldIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldindexed.html#FoldIndexed","title":"FoldIndexed.FoldIndexed","content":"FoldIndexed.FoldIndexed \nFoldIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldindexed.html#FoldIndexed","title":"FoldIndexed.FoldIndexed","content":"FoldIndexed.FoldIndexed \nFoldIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldindexed.html#Invoke","title":"FoldIndexed.Invoke","content":"FoldIndexed.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldindexed.html#InvokeOnInstance","title":"FoldIndexed.InvokeOnInstance","content":"FoldIndexed.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldmap.html","title":"FoldMap","content":"FoldMap \n \nFoldMap.FoldMap \nFoldMap \nFoldMap.FoldMap \nFoldMap \nFoldMap.FoldMap \nFoldMap \nFoldMap.FoldMap \nFoldMap \nFoldMap.FoldMap \nFoldMap \nFoldMap.FoldMap \nFoldMap \nFoldMap.FoldMap \nFoldMap \nFoldMap.FromFoldFoldBack \nFromFoldFoldBack \nFoldMap.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldmap.html#FoldMap","title":"FoldMap.FoldMap","content":"FoldMap.FoldMap \nFoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldmap.html#FoldMap","title":"FoldMap.FoldMap","content":"FoldMap.FoldMap \nFoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldmap.html#FoldMap","title":"FoldMap.FoldMap","content":"FoldMap.FoldMap \nFoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldmap.html#FoldMap","title":"FoldMap.FoldMap","content":"FoldMap.FoldMap \nFoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldmap.html#FoldMap","title":"FoldMap.FoldMap","content":"FoldMap.FoldMap \nFoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldmap.html#FoldMap","title":"FoldMap.FoldMap","content":"FoldMap.FoldMap \nFoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldmap.html#FoldMap","title":"FoldMap.FoldMap","content":"FoldMap.FoldMap \nFoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldmap.html#FromFoldFoldBack","title":"FoldMap.FromFoldFoldBack","content":"FoldMap.FromFoldFoldBack \nFromFoldFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-foldmap.html#Invoke","title":"FoldMap.Invoke","content":"FoldMap.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-forall.html","title":"ForAll","content":"ForAll \n \nForAll.ForAll \nForAll \nForAll.ForAll \nForAll \nForAll.ForAll \nForAll \nForAll.ForAll \nForAll \nForAll.ForAll \nForAll \nForAll.ForAll \nForAll \nForAll.ForAll \nForAll \nForAll.ForAll \nForAll \nForAll.ForAll \nForAll \nForAll.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-forall.html#ForAll","title":"ForAll.ForAll","content":"ForAll.ForAll \nForAll \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-forall.html#ForAll","title":"ForAll.ForAll","content":"ForAll.ForAll \nForAll \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-forall.html#ForAll","title":"ForAll.ForAll","content":"ForAll.ForAll \nForAll \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-forall.html#ForAll","title":"ForAll.ForAll","content":"ForAll.ForAll \nForAll \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-forall.html#ForAll","title":"ForAll.ForAll","content":"ForAll.ForAll \nForAll \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-forall.html#ForAll","title":"ForAll.ForAll","content":"ForAll.ForAll \nForAll \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-forall.html#ForAll","title":"ForAll.ForAll","content":"ForAll.ForAll \nForAll \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-forall.html#ForAll","title":"ForAll.ForAll","content":"ForAll.ForAll \nForAll \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-forall.html#ForAll","title":"ForAll.ForAll","content":"ForAll.ForAll \nForAll \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-forall.html#Invoke","title":"ForAll.Invoke","content":"ForAll.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html","title":"FromBigInt","content":"FromBigInt \n \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.FromBigInt \nFromBigInt \nFromBigInt.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#FromBigInt","title":"FromBigInt.FromBigInt","content":"FromBigInt.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-frombigint.html#Invoke","title":"FromBigInt.Invoke","content":"FromBigInt.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html","title":"FromInt32","content":"FromInt32 \n \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.FromInt32 \nFromInt32 \nFromInt32.Invoke \nInvoke \nFromInt32.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#FromInt32","title":"FromInt32.FromInt32","content":"FromInt32.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#Invoke","title":"FromInt32.Invoke","content":"FromInt32.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint32.html#InvokeOnInstance","title":"FromInt32.InvokeOnInstance","content":"FromInt32.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html","title":"FromInt64","content":"FromInt64 \n \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.FromInt64 \nFromInt64 \nFromInt64.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#FromInt64","title":"FromInt64.FromInt64","content":"FromInt64.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-fromint64.html#Invoke","title":"FromInt64.Invoke","content":"FromInt64.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-get.html","title":"Get","content":"Get \n \nGet.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-get.html#Invoke","title":"Get.Invoke","content":"Get.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-groupby.html","title":"GroupBy","content":"GroupBy \n \nGroupBy.GroupBy \nGroupBy \nGroupBy.GroupBy \nGroupBy \nGroupBy.GroupBy \nGroupBy \nGroupBy.GroupBy \nGroupBy \nGroupBy.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-groupby.html#GroupBy","title":"GroupBy.GroupBy","content":"GroupBy.GroupBy \nGroupBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-groupby.html#GroupBy","title":"GroupBy.GroupBy","content":"GroupBy.GroupBy \nGroupBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-groupby.html#GroupBy","title":"GroupBy.GroupBy","content":"GroupBy.GroupBy \nGroupBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-groupby.html#GroupBy","title":"GroupBy.GroupBy","content":"GroupBy.GroupBy \nGroupBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-groupby.html#Invoke","title":"GroupBy.Invoke","content":"GroupBy.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-head.html","title":"Head","content":"Head \n \nHead.Head \nHead \nHead.Head \nHead \nHead.Head \nHead \nHead.Head \nHead \nHead.Head \nHead \nHead.Head \nHead \nHead.Head \nHead \nHead.Head \nHead \nHead.Head \nHead \nHead.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-head.html#Head","title":"Head.Head","content":"Head.Head \nHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-head.html#Head","title":"Head.Head","content":"Head.Head \nHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-head.html#Head","title":"Head.Head","content":"Head.Head \nHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-head.html#Head","title":"Head.Head","content":"Head.Head \nHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-head.html#Head","title":"Head.Head","content":"Head.Head \nHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-head.html#Head","title":"Head.Head","content":"Head.Head \nHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-head.html#Head","title":"Head.Head","content":"Head.Head \nHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-head.html#Head","title":"Head.Head","content":"Head.Head \nHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-head.html#Head","title":"Head.Head","content":"Head.Head \nHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-head.html#Invoke","title":"Head.Invoke","content":"Head.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-id.html","title":"Id","content":"Id \n \nId.Id \nId \nId.Id \nId \nId.Id \nId \nId.Id \nId \nId.Invoke \nInvoke \nId.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-id.html#Id","title":"Id.Id","content":"Id.Id \nId \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-id.html#Id","title":"Id.Id","content":"Id.Id \nId \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-id.html#Id","title":"Id.Id","content":"Id.Id \nId \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-id.html#Id","title":"Id.Id","content":"Id.Id \nId \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-id.html#Invoke","title":"Id.Invoke","content":"Id.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-id.html#InvokeOnInstance","title":"Id.InvokeOnInstance","content":"Id.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-intercalate.html","title":"Intercalate","content":"Intercalate \n \nIntercalate.Intercalate \nIntercalate \nIntercalate.Intercalate \nIntercalate \nIntercalate.Intercalate \nIntercalate \nIntercalate.Intercalate \nIntercalate \nIntercalate.Intercalate \nIntercalate \nIntercalate.Intercalate \nIntercalate \nIntercalate.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-intercalate.html#Intercalate","title":"Intercalate.Intercalate","content":"Intercalate.Intercalate \nIntercalate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-intercalate.html#Intercalate","title":"Intercalate.Intercalate","content":"Intercalate.Intercalate \nIntercalate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-intercalate.html#Intercalate","title":"Intercalate.Intercalate","content":"Intercalate.Intercalate \nIntercalate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-intercalate.html#Intercalate","title":"Intercalate.Intercalate","content":"Intercalate.Intercalate \nIntercalate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-intercalate.html#Intercalate","title":"Intercalate.Intercalate","content":"Intercalate.Intercalate \nIntercalate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-intercalate.html#Intercalate","title":"Intercalate.Intercalate","content":"Intercalate.Intercalate \nIntercalate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-intercalate.html#Invoke","title":"Intercalate.Invoke","content":"Intercalate.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-intersperse.html","title":"Intersperse","content":"Intersperse \n \nIntersperse.Intersperse \nIntersperse \nIntersperse.Intersperse \nIntersperse \nIntersperse.Intersperse \nIntersperse \nIntersperse.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-intersperse.html#Intersperse","title":"Intersperse.Intersperse","content":"Intersperse.Intersperse \nIntersperse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-intersperse.html#Intersperse","title":"Intersperse.Intersperse","content":"Intersperse.Intersperse \nIntersperse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-intersperse.html#Intersperse","title":"Intersperse.Intersperse","content":"Intersperse.Intersperse \nIntersperse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-intersperse.html#Invoke","title":"Intersperse.Invoke","content":"Intersperse.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-invmap.html","title":"Invmap","content":"Invmap \n \nInvmap.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-invmap.html#Invoke","title":"Invmap.Invoke","content":"Invmap.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-invoke.html","title":"Invoke","content":"Invoke \n \nInvoke.Invoke \nInvoke \nInvoke.Invoke \nInvoke \nInvoke.Invoke \nInvoke \nInvoke.Invoke \nInvoke \nInvoke.Invoke \nInvoke \nInvoke.InvokeNRTC \nInvokeNRTC"},{"uri":"/FSharpPlusreference/fsharpplus-control-invoke.html#Invoke","title":"Invoke.Invoke","content":"Invoke.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-invoke.html#Invoke","title":"Invoke.Invoke","content":"Invoke.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-invoke.html#Invoke","title":"Invoke.Invoke","content":"Invoke.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-invoke.html#Invoke","title":"Invoke.Invoke","content":"Invoke.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-invoke.html#Invoke","title":"Invoke.Invoke","content":"Invoke.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-invoke.html#InvokeNRTC","title":"Invoke.InvokeNRTC","content":"Invoke.InvokeNRTC \nInvokeNRTC \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isaltleftzero.html","title":"IsAltLeftZero","content":"IsAltLeftZero \n \nIsAltLeftZero.Invoke \nInvoke \nIsAltLeftZero.InvokeOnInstance \nInvokeOnInstance \nIsAltLeftZero.IsAltLeftZero \nIsAltLeftZero \nIsAltLeftZero.IsAltLeftZero \nIsAltLeftZero \nIsAltLeftZero.IsAltLeftZero \nIsAltLeftZero \nIsAltLeftZero.IsAltLeftZero \nIsAltLeftZero \nIsAltLeftZero.IsAltLeftZero \nIsAltLeftZero \nIsAltLeftZero.IsAltLeftZero \nIsAltLeftZero \nIsAltLeftZero.IsAltLeftZero \nIsAltLeftZero"},{"uri":"/FSharpPlusreference/fsharpplus-control-isaltleftzero.html#Invoke","title":"IsAltLeftZero.Invoke","content":"IsAltLeftZero.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isaltleftzero.html#InvokeOnInstance","title":"IsAltLeftZero.InvokeOnInstance","content":"IsAltLeftZero.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isaltleftzero.html#IsAltLeftZero","title":"IsAltLeftZero.IsAltLeftZero","content":"IsAltLeftZero.IsAltLeftZero \nIsAltLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isaltleftzero.html#IsAltLeftZero","title":"IsAltLeftZero.IsAltLeftZero","content":"IsAltLeftZero.IsAltLeftZero \nIsAltLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isaltleftzero.html#IsAltLeftZero","title":"IsAltLeftZero.IsAltLeftZero","content":"IsAltLeftZero.IsAltLeftZero \nIsAltLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isaltleftzero.html#IsAltLeftZero","title":"IsAltLeftZero.IsAltLeftZero","content":"IsAltLeftZero.IsAltLeftZero \nIsAltLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isaltleftzero.html#IsAltLeftZero","title":"IsAltLeftZero.IsAltLeftZero","content":"IsAltLeftZero.IsAltLeftZero \nIsAltLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isaltleftzero.html#IsAltLeftZero","title":"IsAltLeftZero.IsAltLeftZero","content":"IsAltLeftZero.IsAltLeftZero \nIsAltLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isaltleftzero.html#IsAltLeftZero","title":"IsAltLeftZero.IsAltLeftZero","content":"IsAltLeftZero.IsAltLeftZero \nIsAltLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html","title":"IsLeftZero","content":"IsLeftZero \n \nIsLeftZero.Invoke \nInvoke \nIsLeftZero.InvokeOnInstance \nInvokeOnInstance \nIsLeftZero.IsLeftZero \nIsLeftZero \nIsLeftZero.IsLeftZero \nIsLeftZero \nIsLeftZero.IsLeftZero \nIsLeftZero \nIsLeftZero.IsLeftZero \nIsLeftZero \nIsLeftZero.IsLeftZero \nIsLeftZero \nIsLeftZero.IsLeftZero \nIsLeftZero \nIsLeftZero.IsLeftZero \nIsLeftZero \nIsLeftZero.IsLeftZero \nIsLeftZero \nIsLeftZero.IsLeftZero \nIsLeftZero \nIsLeftZero.IsLeftZero \nIsLeftZero \nIsLeftZero.IsLeftZero \nIsLeftZero \nIsLeftZero.IsLeftZero \nIsLeftZero"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#Invoke","title":"IsLeftZero.Invoke","content":"IsLeftZero.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#InvokeOnInstance","title":"IsLeftZero.InvokeOnInstance","content":"IsLeftZero.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#IsLeftZero","title":"IsLeftZero.IsLeftZero","content":"IsLeftZero.IsLeftZero \nIsLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#IsLeftZero","title":"IsLeftZero.IsLeftZero","content":"IsLeftZero.IsLeftZero \nIsLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#IsLeftZero","title":"IsLeftZero.IsLeftZero","content":"IsLeftZero.IsLeftZero \nIsLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#IsLeftZero","title":"IsLeftZero.IsLeftZero","content":"IsLeftZero.IsLeftZero \nIsLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#IsLeftZero","title":"IsLeftZero.IsLeftZero","content":"IsLeftZero.IsLeftZero \nIsLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#IsLeftZero","title":"IsLeftZero.IsLeftZero","content":"IsLeftZero.IsLeftZero \nIsLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#IsLeftZero","title":"IsLeftZero.IsLeftZero","content":"IsLeftZero.IsLeftZero \nIsLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#IsLeftZero","title":"IsLeftZero.IsLeftZero","content":"IsLeftZero.IsLeftZero \nIsLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#IsLeftZero","title":"IsLeftZero.IsLeftZero","content":"IsLeftZero.IsLeftZero \nIsLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#IsLeftZero","title":"IsLeftZero.IsLeftZero","content":"IsLeftZero.IsLeftZero \nIsLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#IsLeftZero","title":"IsLeftZero.IsLeftZero","content":"IsLeftZero.IsLeftZero \nIsLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-isleftzero.html#IsLeftZero","title":"IsLeftZero.IsLeftZero","content":"IsLeftZero.IsLeftZero \nIsLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item.html","title":"Item","content":"Item \n \nItem.Invoke \nInvoke \nItem.Item \nItem \nItem.Item \nItem \nItem.Item \nItem \nItem.Item \nItem \nItem.Item \nItem \nItem.Item \nItem \nItem.Item \nItem \nItem.Item \nItem"},{"uri":"/FSharpPlusreference/fsharpplus-control-item.html#Invoke","title":"Item.Invoke","content":"Item.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item.html#Item","title":"Item.Item","content":"Item.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item.html#Item","title":"Item.Item","content":"Item.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item.html#Item","title":"Item.Item","content":"Item.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item.html#Item","title":"Item.Item","content":"Item.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item.html#Item","title":"Item.Item","content":"Item.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item.html#Item","title":"Item.Item","content":"Item.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item.html#Item","title":"Item.Item","content":"Item.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item.html#Item","title":"Item.Item","content":"Item.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item1.html","title":"Item1","content":"Item1 \n \nItem1.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-item1.html#Invoke","title":"Item1.Invoke","content":"Item1.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item2.html","title":"Item2","content":"Item2 \n \nItem2.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-item2.html#Invoke","title":"Item2.Invoke","content":"Item2.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item3.html","title":"Item3","content":"Item3 \n \nItem3.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-item3.html#Invoke","title":"Item3.Invoke","content":"Item3.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item4.html","title":"Item4","content":"Item4 \n \nItem4.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-item4.html#Invoke","title":"Item4.Invoke","content":"Item4.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-item5.html","title":"Item5","content":"Item5 \n \nItem5.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-item5.html#Invoke","title":"Item5.Invoke","content":"Item5.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html","title":"Iterate","content":"Iterate \n \nIterate.Invoke \nInvoke \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate \nIterate.Iterate \nIterate"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Invoke","title":"Iterate.Invoke","content":"Iterate.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterate.html#Iterate","title":"Iterate.Iterate","content":"Iterate.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterateindexed.html","title":"IterateIndexed","content":"IterateIndexed \n \nIterateIndexed.Invoke \nInvoke \nIterateIndexed.InvokeOnInstance \nInvokeOnInstance \nIterateIndexed.IterateIndexed \nIterateIndexed \nIterateIndexed.IterateIndexed \nIterateIndexed \nIterateIndexed.IterateIndexed \nIterateIndexed \nIterateIndexed.IterateIndexed \nIterateIndexed \nIterateIndexed.IterateIndexed \nIterateIndexed \nIterateIndexed.IterateIndexed \nIterateIndexed"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterateindexed.html#Invoke","title":"IterateIndexed.Invoke","content":"IterateIndexed.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterateindexed.html#InvokeOnInstance","title":"IterateIndexed.InvokeOnInstance","content":"IterateIndexed.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterateindexed.html#IterateIndexed","title":"IterateIndexed.IterateIndexed","content":"IterateIndexed.IterateIndexed \nIterateIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterateindexed.html#IterateIndexed","title":"IterateIndexed.IterateIndexed","content":"IterateIndexed.IterateIndexed \nIterateIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterateindexed.html#IterateIndexed","title":"IterateIndexed.IterateIndexed","content":"IterateIndexed.IterateIndexed \nIterateIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterateindexed.html#IterateIndexed","title":"IterateIndexed.IterateIndexed","content":"IterateIndexed.IterateIndexed \nIterateIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterateindexed.html#IterateIndexed","title":"IterateIndexed.IterateIndexed","content":"IterateIndexed.IterateIndexed \nIterateIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-iterateindexed.html#IterateIndexed","title":"IterateIndexed.IterateIndexed","content":"IterateIndexed.IterateIndexed \nIterateIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html","title":"Join","content":"Join \n \nJoin.Invoke \nInvoke \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin \nJoin.Join \nJoin"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Invoke","title":"Join.Invoke","content":"Join.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-join.html#Join","title":"Join.Join","content":"Join.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-length.html","title":"Length","content":"Length \n \nLength.Invoke \nInvoke \nLength.Length \nLength \nLength.Length \nLength \nLength.Length \nLength \nLength.Length \nLength \nLength.Length \nLength \nLength.Length \nLength"},{"uri":"/FSharpPlusreference/fsharpplus-control-length.html#Invoke","title":"Length.Invoke","content":"Length.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-length.html#Length","title":"Length.Length","content":"Length.Length \nLength \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-length.html#Length","title":"Length.Length","content":"Length.Length \nLength \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-length.html#Length","title":"Length.Length","content":"Length.Length \nLength \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-length.html#Length","title":"Length.Length","content":"Length.Length \nLength \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-length.html#Length","title":"Length.Length","content":"Length.Length \nLength \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-length.html#Length","title":"Length.Length","content":"Length.Length \nLength \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift.html","title":"Lift","content":"Lift \n \nLift.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift.html#Invoke","title":"Lift.Invoke","content":"Lift.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html","title":"Lift2","content":"Lift2 \n \nLift2.Invoke \nInvoke \nLift2.InvokeOnInstance \nInvokeOnInstance \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2 \nLift2.Lift2 \nLift2"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Invoke","title":"Lift2.Invoke","content":"Lift2.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#InvokeOnInstance","title":"Lift2.InvokeOnInstance","content":"Lift2.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-lift2.html#Lift2","title":"Lift2.Lift2","content":"Lift2.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-liftasync.html","title":"LiftAsync","content":"LiftAsync \n \nLiftAsync.Invoke \nInvoke \nLiftAsync.LiftAsync \nLiftAsync \nLiftAsync.LiftAsync \nLiftAsync \nLiftAsync.LiftAsync \nLiftAsync"},{"uri":"/FSharpPlusreference/fsharpplus-control-liftasync.html#Invoke","title":"LiftAsync.Invoke","content":"LiftAsync.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-liftasync.html#LiftAsync","title":"LiftAsync.LiftAsync","content":"LiftAsync.LiftAsync \nLiftAsync \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-liftasync.html#LiftAsync","title":"LiftAsync.LiftAsync","content":"LiftAsync.LiftAsync \nLiftAsync \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-liftasync.html#LiftAsync","title":"LiftAsync.LiftAsync","content":"LiftAsync.LiftAsync \nLiftAsync \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-limit.html","title":"Limit","content":"Limit \n \nLimit.Invoke \nInvoke \nLimit.Limit \nLimit \nLimit.Limit \nLimit \nLimit.Limit \nLimit \nLimit.Limit \nLimit \nLimit.Limit \nLimit \nLimit.Limit \nLimit \nLimit.Limit \nLimit"},{"uri":"/FSharpPlusreference/fsharpplus-control-limit.html#Invoke","title":"Limit.Invoke","content":"Limit.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-limit.html#Limit","title":"Limit.Limit","content":"Limit.Limit \nLimit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-limit.html#Limit","title":"Limit.Limit","content":"Limit.Limit \nLimit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-limit.html#Limit","title":"Limit.Limit","content":"Limit.Limit \nLimit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-limit.html#Limit","title":"Limit.Limit","content":"Limit.Limit \nLimit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-limit.html#Limit","title":"Limit.Limit","content":"Limit.Limit \nLimit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-limit.html#Limit","title":"Limit.Limit","content":"Limit.Limit \nLimit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-limit.html#Limit","title":"Limit.Limit","content":"Limit.Limit \nLimit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-listen.html","title":"Listen","content":"Listen \n \nListen.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-listen.html#Invoke","title":"Listen.Invoke","content":"Listen.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-local.html","title":"Local","content":"Local \n \nLocal.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-local.html#Invoke","title":"Local.Invoke","content":"Local.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html","title":"Map","content":"Map \n \nMap.Invoke \nInvoke \nMap.InvokeOnInstance \nInvokeOnInstance \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap \nMap.Map \nMap"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Invoke","title":"Map.Invoke","content":"Map.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#InvokeOnInstance","title":"Map.InvokeOnInstance","content":"Map.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-map.html#Map","title":"Map.Map","content":"Map.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapfirst.html","title":"MapFirst","content":"MapFirst \n \nMapFirst.First \nFirst \nMapFirst.First \nFirst \nMapFirst.First \nFirst \nMapFirst.First \nFirst \nMapFirst.First \nFirst \nMapFirst.First \nFirst \nMapFirst.First \nFirst \nMapFirst.Invoke \nInvoke \nMapFirst.InvokeOnInstance \nInvokeOnInstance"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapfirst.html#First","title":"MapFirst.First","content":"MapFirst.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapfirst.html#First","title":"MapFirst.First","content":"MapFirst.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapfirst.html#First","title":"MapFirst.First","content":"MapFirst.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapfirst.html#First","title":"MapFirst.First","content":"MapFirst.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapfirst.html#First","title":"MapFirst.First","content":"MapFirst.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapfirst.html#First","title":"MapFirst.First","content":"MapFirst.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapfirst.html#First","title":"MapFirst.First","content":"MapFirst.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapfirst.html#Invoke","title":"MapFirst.Invoke","content":"MapFirst.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapfirst.html#InvokeOnInstance","title":"MapFirst.InvokeOnInstance","content":"MapFirst.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapindexed.html","title":"MapIndexed","content":"MapIndexed \n \nMapIndexed.Invoke \nInvoke \nMapIndexed.InvokeOnInstance \nInvokeOnInstance \nMapIndexed.MapIndexed \nMapIndexed \nMapIndexed.MapIndexed \nMapIndexed \nMapIndexed.MapIndexed \nMapIndexed \nMapIndexed.MapIndexed \nMapIndexed \nMapIndexed.MapIndexed \nMapIndexed \nMapIndexed.MapIndexed \nMapIndexed \nMapIndexed.MapIndexed \nMapIndexed \nMapIndexed.MapIndexed \nMapIndexed"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapindexed.html#Invoke","title":"MapIndexed.Invoke","content":"MapIndexed.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapindexed.html#InvokeOnInstance","title":"MapIndexed.InvokeOnInstance","content":"MapIndexed.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapindexed.html#MapIndexed","title":"MapIndexed.MapIndexed","content":"MapIndexed.MapIndexed \nMapIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapindexed.html#MapIndexed","title":"MapIndexed.MapIndexed","content":"MapIndexed.MapIndexed \nMapIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapindexed.html#MapIndexed","title":"MapIndexed.MapIndexed","content":"MapIndexed.MapIndexed \nMapIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapindexed.html#MapIndexed","title":"MapIndexed.MapIndexed","content":"MapIndexed.MapIndexed \nMapIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapindexed.html#MapIndexed","title":"MapIndexed.MapIndexed","content":"MapIndexed.MapIndexed \nMapIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapindexed.html#MapIndexed","title":"MapIndexed.MapIndexed","content":"MapIndexed.MapIndexed \nMapIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapindexed.html#MapIndexed","title":"MapIndexed.MapIndexed","content":"MapIndexed.MapIndexed \nMapIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapindexed.html#MapIndexed","title":"MapIndexed.MapIndexed","content":"MapIndexed.MapIndexed \nMapIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem1.html","title":"MapItem1","content":"MapItem1 \n \nMapItem1.Invoke \nInvoke \nMapItem1.MapItem1 \nMapItem1 \nMapItem1.MapItem1 \nMapItem1 \nMapItem1.MapItem1 \nMapItem1 \nMapItem1.MapItem1 \nMapItem1 \nMapItem1.MapItem1 \nMapItem1 \nMapItem1.MapItem1 \nMapItem1 \nMapItem1.MapItem1 \nMapItem1 \nMapItem1.MapItem1 \nMapItem1"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem1.html#Invoke","title":"MapItem1.Invoke","content":"MapItem1.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem1.html#MapItem1","title":"MapItem1.MapItem1","content":"MapItem1.MapItem1 \nMapItem1 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem1.html#MapItem1","title":"MapItem1.MapItem1","content":"MapItem1.MapItem1 \nMapItem1 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem1.html#MapItem1","title":"MapItem1.MapItem1","content":"MapItem1.MapItem1 \nMapItem1 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem1.html#MapItem1","title":"MapItem1.MapItem1","content":"MapItem1.MapItem1 \nMapItem1 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem1.html#MapItem1","title":"MapItem1.MapItem1","content":"MapItem1.MapItem1 \nMapItem1 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem1.html#MapItem1","title":"MapItem1.MapItem1","content":"MapItem1.MapItem1 \nMapItem1 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem1.html#MapItem1","title":"MapItem1.MapItem1","content":"MapItem1.MapItem1 \nMapItem1 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem1.html#MapItem1","title":"MapItem1.MapItem1","content":"MapItem1.MapItem1 \nMapItem1 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem2.html","title":"MapItem2","content":"MapItem2 \n \nMapItem2.Invoke \nInvoke \nMapItem2.MapItem2 \nMapItem2 \nMapItem2.MapItem2 \nMapItem2 \nMapItem2.MapItem2 \nMapItem2 \nMapItem2.MapItem2 \nMapItem2 \nMapItem2.MapItem2 \nMapItem2 \nMapItem2.MapItem2 \nMapItem2 \nMapItem2.MapItem2 \nMapItem2 \nMapItem2.MapItem2 \nMapItem2"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem2.html#Invoke","title":"MapItem2.Invoke","content":"MapItem2.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem2.html#MapItem2","title":"MapItem2.MapItem2","content":"MapItem2.MapItem2 \nMapItem2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem2.html#MapItem2","title":"MapItem2.MapItem2","content":"MapItem2.MapItem2 \nMapItem2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem2.html#MapItem2","title":"MapItem2.MapItem2","content":"MapItem2.MapItem2 \nMapItem2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem2.html#MapItem2","title":"MapItem2.MapItem2","content":"MapItem2.MapItem2 \nMapItem2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem2.html#MapItem2","title":"MapItem2.MapItem2","content":"MapItem2.MapItem2 \nMapItem2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem2.html#MapItem2","title":"MapItem2.MapItem2","content":"MapItem2.MapItem2 \nMapItem2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem2.html#MapItem2","title":"MapItem2.MapItem2","content":"MapItem2.MapItem2 \nMapItem2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem2.html#MapItem2","title":"MapItem2.MapItem2","content":"MapItem2.MapItem2 \nMapItem2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem3.html","title":"MapItem3","content":"MapItem3 \n \nMapItem3.Invoke \nInvoke \nMapItem3.MapItem3 \nMapItem3 \nMapItem3.MapItem3 \nMapItem3 \nMapItem3.MapItem3 \nMapItem3 \nMapItem3.MapItem3 \nMapItem3 \nMapItem3.MapItem3 \nMapItem3 \nMapItem3.MapItem3 \nMapItem3 \nMapItem3.MapItem3 \nMapItem3"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem3.html#Invoke","title":"MapItem3.Invoke","content":"MapItem3.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem3.html#MapItem3","title":"MapItem3.MapItem3","content":"MapItem3.MapItem3 \nMapItem3 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem3.html#MapItem3","title":"MapItem3.MapItem3","content":"MapItem3.MapItem3 \nMapItem3 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem3.html#MapItem3","title":"MapItem3.MapItem3","content":"MapItem3.MapItem3 \nMapItem3 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem3.html#MapItem3","title":"MapItem3.MapItem3","content":"MapItem3.MapItem3 \nMapItem3 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem3.html#MapItem3","title":"MapItem3.MapItem3","content":"MapItem3.MapItem3 \nMapItem3 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem3.html#MapItem3","title":"MapItem3.MapItem3","content":"MapItem3.MapItem3 \nMapItem3 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem3.html#MapItem3","title":"MapItem3.MapItem3","content":"MapItem3.MapItem3 \nMapItem3 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem4.html","title":"MapItem4","content":"MapItem4 \n \nMapItem4.Invoke \nInvoke \nMapItem4.MapItem4 \nMapItem4 \nMapItem4.MapItem4 \nMapItem4 \nMapItem4.MapItem4 \nMapItem4 \nMapItem4.MapItem4 \nMapItem4 \nMapItem4.MapItem4 \nMapItem4 \nMapItem4.MapItem4 \nMapItem4"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem4.html#Invoke","title":"MapItem4.Invoke","content":"MapItem4.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem4.html#MapItem4","title":"MapItem4.MapItem4","content":"MapItem4.MapItem4 \nMapItem4 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem4.html#MapItem4","title":"MapItem4.MapItem4","content":"MapItem4.MapItem4 \nMapItem4 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem4.html#MapItem4","title":"MapItem4.MapItem4","content":"MapItem4.MapItem4 \nMapItem4 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem4.html#MapItem4","title":"MapItem4.MapItem4","content":"MapItem4.MapItem4 \nMapItem4 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem4.html#MapItem4","title":"MapItem4.MapItem4","content":"MapItem4.MapItem4 \nMapItem4 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem4.html#MapItem4","title":"MapItem4.MapItem4","content":"MapItem4.MapItem4 \nMapItem4 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem5.html","title":"MapItem5","content":"MapItem5 \n \nMapItem5.Invoke \nInvoke \nMapItem5.MapItem5 \nMapItem5 \nMapItem5.MapItem5 \nMapItem5 \nMapItem5.MapItem5 \nMapItem5 \nMapItem5.MapItem5 \nMapItem5 \nMapItem5.MapItem5 \nMapItem5"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem5.html#Invoke","title":"MapItem5.Invoke","content":"MapItem5.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem5.html#MapItem5","title":"MapItem5.MapItem5","content":"MapItem5.MapItem5 \nMapItem5 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem5.html#MapItem5","title":"MapItem5.MapItem5","content":"MapItem5.MapItem5 \nMapItem5 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem5.html#MapItem5","title":"MapItem5.MapItem5","content":"MapItem5.MapItem5 \nMapItem5 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem5.html#MapItem5","title":"MapItem5.MapItem5","content":"MapItem5.MapItem5 \nMapItem5 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-mapitem5.html#MapItem5","title":"MapItem5.MapItem5","content":"MapItem5.MapItem5 \nMapItem5 \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-max.html","title":"Max","content":"Max \n \nMax.Invoke \nInvoke \nMax.Max \nMax \nMax.Max \nMax \nMax.Max \nMax \nMax.Max \nMax \nMax.Max \nMax \nMax.Max \nMax"},{"uri":"/FSharpPlusreference/fsharpplus-control-max.html#Invoke","title":"Max.Invoke","content":"Max.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-max.html#Max","title":"Max.Max","content":"Max.Max \nMax \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-max.html#Max","title":"Max.Max","content":"Max.Max \nMax \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-max.html#Max","title":"Max.Max","content":"Max.Max \nMax \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-max.html#Max","title":"Max.Max","content":"Max.Max \nMax \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-max.html#Max","title":"Max.Max","content":"Max.Max \nMax \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-max.html#Max","title":"Max.Max","content":"Max.Max \nMax \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxby.html","title":"MaxBy","content":"MaxBy \n \nMaxBy.Invoke \nInvoke \nMaxBy.MaxBy \nMaxBy \nMaxBy.MaxBy \nMaxBy \nMaxBy.MaxBy \nMaxBy \nMaxBy.MaxBy \nMaxBy \nMaxBy.MaxBy \nMaxBy \nMaxBy.MaxBy \nMaxBy"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxby.html#Invoke","title":"MaxBy.Invoke","content":"MaxBy.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxby.html#MaxBy","title":"MaxBy.MaxBy","content":"MaxBy.MaxBy \nMaxBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxby.html#MaxBy","title":"MaxBy.MaxBy","content":"MaxBy.MaxBy \nMaxBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxby.html#MaxBy","title":"MaxBy.MaxBy","content":"MaxBy.MaxBy \nMaxBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxby.html#MaxBy","title":"MaxBy.MaxBy","content":"MaxBy.MaxBy \nMaxBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxby.html#MaxBy","title":"MaxBy.MaxBy","content":"MaxBy.MaxBy \nMaxBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxby.html#MaxBy","title":"MaxBy.MaxBy","content":"MaxBy.MaxBy \nMaxBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html","title":"MaxValue","content":"MaxValue \n \nMaxValue.Invoke \nInvoke \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue \nMaxValue.MaxValue \nMaxValue"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#Invoke","title":"MaxValue.Invoke","content":"MaxValue.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-maxvalue.html#MaxValue","title":"MaxValue.MaxValue","content":"MaxValue.MaxValue \nMaxValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-min.html","title":"Min","content":"Min \n \nMin.Invoke \nInvoke \nMin.Min \nMin \nMin.Min \nMin \nMin.Min \nMin \nMin.Min \nMin \nMin.Min \nMin \nMin.Min \nMin"},{"uri":"/FSharpPlusreference/fsharpplus-control-min.html#Invoke","title":"Min.Invoke","content":"Min.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-min.html#Min","title":"Min.Min","content":"Min.Min \nMin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-min.html#Min","title":"Min.Min","content":"Min.Min \nMin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-min.html#Min","title":"Min.Min","content":"Min.Min \nMin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-min.html#Min","title":"Min.Min","content":"Min.Min \nMin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-min.html#Min","title":"Min.Min","content":"Min.Min \nMin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-min.html#Min","title":"Min.Min","content":"Min.Min \nMin \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minby.html","title":"MinBy","content":"MinBy \n \nMinBy.Invoke \nInvoke \nMinBy.MinBy \nMinBy \nMinBy.MinBy \nMinBy \nMinBy.MinBy \nMinBy \nMinBy.MinBy \nMinBy \nMinBy.MinBy \nMinBy \nMinBy.MinBy \nMinBy"},{"uri":"/FSharpPlusreference/fsharpplus-control-minby.html#Invoke","title":"MinBy.Invoke","content":"MinBy.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minby.html#MinBy","title":"MinBy.MinBy","content":"MinBy.MinBy \nMinBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minby.html#MinBy","title":"MinBy.MinBy","content":"MinBy.MinBy \nMinBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minby.html#MinBy","title":"MinBy.MinBy","content":"MinBy.MinBy \nMinBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minby.html#MinBy","title":"MinBy.MinBy","content":"MinBy.MinBy \nMinBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minby.html#MinBy","title":"MinBy.MinBy","content":"MinBy.MinBy \nMinBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minby.html#MinBy","title":"MinBy.MinBy","content":"MinBy.MinBy \nMinBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html","title":"MinValue","content":"MinValue \n \nMinValue.Invoke \nInvoke \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue \nMinValue.MinValue \nMinValue"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#Invoke","title":"MinValue.Invoke","content":"MinValue.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-minvalue.html#MinValue","title":"MinValue.MinValue","content":"MinValue.MinValue \nMinValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-nth.html","title":"Nth","content":"Nth \n \nNth.Invoke \nInvoke \nNth.Nth \nNth \nNth.Nth \nNth \nNth.Nth \nNth \nNth.Nth \nNth \nNth.Nth \nNth \nNth.Nth \nNth \nNth.Nth \nNth \nNth.Nth \nNth \nNth.Nth \nNth"},{"uri":"/FSharpPlusreference/fsharpplus-control-nth.html#Invoke","title":"Nth.Invoke","content":"Nth.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-nth.html#Nth","title":"Nth.Nth","content":"Nth.Nth \nNth \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-nth.html#Nth","title":"Nth.Nth","content":"Nth.Nth \nNth \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-nth.html#Nth","title":"Nth.Nth","content":"Nth.Nth \nNth \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-nth.html#Nth","title":"Nth.Nth","content":"Nth.Nth \nNth \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-nth.html#Nth","title":"Nth.Nth","content":"Nth.Nth \nNth \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-nth.html#Nth","title":"Nth.Nth","content":"Nth.Nth \nNth \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-nth.html#Nth","title":"Nth.Nth","content":"Nth.Nth \nNth \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-nth.html#Nth","title":"Nth.Nth","content":"Nth.Nth \nNth \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-nth.html#Nth","title":"Nth.Nth","content":"Nth.Nth \nNth \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofbytes.html","title":"OfBytes","content":"OfBytes \n \nOfBytes.Invoke \nInvoke \nOfBytes.OfBytes \nOfBytes \nOfBytes.OfBytes \nOfBytes \nOfBytes.OfBytes \nOfBytes \nOfBytes.OfBytes \nOfBytes \nOfBytes.OfBytes \nOfBytes \nOfBytes.OfBytes \nOfBytes \nOfBytes.OfBytes \nOfBytes \nOfBytes.OfBytes \nOfBytes \nOfBytes.OfBytes \nOfBytes \nOfBytes.OfBytes \nOfBytes \nOfBytes.OfBytes \nOfBytes"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofbytes.html#Invoke","title":"OfBytes.Invoke","content":"OfBytes.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofbytes.html#OfBytes","title":"OfBytes.OfBytes","content":"OfBytes.OfBytes \nOfBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofbytes.html#OfBytes","title":"OfBytes.OfBytes","content":"OfBytes.OfBytes \nOfBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofbytes.html#OfBytes","title":"OfBytes.OfBytes","content":"OfBytes.OfBytes \nOfBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofbytes.html#OfBytes","title":"OfBytes.OfBytes","content":"OfBytes.OfBytes \nOfBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofbytes.html#OfBytes","title":"OfBytes.OfBytes","content":"OfBytes.OfBytes \nOfBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofbytes.html#OfBytes","title":"OfBytes.OfBytes","content":"OfBytes.OfBytes \nOfBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofbytes.html#OfBytes","title":"OfBytes.OfBytes","content":"OfBytes.OfBytes \nOfBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofbytes.html#OfBytes","title":"OfBytes.OfBytes","content":"OfBytes.OfBytes \nOfBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofbytes.html#OfBytes","title":"OfBytes.OfBytes","content":"OfBytes.OfBytes \nOfBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofbytes.html#OfBytes","title":"OfBytes.OfBytes","content":"OfBytes.OfBytes \nOfBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofbytes.html#OfBytes","title":"OfBytes.OfBytes","content":"OfBytes.OfBytes \nOfBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html","title":"OfList","content":"OfList \n \nOfList.Invoke \nInvoke \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList \nOfList.OfList \nOfList"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#Invoke","title":"OfList.Invoke","content":"OfList.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-oflist.html#OfList","title":"OfList.OfList","content":"OfList.OfList \nOfList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html","title":"OfSeq","content":"OfSeq \n \nOfSeq.Invoke \nInvoke \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq \nOfSeq.OfSeq \nOfSeq"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#Invoke","title":"OfSeq.Invoke","content":"OfSeq.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-ofseq.html#OfSeq","title":"OfSeq.OfSeq","content":"OfSeq.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-one.html","title":"One","content":"One \n \nOne.Invoke \nInvoke \nOne.One \nOne \nOne.One \nOne \nOne.One \nOne"},{"uri":"/FSharpPlusreference/fsharpplus-control-one.html#Invoke","title":"One.Invoke","content":"One.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-one.html#One","title":"One.One","content":"One.One \nOne \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-one.html#One","title":"One.One","content":"One.One \nOne \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-one.html#One","title":"One.One","content":"One.One \nOne \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-parse.html","title":"Parse","content":"Parse \n \nParse.Invoke \nInvoke \nParse.Parse \nParse \nParse.Parse \nParse \nParse.Parse \nParse \nParse.Parse \nParse \nParse.Parse \nParse \nParse.Parse \nParse \nParse.Parse \nParse"},{"uri":"/FSharpPlusreference/fsharpplus-control-parse.html#Invoke","title":"Parse.Invoke","content":"Parse.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-parse.html#Parse","title":"Parse.Parse","content":"Parse.Parse \nParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-parse.html#Parse","title":"Parse.Parse","content":"Parse.Parse \nParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-parse.html#Parse","title":"Parse.Parse","content":"Parse.Parse \nParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-parse.html#Parse","title":"Parse.Parse","content":"Parse.Parse \nParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-parse.html#Parse","title":"Parse.Parse","content":"Parse.Parse \nParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-parse.html#Parse","title":"Parse.Parse","content":"Parse.Parse \nParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-parse.html#Parse","title":"Parse.Parse","content":"Parse.Parse \nParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pass.html","title":"Pass","content":"Pass \n \nPass.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-pass.html#Invoke","title":"Pass.Invoke","content":"Pass.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pi.html","title":"Pi","content":"Pi \n \nPi.Invoke \nInvoke \nPi.Pi \nPi \nPi.Pi \nPi \nPi.Pi \nPi \nPi.Pi \nPi \nPi.Pi \nPi \nPi.Pi \nPi \nPi.Pi \nPi"},{"uri":"/FSharpPlusreference/fsharpplus-control-pi.html#Invoke","title":"Pi.Invoke","content":"Pi.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pi.html#Pi","title":"Pi.Pi","content":"Pi.Pi \nPi \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pi.html#Pi","title":"Pi.Pi","content":"Pi.Pi \nPi \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pi.html#Pi","title":"Pi.Pi","content":"Pi.Pi \nPi \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pi.html#Pi","title":"Pi.Pi","content":"Pi.Pi \nPi \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pi.html#Pi","title":"Pi.Pi","content":"Pi.Pi \nPi \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pi.html#Pi","title":"Pi.Pi","content":"Pi.Pi \nPi \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pi.html#Pi","title":"Pi.Pi","content":"Pi.Pi \nPi \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pick.html","title":"Pick","content":"Pick \n \nPick.Invoke \nInvoke \nPick.Pick \nPick \nPick.Pick \nPick \nPick.Pick \nPick \nPick.Pick \nPick \nPick.Pick \nPick \nPick.Pick \nPick"},{"uri":"/FSharpPlusreference/fsharpplus-control-pick.html#Invoke","title":"Pick.Invoke","content":"Pick.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pick.html#Pick","title":"Pick.Pick","content":"Pick.Pick \nPick \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pick.html#Pick","title":"Pick.Pick","content":"Pick.Pick \nPick \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pick.html#Pick","title":"Pick.Pick","content":"Pick.Pick \nPick \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pick.html#Pick","title":"Pick.Pick","content":"Pick.Pick \nPick \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pick.html#Pick","title":"Pick.Pick","content":"Pick.Pick \nPick \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-pick.html#Pick","title":"Pick.Pick","content":"Pick.Pick \nPick \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html","title":"Plus","content":"Plus \n \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.( + ) \n( + ) \nPlus.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#( + )","title":"Plus.( + )","content":"Plus.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-plus.html#Invoke","title":"Plus.Invoke","content":"Plus.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-put.html","title":"Put","content":"Put \n \nPut.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-put.html#Invoke","title":"Put.Invoke","content":"Put.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-reduce.html","title":"Reduce","content":"Reduce \n \nReduce.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-reduce.html#Invoke","title":"Reduce.Invoke","content":"Reduce.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-replace.html","title":"Replace","content":"Replace \n \nReplace.Invoke \nInvoke \nReplace.Replace \nReplace \nReplace.Replace \nReplace \nReplace.Replace \nReplace \nReplace.Replace \nReplace \nReplace.Replace \nReplace \nReplace.Replace \nReplace"},{"uri":"/FSharpPlusreference/fsharpplus-control-replace.html#Invoke","title":"Replace.Invoke","content":"Replace.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-replace.html#Replace","title":"Replace.Replace","content":"Replace.Replace \nReplace \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-replace.html#Replace","title":"Replace.Replace","content":"Replace.Replace \nReplace \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-replace.html#Replace","title":"Replace.Replace","content":"Replace.Replace \nReplace \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-replace.html#Replace","title":"Replace.Replace","content":"Replace.Replace \nReplace \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-replace.html#Replace","title":"Replace.Replace","content":"Replace.Replace \nReplace \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-replace.html#Replace","title":"Replace.Replace","content":"Replace.Replace \nReplace \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html","title":"Return","content":"Return \n \nReturn.Invoke \nInvoke \nReturn.InvokeOnInstance \nInvokeOnInstance \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn \nReturn.Return \nReturn"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Invoke","title":"Return.Invoke","content":"Return.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#InvokeOnInstance","title":"Return.InvokeOnInstance","content":"Return.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-return.html#Return","title":"Return.Return","content":"Return.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-rev.html","title":"Rev","content":"Rev \n \nRev.Invoke \nInvoke \nRev.InvokeOnInstance \nInvokeOnInstance \nRev.Rev \nRev \nRev.Rev \nRev \nRev.Rev \nRev \nRev.Rev \nRev \nRev.Rev \nRev"},{"uri":"/FSharpPlusreference/fsharpplus-control-rev.html#Invoke","title":"Rev.Invoke","content":"Rev.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-rev.html#InvokeOnInstance","title":"Rev.InvokeOnInstance","content":"Rev.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-rev.html#Rev","title":"Rev.Rev","content":"Rev.Rev \nRev \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-rev.html#Rev","title":"Rev.Rev","content":"Rev.Rev \nRev \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-rev.html#Rev","title":"Rev.Rev","content":"Rev.Rev \nRev \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-rev.html#Rev","title":"Rev.Rev","content":"Rev.Rev \nRev \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-rev.html#Rev","title":"Rev.Rev","content":"Rev.Rev \nRev \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-scan.html","title":"Scan","content":"Scan \n \nScan.Invoke \nInvoke \nScan.Scan \nScan \nScan.Scan \nScan \nScan.Scan \nScan \nScan.Scan \nScan"},{"uri":"/FSharpPlusreference/fsharpplus-control-scan.html#Invoke","title":"Scan.Invoke","content":"Scan.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-scan.html#Scan","title":"Scan.Scan","content":"Scan.Scan \nScan \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-scan.html#Scan","title":"Scan.Scan","content":"Scan.Scan \nScan \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-scan.html#Scan","title":"Scan.Scan","content":"Scan.Scan \nScan \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-scan.html#Scan","title":"Scan.Scan","content":"Scan.Scan \nScan \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html","title":"Sequence","content":"Sequence \n \nSequence.ForInfiniteSequences \nForInfiniteSequences \nSequence.Invoke \nInvoke \nSequence.InvokeOnInstance \nInvokeOnInstance \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence \nSequence.Sequence \nSequence"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#ForInfiniteSequences","title":"Sequence.ForInfiniteSequences","content":"Sequence.ForInfiniteSequences \nForInfiniteSequences \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Invoke","title":"Sequence.Invoke","content":"Sequence.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#InvokeOnInstance","title":"Sequence.InvokeOnInstance","content":"Sequence.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sequence.html#Sequence","title":"Sequence.Sequence","content":"Sequence.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-signum.html","title":"Signum","content":"Signum \n \nSignum.Invoke \nInvoke \nSignum.Signum \nSignum \nSignum.Signum \nSignum \nSignum.Signum \nSignum"},{"uri":"/FSharpPlusreference/fsharpplus-control-signum.html#Invoke","title":"Signum.Invoke","content":"Signum.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-signum.html#Signum","title":"Signum.Signum","content":"Signum.Signum \nSignum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-signum.html#Signum","title":"Signum.Signum","content":"Signum.Signum \nSignum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-signum.html#Signum","title":"Signum.Signum","content":"Signum.Signum \nSignum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-signum'.html","title":"Signum'","content":"Signum' \n \nSignum'.Invoke \nInvoke \nSignum'.Signum \nSignum \nSignum'.Signum \nSignum \nSignum'.Signum \nSignum \nSignum'.Signum \nSignum \nSignum'.Signum \nSignum"},{"uri":"/FSharpPlusreference/fsharpplus-control-signum'.html#Invoke","title":"Signum'.Invoke","content":"Signum'.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-signum'.html#Signum","title":"Signum'.Signum","content":"Signum'.Signum \nSignum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-signum'.html#Signum","title":"Signum'.Signum","content":"Signum'.Signum \nSignum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-signum'.html#Signum","title":"Signum'.Signum","content":"Signum'.Signum \nSignum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-signum'.html#Signum","title":"Signum'.Signum","content":"Signum'.Signum \nSignum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-signum'.html#Signum","title":"Signum'.Signum","content":"Signum'.Signum \nSignum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skip.html","title":"Skip","content":"Skip \n \nSkip.Invoke \nInvoke \nSkip.Skip \nSkip \nSkip.Skip \nSkip \nSkip.Skip \nSkip \nSkip.Skip \nSkip \nSkip.Skip \nSkip \nSkip.Skip \nSkip \nSkip.Skip \nSkip"},{"uri":"/FSharpPlusreference/fsharpplus-control-skip.html#Invoke","title":"Skip.Invoke","content":"Skip.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skip.html#Skip","title":"Skip.Skip","content":"Skip.Skip \nSkip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skip.html#Skip","title":"Skip.Skip","content":"Skip.Skip \nSkip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skip.html#Skip","title":"Skip.Skip","content":"Skip.Skip \nSkip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skip.html#Skip","title":"Skip.Skip","content":"Skip.Skip \nSkip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skip.html#Skip","title":"Skip.Skip","content":"Skip.Skip \nSkip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skip.html#Skip","title":"Skip.Skip","content":"Skip.Skip \nSkip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skip.html#Skip","title":"Skip.Skip","content":"Skip.Skip \nSkip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skipwhile.html","title":"SkipWhile","content":"SkipWhile \n \nSkipWhile.Invoke \nInvoke \nSkipWhile.SkipWhile \nSkipWhile \nSkipWhile.SkipWhile \nSkipWhile \nSkipWhile.SkipWhile \nSkipWhile \nSkipWhile.SkipWhile \nSkipWhile \nSkipWhile.SkipWhile \nSkipWhile \nSkipWhile.SkipWhile \nSkipWhile"},{"uri":"/FSharpPlusreference/fsharpplus-control-skipwhile.html#Invoke","title":"SkipWhile.Invoke","content":"SkipWhile.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skipwhile.html#SkipWhile","title":"SkipWhile.SkipWhile","content":"SkipWhile.SkipWhile \nSkipWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skipwhile.html#SkipWhile","title":"SkipWhile.SkipWhile","content":"SkipWhile.SkipWhile \nSkipWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skipwhile.html#SkipWhile","title":"SkipWhile.SkipWhile","content":"SkipWhile.SkipWhile \nSkipWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skipwhile.html#SkipWhile","title":"SkipWhile.SkipWhile","content":"SkipWhile.SkipWhile \nSkipWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skipwhile.html#SkipWhile","title":"SkipWhile.SkipWhile","content":"SkipWhile.SkipWhile \nSkipWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-skipwhile.html#SkipWhile","title":"SkipWhile.SkipWhile","content":"SkipWhile.SkipWhile \nSkipWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sort.html","title":"Sort","content":"Sort \n \nSort.Invoke \nInvoke \nSort.InvokeOnInstance \nInvokeOnInstance \nSort.Sort \nSort \nSort.Sort \nSort \nSort.Sort \nSort \nSort.Sort \nSort \nSort.Sort \nSort"},{"uri":"/FSharpPlusreference/fsharpplus-control-sort.html#Invoke","title":"Sort.Invoke","content":"Sort.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sort.html#InvokeOnInstance","title":"Sort.InvokeOnInstance","content":"Sort.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sort.html#Sort","title":"Sort.Sort","content":"Sort.Sort \nSort \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sort.html#Sort","title":"Sort.Sort","content":"Sort.Sort \nSort \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sort.html#Sort","title":"Sort.Sort","content":"Sort.Sort \nSort \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sort.html#Sort","title":"Sort.Sort","content":"Sort.Sort \nSort \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sort.html#Sort","title":"Sort.Sort","content":"Sort.Sort \nSort \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortby.html","title":"SortBy","content":"SortBy \n \nSortBy.Invoke \nInvoke \nSortBy.InvokeOnInstance \nInvokeOnInstance \nSortBy.SortBy \nSortBy \nSortBy.SortBy \nSortBy \nSortBy.SortBy \nSortBy \nSortBy.SortBy \nSortBy \nSortBy.SortBy \nSortBy"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortby.html#Invoke","title":"SortBy.Invoke","content":"SortBy.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortby.html#InvokeOnInstance","title":"SortBy.InvokeOnInstance","content":"SortBy.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortby.html#SortBy","title":"SortBy.SortBy","content":"SortBy.SortBy \nSortBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortby.html#SortBy","title":"SortBy.SortBy","content":"SortBy.SortBy \nSortBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortby.html#SortBy","title":"SortBy.SortBy","content":"SortBy.SortBy \nSortBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortby.html#SortBy","title":"SortBy.SortBy","content":"SortBy.SortBy \nSortBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortby.html#SortBy","title":"SortBy.SortBy","content":"SortBy.SortBy \nSortBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortbydescending.html","title":"SortByDescending","content":"SortByDescending \n \nSortByDescending.Invoke \nInvoke \nSortByDescending.InvokeOnInstance \nInvokeOnInstance \nSortByDescending.SortByDescending \nSortByDescending \nSortByDescending.SortByDescending \nSortByDescending \nSortByDescending.SortByDescending \nSortByDescending \nSortByDescending.SortByDescending \nSortByDescending \nSortByDescending.SortByDescending \nSortByDescending"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortbydescending.html#Invoke","title":"SortByDescending.Invoke","content":"SortByDescending.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortbydescending.html#InvokeOnInstance","title":"SortByDescending.InvokeOnInstance","content":"SortByDescending.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortbydescending.html#SortByDescending","title":"SortByDescending.SortByDescending","content":"SortByDescending.SortByDescending \nSortByDescending \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortbydescending.html#SortByDescending","title":"SortByDescending.SortByDescending","content":"SortByDescending.SortByDescending \nSortByDescending \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortbydescending.html#SortByDescending","title":"SortByDescending.SortByDescending","content":"SortByDescending.SortByDescending \nSortByDescending \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortbydescending.html#SortByDescending","title":"SortByDescending.SortByDescending","content":"SortByDescending.SortByDescending \nSortByDescending \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sortbydescending.html#SortByDescending","title":"SortByDescending.SortByDescending","content":"SortByDescending.SortByDescending \nSortByDescending \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html","title":"Split","content":"Split \n \nSplit.Invoke \nInvoke \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit \nSplit.Split \nSplit"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Invoke","title":"Split.Invoke","content":"Split.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-split.html#Split","title":"Split.Split","content":"Split.Split \nSplit \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sqrt.html","title":"Sqrt","content":"Sqrt \n \nSqrt.Invoke \nInvoke \nSqrt.Sqrt \nSqrt \nSqrt.Sqrt \nSqrt \nSqrt.Sqrt \nSqrt \nSqrt.Sqrt \nSqrt \nSqrt.Sqrt \nSqrt \nSqrt.Sqrt \nSqrt"},{"uri":"/FSharpPlusreference/fsharpplus-control-sqrt.html#Invoke","title":"Sqrt.Invoke","content":"Sqrt.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sqrt.html#Sqrt","title":"Sqrt.Sqrt","content":"Sqrt.Sqrt \nSqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sqrt.html#Sqrt","title":"Sqrt.Sqrt","content":"Sqrt.Sqrt \nSqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sqrt.html#Sqrt","title":"Sqrt.Sqrt","content":"Sqrt.Sqrt \nSqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sqrt.html#Sqrt","title":"Sqrt.Sqrt","content":"Sqrt.Sqrt \nSqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sqrt.html#Sqrt","title":"Sqrt.Sqrt","content":"Sqrt.Sqrt \nSqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sqrt.html#Sqrt","title":"Sqrt.Sqrt","content":"Sqrt.Sqrt \nSqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-subtract.html","title":"Subtract","content":"Subtract \n \nSubtract.Invoke \nInvoke \nSubtract.Subtract \nSubtract \nSubtract.Subtract \nSubtract \nSubtract.Subtract \nSubtract \nSubtract.Subtract \nSubtract \nSubtract.Subtract \nSubtract \nSubtract.Subtract \nSubtract \nSubtract.Subtract \nSubtract"},{"uri":"/FSharpPlusreference/fsharpplus-control-subtract.html#Invoke","title":"Subtract.Invoke","content":"Subtract.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-subtract.html#Subtract","title":"Subtract.Subtract","content":"Subtract.Subtract \nSubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-subtract.html#Subtract","title":"Subtract.Subtract","content":"Subtract.Subtract \nSubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-subtract.html#Subtract","title":"Subtract.Subtract","content":"Subtract.Subtract \nSubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-subtract.html#Subtract","title":"Subtract.Subtract","content":"Subtract.Subtract \nSubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-subtract.html#Subtract","title":"Subtract.Subtract","content":"Subtract.Subtract \nSubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-subtract.html#Subtract","title":"Subtract.Subtract","content":"Subtract.Subtract \nSubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-subtract.html#Subtract","title":"Subtract.Subtract","content":"Subtract.Subtract \nSubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html","title":"Sum","content":"Sum \n \nSum.Invoke \nInvoke \nSum.InvokeOnInstance \nInvokeOnInstance \nSum.Sum \nSum \nSum.Sum \nSum \nSum.Sum \nSum \nSum.Sum \nSum \nSum.Sum \nSum \nSum.Sum \nSum \nSum.Sum \nSum \nSum.Sum \nSum \nSum.Sum \nSum \nSum.Sum \nSum \nSum.Sum \nSum \nSum.Sum \nSum \nSum.Sum \nSum"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Invoke","title":"Sum.Invoke","content":"Sum.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#InvokeOnInstance","title":"Sum.InvokeOnInstance","content":"Sum.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Sum","title":"Sum.Sum","content":"Sum.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Sum","title":"Sum.Sum","content":"Sum.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Sum","title":"Sum.Sum","content":"Sum.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Sum","title":"Sum.Sum","content":"Sum.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Sum","title":"Sum.Sum","content":"Sum.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Sum","title":"Sum.Sum","content":"Sum.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Sum","title":"Sum.Sum","content":"Sum.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Sum","title":"Sum.Sum","content":"Sum.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Sum","title":"Sum.Sum","content":"Sum.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Sum","title":"Sum.Sum","content":"Sum.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Sum","title":"Sum.Sum","content":"Sum.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Sum","title":"Sum.Sum","content":"Sum.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-sum.html#Sum","title":"Sum.Sum","content":"Sum.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-take.html","title":"Take","content":"Take \n \nTake.Invoke \nInvoke \nTake.Take \nTake \nTake.Take \nTake \nTake.Take \nTake \nTake.Take \nTake \nTake.Take \nTake \nTake.Take \nTake \nTake.Take \nTake"},{"uri":"/FSharpPlusreference/fsharpplus-control-take.html#Invoke","title":"Take.Invoke","content":"Take.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-take.html#Take","title":"Take.Take","content":"Take.Take \nTake \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-take.html#Take","title":"Take.Take","content":"Take.Take \nTake \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-take.html#Take","title":"Take.Take","content":"Take.Take \nTake \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-take.html#Take","title":"Take.Take","content":"Take.Take \nTake \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-take.html#Take","title":"Take.Take","content":"Take.Take \nTake \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-take.html#Take","title":"Take.Take","content":"Take.Take \nTake \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-take.html#Take","title":"Take.Take","content":"Take.Take \nTake \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-takewhile.html","title":"TakeWhile","content":"TakeWhile \n \nTakeWhile.Invoke \nInvoke \nTakeWhile.TakeWhile \nTakeWhile \nTakeWhile.TakeWhile \nTakeWhile \nTakeWhile.TakeWhile \nTakeWhile \nTakeWhile.TakeWhile \nTakeWhile \nTakeWhile.TakeWhile \nTakeWhile \nTakeWhile.TakeWhile \nTakeWhile"},{"uri":"/FSharpPlusreference/fsharpplus-control-takewhile.html#Invoke","title":"TakeWhile.Invoke","content":"TakeWhile.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-takewhile.html#TakeWhile","title":"TakeWhile.TakeWhile","content":"TakeWhile.TakeWhile \nTakeWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-takewhile.html#TakeWhile","title":"TakeWhile.TakeWhile","content":"TakeWhile.TakeWhile \nTakeWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-takewhile.html#TakeWhile","title":"TakeWhile.TakeWhile","content":"TakeWhile.TakeWhile \nTakeWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-takewhile.html#TakeWhile","title":"TakeWhile.TakeWhile","content":"TakeWhile.TakeWhile \nTakeWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-takewhile.html#TakeWhile","title":"TakeWhile.TakeWhile","content":"TakeWhile.TakeWhile \nTakeWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-takewhile.html#TakeWhile","title":"TakeWhile.TakeWhile","content":"TakeWhile.TakeWhile \nTakeWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tell.html","title":"Tell","content":"Tell \n \nTell.Invoke \nInvoke"},{"uri":"/FSharpPlusreference/fsharpplus-control-tell.html#Invoke","title":"Tell.Invoke","content":"Tell.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-throw.html","title":"Throw","content":"Throw \n \nThrow.Invoke \nInvoke \nThrow.Throw \nThrow \nThrow.Throw \nThrow \nThrow.Throw \nThrow \nThrow.Throw \nThrow"},{"uri":"/FSharpPlusreference/fsharpplus-control-throw.html#Invoke","title":"Throw.Invoke","content":"Throw.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-throw.html#Throw","title":"Throw.Throw","content":"Throw.Throw \nThrow \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-throw.html#Throw","title":"Throw.Throw","content":"Throw.Throw \nThrow \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-throw.html#Throw","title":"Throw.Throw","content":"Throw.Throw \nThrow \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-throw.html#Throw","title":"Throw.Throw","content":"Throw.Throw \nThrow \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toarray.html","title":"ToArray","content":"ToArray \n \nToArray.Invoke \nInvoke \nToArray.ToArray \nToArray \nToArray.ToArray \nToArray \nToArray.ToArray \nToArray \nToArray.ToArray \nToArray \nToArray.ToArray \nToArray \nToArray.ToArray \nToArray \nToArray.ToArray \nToArray \nToArray.ToArray \nToArray \nToArray.ToArray \nToArray"},{"uri":"/FSharpPlusreference/fsharpplus-control-toarray.html#Invoke","title":"ToArray.Invoke","content":"ToArray.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toarray.html#ToArray","title":"ToArray.ToArray","content":"ToArray.ToArray \nToArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toarray.html#ToArray","title":"ToArray.ToArray","content":"ToArray.ToArray \nToArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toarray.html#ToArray","title":"ToArray.ToArray","content":"ToArray.ToArray \nToArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toarray.html#ToArray","title":"ToArray.ToArray","content":"ToArray.ToArray \nToArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toarray.html#ToArray","title":"ToArray.ToArray","content":"ToArray.ToArray \nToArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toarray.html#ToArray","title":"ToArray.ToArray","content":"ToArray.ToArray \nToArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toarray.html#ToArray","title":"ToArray.ToArray","content":"ToArray.ToArray \nToArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toarray.html#ToArray","title":"ToArray.ToArray","content":"ToArray.ToArray \nToArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toarray.html#ToArray","title":"ToArray.ToArray","content":"ToArray.ToArray \nToArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobigint.html","title":"ToBigInt","content":"ToBigInt \n \nToBigInt.Invoke \nInvoke \nToBigInt.ToBigInt \nToBigInt \nToBigInt.ToBigInt \nToBigInt \nToBigInt.ToBigInt \nToBigInt \nToBigInt.ToBigInt \nToBigInt \nToBigInt.ToBigInt \nToBigInt \nToBigInt.ToBigInt \nToBigInt \nToBigInt.ToBigInt \nToBigInt \nToBigInt.ToBigInt \nToBigInt \nToBigInt.ToBigInt \nToBigInt \nToBigInt.ToBigInt \nToBigInt \nToBigInt.ToBigInt \nToBigInt"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobigint.html#Invoke","title":"ToBigInt.Invoke","content":"ToBigInt.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobigint.html#ToBigInt","title":"ToBigInt.ToBigInt","content":"ToBigInt.ToBigInt \nToBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobigint.html#ToBigInt","title":"ToBigInt.ToBigInt","content":"ToBigInt.ToBigInt \nToBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobigint.html#ToBigInt","title":"ToBigInt.ToBigInt","content":"ToBigInt.ToBigInt \nToBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobigint.html#ToBigInt","title":"ToBigInt.ToBigInt","content":"ToBigInt.ToBigInt \nToBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobigint.html#ToBigInt","title":"ToBigInt.ToBigInt","content":"ToBigInt.ToBigInt \nToBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobigint.html#ToBigInt","title":"ToBigInt.ToBigInt","content":"ToBigInt.ToBigInt \nToBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobigint.html#ToBigInt","title":"ToBigInt.ToBigInt","content":"ToBigInt.ToBigInt \nToBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobigint.html#ToBigInt","title":"ToBigInt.ToBigInt","content":"ToBigInt.ToBigInt \nToBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobigint.html#ToBigInt","title":"ToBigInt.ToBigInt","content":"ToBigInt.ToBigInt \nToBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobigint.html#ToBigInt","title":"ToBigInt.ToBigInt","content":"ToBigInt.ToBigInt \nToBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobigint.html#ToBigInt","title":"ToBigInt.ToBigInt","content":"ToBigInt.ToBigInt \nToBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobytes.html","title":"ToBytes","content":"ToBytes \n \nToBytes.Invoke \nInvoke \nToBytes.ToBytes \nToBytes \nToBytes.ToBytes \nToBytes \nToBytes.ToBytes \nToBytes \nToBytes.ToBytes \nToBytes \nToBytes.ToBytes \nToBytes \nToBytes.ToBytes \nToBytes \nToBytes.ToBytes \nToBytes \nToBytes.ToBytes \nToBytes \nToBytes.ToBytes \nToBytes \nToBytes.ToBytes \nToBytes \nToBytes.ToBytes \nToBytes"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobytes.html#Invoke","title":"ToBytes.Invoke","content":"ToBytes.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobytes.html#ToBytes","title":"ToBytes.ToBytes","content":"ToBytes.ToBytes \nToBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobytes.html#ToBytes","title":"ToBytes.ToBytes","content":"ToBytes.ToBytes \nToBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobytes.html#ToBytes","title":"ToBytes.ToBytes","content":"ToBytes.ToBytes \nToBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobytes.html#ToBytes","title":"ToBytes.ToBytes","content":"ToBytes.ToBytes \nToBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobytes.html#ToBytes","title":"ToBytes.ToBytes","content":"ToBytes.ToBytes \nToBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobytes.html#ToBytes","title":"ToBytes.ToBytes","content":"ToBytes.ToBytes \nToBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobytes.html#ToBytes","title":"ToBytes.ToBytes","content":"ToBytes.ToBytes \nToBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobytes.html#ToBytes","title":"ToBytes.ToBytes","content":"ToBytes.ToBytes \nToBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobytes.html#ToBytes","title":"ToBytes.ToBytes","content":"ToBytes.ToBytes \nToBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobytes.html#ToBytes","title":"ToBytes.ToBytes","content":"ToBytes.ToBytes \nToBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tobytes.html#ToBytes","title":"ToBytes.ToBytes","content":"ToBytes.ToBytes \nToBytes \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tolist.html","title":"ToList","content":"ToList \n \nToList.Invoke \nInvoke \nToList.ToList \nToList \nToList.ToList \nToList \nToList.ToList \nToList \nToList.ToList \nToList \nToList.ToList \nToList \nToList.ToList \nToList \nToList.ToList \nToList \nToList.ToList \nToList \nToList.ToList \nToList"},{"uri":"/FSharpPlusreference/fsharpplus-control-tolist.html#Invoke","title":"ToList.Invoke","content":"ToList.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tolist.html#ToList","title":"ToList.ToList","content":"ToList.ToList \nToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tolist.html#ToList","title":"ToList.ToList","content":"ToList.ToList \nToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tolist.html#ToList","title":"ToList.ToList","content":"ToList.ToList \nToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tolist.html#ToList","title":"ToList.ToList","content":"ToList.ToList \nToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tolist.html#ToList","title":"ToList.ToList","content":"ToList.ToList \nToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tolist.html#ToList","title":"ToList.ToList","content":"ToList.ToList \nToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tolist.html#ToList","title":"ToList.ToList","content":"ToList.ToList \nToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tolist.html#ToList","title":"ToList.ToList","content":"ToList.ToList \nToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tolist.html#ToList","title":"ToList.ToList","content":"ToList.ToList \nToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toseq.html","title":"ToSeq","content":"ToSeq \n \nToSeq.Invoke \nInvoke \nToSeq.InvokeOnInstance \nInvokeOnInstance \nToSeq.ToSeq \nToSeq \nToSeq.ToSeq \nToSeq \nToSeq.ToSeq \nToSeq \nToSeq.ToSeq \nToSeq \nToSeq.ToSeq \nToSeq \nToSeq.ToSeq \nToSeq \nToSeq.ToSeq \nToSeq \nToSeq.ToSeq \nToSeq"},{"uri":"/FSharpPlusreference/fsharpplus-control-toseq.html#Invoke","title":"ToSeq.Invoke","content":"ToSeq.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toseq.html#InvokeOnInstance","title":"ToSeq.InvokeOnInstance","content":"ToSeq.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toseq.html#ToSeq","title":"ToSeq.ToSeq","content":"ToSeq.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toseq.html#ToSeq","title":"ToSeq.ToSeq","content":"ToSeq.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toseq.html#ToSeq","title":"ToSeq.ToSeq","content":"ToSeq.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toseq.html#ToSeq","title":"ToSeq.ToSeq","content":"ToSeq.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toseq.html#ToSeq","title":"ToSeq.ToSeq","content":"ToSeq.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toseq.html#ToSeq","title":"ToSeq.ToSeq","content":"ToSeq.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toseq.html#ToSeq","title":"ToSeq.ToSeq","content":"ToSeq.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-toseq.html#ToSeq","title":"ToSeq.ToSeq","content":"ToSeq.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html","title":"Traverse","content":"Traverse \n \nTraverse.Invoke \nInvoke \nTraverse.InvokeOnInstance \nInvokeOnInstance \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse \nTraverse.Traverse \nTraverse"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Invoke","title":"Traverse.Invoke","content":"Traverse.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#InvokeOnInstance","title":"Traverse.InvokeOnInstance","content":"Traverse.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverse.html#Traverse","title":"Traverse.Traverse","content":"Traverse.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverseindexed.html","title":"TraverseIndexed","content":"TraverseIndexed \n \nTraverseIndexed.Invoke \nInvoke \nTraverseIndexed.InvokeOnInstance \nInvokeOnInstance \nTraverseIndexed.TraverseIndexed \nTraverseIndexed \nTraverseIndexed.TraverseIndexed \nTraverseIndexed \nTraverseIndexed.TraverseIndexed \nTraverseIndexed \nTraverseIndexed.TraverseIndexed \nTraverseIndexed \nTraverseIndexed.TraverseIndexed \nTraverseIndexed \nTraverseIndexed.TraverseIndexed \nTraverseIndexed \nTraverseIndexed.TraverseIndexed \nTraverseIndexed \nTraverseIndexed.TraverseIndexed \nTraverseIndexed"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverseindexed.html#Invoke","title":"TraverseIndexed.Invoke","content":"TraverseIndexed.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverseindexed.html#InvokeOnInstance","title":"TraverseIndexed.InvokeOnInstance","content":"TraverseIndexed.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverseindexed.html#TraverseIndexed","title":"TraverseIndexed.TraverseIndexed","content":"TraverseIndexed.TraverseIndexed \nTraverseIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverseindexed.html#TraverseIndexed","title":"TraverseIndexed.TraverseIndexed","content":"TraverseIndexed.TraverseIndexed \nTraverseIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverseindexed.html#TraverseIndexed","title":"TraverseIndexed.TraverseIndexed","content":"TraverseIndexed.TraverseIndexed \nTraverseIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverseindexed.html#TraverseIndexed","title":"TraverseIndexed.TraverseIndexed","content":"TraverseIndexed.TraverseIndexed \nTraverseIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverseindexed.html#TraverseIndexed","title":"TraverseIndexed.TraverseIndexed","content":"TraverseIndexed.TraverseIndexed \nTraverseIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverseindexed.html#TraverseIndexed","title":"TraverseIndexed.TraverseIndexed","content":"TraverseIndexed.TraverseIndexed \nTraverseIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverseindexed.html#TraverseIndexed","title":"TraverseIndexed.TraverseIndexed","content":"TraverseIndexed.TraverseIndexed \nTraverseIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-traverseindexed.html#TraverseIndexed","title":"TraverseIndexed.TraverseIndexed","content":"TraverseIndexed.TraverseIndexed \nTraverseIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trydivide.html","title":"TryDivide","content":"TryDivide \n \nTryDivide.Invoke \nInvoke \nTryDivide.TryDivide \nTryDivide \nTryDivide.TryDivide \nTryDivide \nTryDivide.TryDivide \nTryDivide \nTryDivide.TryDivide \nTryDivide"},{"uri":"/FSharpPlusreference/fsharpplus-control-trydivide.html#Invoke","title":"TryDivide.Invoke","content":"TryDivide.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trydivide.html#TryDivide","title":"TryDivide.TryDivide","content":"TryDivide.TryDivide \nTryDivide \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trydivide.html#TryDivide","title":"TryDivide.TryDivide","content":"TryDivide.TryDivide \nTryDivide \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trydivide.html#TryDivide","title":"TryDivide.TryDivide","content":"TryDivide.TryDivide \nTryDivide \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trydivide.html#TryDivide","title":"TryDivide.TryDivide","content":"TryDivide.TryDivide \nTryDivide \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html","title":"TryFinally","content":"TryFinally \n \nTryFinally.Invoke \nInvoke \nTryFinally.InvokeForStrict \nInvokeForStrict \nTryFinally.InvokeOnInstance \nInvokeOnInstance \nTryFinally.TryFinally \nTryFinally \nTryFinally.TryFinally \nTryFinally \nTryFinally.TryFinally \nTryFinally \nTryFinally.TryFinally \nTryFinally \nTryFinally.TryFinally \nTryFinally \nTryFinally.TryFinally \nTryFinally \nTryFinally.TryFinally \nTryFinally \nTryFinally.TryFinally \nTryFinally \nTryFinally.TryFinally \nTryFinally \nTryFinally.TryFinally \nTryFinally \nTryFinally.TryFinally \nTryFinally \nTryFinally.TryFinally \nTryFinally \nTryFinally.TryFinally \nTryFinally"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#Invoke","title":"TryFinally.Invoke","content":"TryFinally.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#InvokeForStrict","title":"TryFinally.InvokeForStrict","content":"TryFinally.InvokeForStrict \nInvokeForStrict \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#InvokeOnInstance","title":"TryFinally.InvokeOnInstance","content":"TryFinally.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#TryFinally","title":"TryFinally.TryFinally","content":"TryFinally.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#TryFinally","title":"TryFinally.TryFinally","content":"TryFinally.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#TryFinally","title":"TryFinally.TryFinally","content":"TryFinally.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#TryFinally","title":"TryFinally.TryFinally","content":"TryFinally.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#TryFinally","title":"TryFinally.TryFinally","content":"TryFinally.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#TryFinally","title":"TryFinally.TryFinally","content":"TryFinally.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#TryFinally","title":"TryFinally.TryFinally","content":"TryFinally.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#TryFinally","title":"TryFinally.TryFinally","content":"TryFinally.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#TryFinally","title":"TryFinally.TryFinally","content":"TryFinally.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#TryFinally","title":"TryFinally.TryFinally","content":"TryFinally.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#TryFinally","title":"TryFinally.TryFinally","content":"TryFinally.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#TryFinally","title":"TryFinally.TryFinally","content":"TryFinally.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfinally.html#TryFinally","title":"TryFinally.TryFinally","content":"TryFinally.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfind.html","title":"TryFind","content":"TryFind \n \nTryFind.Invoke \nInvoke \nTryFind.TryFind \nTryFind \nTryFind.TryFind \nTryFind \nTryFind.TryFind \nTryFind \nTryFind.TryFind \nTryFind \nTryFind.TryFind \nTryFind"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfind.html#Invoke","title":"TryFind.Invoke","content":"TryFind.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfind.html#TryFind","title":"TryFind.TryFind","content":"TryFind.TryFind \nTryFind \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfind.html#TryFind","title":"TryFind.TryFind","content":"TryFind.TryFind \nTryFind \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfind.html#TryFind","title":"TryFind.TryFind","content":"TryFind.TryFind \nTryFind \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfind.html#TryFind","title":"TryFind.TryFind","content":"TryFind.TryFind \nTryFind \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfind.html#TryFind","title":"TryFind.TryFind","content":"TryFind.TryFind \nTryFind \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindindex.html","title":"TryFindIndex","content":"TryFindIndex \n \nTryFindIndex.Invoke \nInvoke \nTryFindIndex.InvokeOnInstance \nInvokeOnInstance \nTryFindIndex.TryFindIndex \nTryFindIndex \nTryFindIndex.TryFindIndex \nTryFindIndex \nTryFindIndex.TryFindIndex \nTryFindIndex \nTryFindIndex.TryFindIndex \nTryFindIndex \nTryFindIndex.TryFindIndex \nTryFindIndex \nTryFindIndex.TryFindIndex \nTryFindIndex \nTryFindIndex.TryFindIndex \nTryFindIndex \nTryFindIndex.TryFindIndex \nTryFindIndex"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindindex.html#Invoke","title":"TryFindIndex.Invoke","content":"TryFindIndex.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindindex.html#InvokeOnInstance","title":"TryFindIndex.InvokeOnInstance","content":"TryFindIndex.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindindex.html#TryFindIndex","title":"TryFindIndex.TryFindIndex","content":"TryFindIndex.TryFindIndex \nTryFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindindex.html#TryFindIndex","title":"TryFindIndex.TryFindIndex","content":"TryFindIndex.TryFindIndex \nTryFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindindex.html#TryFindIndex","title":"TryFindIndex.TryFindIndex","content":"TryFindIndex.TryFindIndex \nTryFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindindex.html#TryFindIndex","title":"TryFindIndex.TryFindIndex","content":"TryFindIndex.TryFindIndex \nTryFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindindex.html#TryFindIndex","title":"TryFindIndex.TryFindIndex","content":"TryFindIndex.TryFindIndex \nTryFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindindex.html#TryFindIndex","title":"TryFindIndex.TryFindIndex","content":"TryFindIndex.TryFindIndex \nTryFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindindex.html#TryFindIndex","title":"TryFindIndex.TryFindIndex","content":"TryFindIndex.TryFindIndex \nTryFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindindex.html#TryFindIndex","title":"TryFindIndex.TryFindIndex","content":"TryFindIndex.TryFindIndex \nTryFindIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindsliceindex.html","title":"TryFindSliceIndex","content":"TryFindSliceIndex \n \nTryFindSliceIndex.Invoke \nInvoke \nTryFindSliceIndex.InvokeOnInstance \nInvokeOnInstance \nTryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \nTryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \nTryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \nTryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \nTryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \nTryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \nTryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \nTryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindsliceindex.html#Invoke","title":"TryFindSliceIndex.Invoke","content":"TryFindSliceIndex.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindsliceindex.html#InvokeOnInstance","title":"TryFindSliceIndex.InvokeOnInstance","content":"TryFindSliceIndex.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindsliceindex.html#TryFindSliceIndex","title":"TryFindSliceIndex.TryFindSliceIndex","content":"TryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindsliceindex.html#TryFindSliceIndex","title":"TryFindSliceIndex.TryFindSliceIndex","content":"TryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindsliceindex.html#TryFindSliceIndex","title":"TryFindSliceIndex.TryFindSliceIndex","content":"TryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindsliceindex.html#TryFindSliceIndex","title":"TryFindSliceIndex.TryFindSliceIndex","content":"TryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindsliceindex.html#TryFindSliceIndex","title":"TryFindSliceIndex.TryFindSliceIndex","content":"TryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindsliceindex.html#TryFindSliceIndex","title":"TryFindSliceIndex.TryFindSliceIndex","content":"TryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindsliceindex.html#TryFindSliceIndex","title":"TryFindSliceIndex.TryFindSliceIndex","content":"TryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryfindsliceindex.html#TryFindSliceIndex","title":"TryFindSliceIndex.TryFindSliceIndex","content":"TryFindSliceIndex.TryFindSliceIndex \nTryFindSliceIndex \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryhead.html","title":"TryHead","content":"TryHead \n \nTryHead.Invoke \nInvoke \nTryHead.TryHead \nTryHead \nTryHead.TryHead \nTryHead \nTryHead.TryHead \nTryHead \nTryHead.TryHead \nTryHead \nTryHead.TryHead \nTryHead \nTryHead.TryHead \nTryHead \nTryHead.TryHead \nTryHead \nTryHead.TryHead \nTryHead"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryhead.html#Invoke","title":"TryHead.Invoke","content":"TryHead.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryhead.html#TryHead","title":"TryHead.TryHead","content":"TryHead.TryHead \nTryHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryhead.html#TryHead","title":"TryHead.TryHead","content":"TryHead.TryHead \nTryHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryhead.html#TryHead","title":"TryHead.TryHead","content":"TryHead.TryHead \nTryHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryhead.html#TryHead","title":"TryHead.TryHead","content":"TryHead.TryHead \nTryHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryhead.html#TryHead","title":"TryHead.TryHead","content":"TryHead.TryHead \nTryHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryhead.html#TryHead","title":"TryHead.TryHead","content":"TryHead.TryHead \nTryHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryhead.html#TryHead","title":"TryHead.TryHead","content":"TryHead.TryHead \nTryHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryhead.html#TryHead","title":"TryHead.TryHead","content":"TryHead.TryHead \nTryHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html","title":"TryItem","content":"TryItem \n \nTryItem.Invoke \nInvoke \nTryItem.TryItem \nTryItem \nTryItem.TryItem \nTryItem \nTryItem.TryItem \nTryItem \nTryItem.TryItem \nTryItem \nTryItem.TryItem \nTryItem \nTryItem.TryItem \nTryItem \nTryItem.TryItem \nTryItem \nTryItem.TryItem \nTryItem \nTryItem.TryItem \nTryItem \nTryItem.TryItem \nTryItem \nTryItem.TryItem \nTryItem \nTryItem.TryItem \nTryItem \nTryItem.TryItem \nTryItem \nTryItem.TryItem \nTryItem"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#Invoke","title":"TryItem.Invoke","content":"TryItem.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryitem.html#TryItem","title":"TryItem.TryItem","content":"TryItem.TryItem \nTryItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trynegate.html","title":"TryNegate","content":"TryNegate \n \nTryNegate.Invoke \nInvoke \nTryNegate.TryNegate \nTryNegate \nTryNegate.TryNegate \nTryNegate"},{"uri":"/FSharpPlusreference/fsharpplus-control-trynegate.html#Invoke","title":"TryNegate.Invoke","content":"TryNegate.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trynegate.html#TryNegate","title":"TryNegate.TryNegate","content":"TryNegate.TryNegate \nTryNegate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trynegate.html#TryNegate","title":"TryNegate.TryNegate","content":"TryNegate.TryNegate \nTryNegate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trynegate'.html","title":"TryNegate'","content":"TryNegate' \n \nTryNegate'.Invoke \nInvoke \nTryNegate'.TryNegate \nTryNegate \nTryNegate'.TryNegate \nTryNegate \nTryNegate'.TryNegate \nTryNegate \nTryNegate'.TryNegate \nTryNegate \nTryNegate'.TryNegate \nTryNegate"},{"uri":"/FSharpPlusreference/fsharpplus-control-trynegate'.html#Invoke","title":"TryNegate'.Invoke","content":"TryNegate'.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trynegate'.html#TryNegate","title":"TryNegate'.TryNegate","content":"TryNegate'.TryNegate \nTryNegate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trynegate'.html#TryNegate","title":"TryNegate'.TryNegate","content":"TryNegate'.TryNegate \nTryNegate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trynegate'.html#TryNegate","title":"TryNegate'.TryNegate","content":"TryNegate'.TryNegate \nTryNegate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trynegate'.html#TryNegate","title":"TryNegate'.TryNegate","content":"TryNegate'.TryNegate \nTryNegate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trynegate'.html#TryNegate","title":"TryNegate'.TryNegate","content":"TryNegate'.TryNegate \nTryNegate \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html","title":"TryParse","content":"TryParse \n \nTryParse.Invoke \nInvoke \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse \nTryParse.TryParse \nTryParse"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#Invoke","title":"TryParse.Invoke","content":"TryParse.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tryparse.html#TryParse","title":"TryParse.TryParse","content":"TryParse.TryParse \nTryParse \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trypick.html","title":"TryPick","content":"TryPick \n \nTryPick.Invoke \nInvoke \nTryPick.TryPick \nTryPick \nTryPick.TryPick \nTryPick \nTryPick.TryPick \nTryPick \nTryPick.TryPick \nTryPick \nTryPick.TryPick \nTryPick"},{"uri":"/FSharpPlusreference/fsharpplus-control-trypick.html#Invoke","title":"TryPick.Invoke","content":"TryPick.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trypick.html#TryPick","title":"TryPick.TryPick","content":"TryPick.TryPick \nTryPick \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trypick.html#TryPick","title":"TryPick.TryPick","content":"TryPick.TryPick \nTryPick \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trypick.html#TryPick","title":"TryPick.TryPick","content":"TryPick.TryPick \nTryPick \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trypick.html#TryPick","title":"TryPick.TryPick","content":"TryPick.TryPick \nTryPick \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trypick.html#TryPick","title":"TryPick.TryPick","content":"TryPick.TryPick \nTryPick \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrt.html","title":"TrySqrt","content":"TrySqrt \n \nTrySqrt.Invoke \nInvoke \nTrySqrt.TrySqrt \nTrySqrt \nTrySqrt.TrySqrt \nTrySqrt \nTrySqrt.TrySqrt \nTrySqrt \nTrySqrt.TrySqrt \nTrySqrt \nTrySqrt.TrySqrt \nTrySqrt \nTrySqrt.TrySqrt \nTrySqrt"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrt.html#Invoke","title":"TrySqrt.Invoke","content":"TrySqrt.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrt.html#TrySqrt","title":"TrySqrt.TrySqrt","content":"TrySqrt.TrySqrt \nTrySqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrt.html#TrySqrt","title":"TrySqrt.TrySqrt","content":"TrySqrt.TrySqrt \nTrySqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrt.html#TrySqrt","title":"TrySqrt.TrySqrt","content":"TrySqrt.TrySqrt \nTrySqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrt.html#TrySqrt","title":"TrySqrt.TrySqrt","content":"TrySqrt.TrySqrt \nTrySqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrt.html#TrySqrt","title":"TrySqrt.TrySqrt","content":"TrySqrt.TrySqrt \nTrySqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrt.html#TrySqrt","title":"TrySqrt.TrySqrt","content":"TrySqrt.TrySqrt \nTrySqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrtrem.html","title":"TrySqrtRem","content":"TrySqrtRem \n \nTrySqrtRem.Invoke \nInvoke \nTrySqrtRem.TrySqrtRem \nTrySqrtRem \nTrySqrtRem.TrySqrtRem \nTrySqrtRem \nTrySqrtRem.TrySqrtRem \nTrySqrtRem \nTrySqrtRem.TrySqrtRem \nTrySqrtRem \nTrySqrtRem.TrySqrtRem \nTrySqrtRem \nTrySqrtRem.TrySqrtRem \nTrySqrtRem \nTrySqrtRem.TrySqrtRem \nTrySqrtRem \nTrySqrtRem.TrySqrtRem \nTrySqrtRem \nTrySqrtRem.TrySqrtRem \nTrySqrtRem \nTrySqrtRem.TrySqrtRem \nTrySqrtRem \nTrySqrtRem.TrySqrtRem \nTrySqrtRem"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrtrem.html#Invoke","title":"TrySqrtRem.Invoke","content":"TrySqrtRem.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrtrem.html#TrySqrtRem","title":"TrySqrtRem.TrySqrtRem","content":"TrySqrtRem.TrySqrtRem \nTrySqrtRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrtrem.html#TrySqrtRem","title":"TrySqrtRem.TrySqrtRem","content":"TrySqrtRem.TrySqrtRem \nTrySqrtRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrtrem.html#TrySqrtRem","title":"TrySqrtRem.TrySqrtRem","content":"TrySqrtRem.TrySqrtRem \nTrySqrtRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrtrem.html#TrySqrtRem","title":"TrySqrtRem.TrySqrtRem","content":"TrySqrtRem.TrySqrtRem \nTrySqrtRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrtrem.html#TrySqrtRem","title":"TrySqrtRem.TrySqrtRem","content":"TrySqrtRem.TrySqrtRem \nTrySqrtRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrtrem.html#TrySqrtRem","title":"TrySqrtRem.TrySqrtRem","content":"TrySqrtRem.TrySqrtRem \nTrySqrtRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrtrem.html#TrySqrtRem","title":"TrySqrtRem.TrySqrtRem","content":"TrySqrtRem.TrySqrtRem \nTrySqrtRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrtrem.html#TrySqrtRem","title":"TrySqrtRem.TrySqrtRem","content":"TrySqrtRem.TrySqrtRem \nTrySqrtRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrtrem.html#TrySqrtRem","title":"TrySqrtRem.TrySqrtRem","content":"TrySqrtRem.TrySqrtRem \nTrySqrtRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrtrem.html#TrySqrtRem","title":"TrySqrtRem.TrySqrtRem","content":"TrySqrtRem.TrySqrtRem \nTrySqrtRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysqrtrem.html#TrySqrtRem","title":"TrySqrtRem.TrySqrtRem","content":"TrySqrtRem.TrySqrtRem \nTrySqrtRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysubtract.html","title":"TrySubtract","content":"TrySubtract \n \nTrySubtract.Invoke \nInvoke \nTrySubtract.TrySubtract \nTrySubtract \nTrySubtract.TrySubtract \nTrySubtract \nTrySubtract.TrySubtract \nTrySubtract \nTrySubtract.TrySubtract \nTrySubtract \nTrySubtract.TrySubtract \nTrySubtract \nTrySubtract.TrySubtract \nTrySubtract \nTrySubtract.TrySubtract \nTrySubtract"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysubtract.html#Invoke","title":"TrySubtract.Invoke","content":"TrySubtract.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysubtract.html#TrySubtract","title":"TrySubtract.TrySubtract","content":"TrySubtract.TrySubtract \nTrySubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysubtract.html#TrySubtract","title":"TrySubtract.TrySubtract","content":"TrySubtract.TrySubtract \nTrySubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysubtract.html#TrySubtract","title":"TrySubtract.TrySubtract","content":"TrySubtract.TrySubtract \nTrySubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysubtract.html#TrySubtract","title":"TrySubtract.TrySubtract","content":"TrySubtract.TrySubtract \nTrySubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysubtract.html#TrySubtract","title":"TrySubtract.TrySubtract","content":"TrySubtract.TrySubtract \nTrySubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysubtract.html#TrySubtract","title":"TrySubtract.TrySubtract","content":"TrySubtract.TrySubtract \nTrySubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trysubtract.html#TrySubtract","title":"TrySubtract.TrySubtract","content":"TrySubtract.TrySubtract \nTrySubtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html","title":"TryWith","content":"TryWith \n \nTryWith.Invoke \nInvoke \nTryWith.InvokeForStrict \nInvokeForStrict \nTryWith.InvokeForWhile \nInvokeForWhile \nTryWith.TryWith \nTryWith \nTryWith.TryWith \nTryWith \nTryWith.TryWith \nTryWith \nTryWith.TryWith \nTryWith \nTryWith.TryWith \nTryWith \nTryWith.TryWith \nTryWith \nTryWith.TryWith \nTryWith \nTryWith.TryWith \nTryWith \nTryWith.TryWith \nTryWith \nTryWith.TryWith \nTryWith"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html#Invoke","title":"TryWith.Invoke","content":"TryWith.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html#InvokeForStrict","title":"TryWith.InvokeForStrict","content":"TryWith.InvokeForStrict \nInvokeForStrict \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html#InvokeForWhile","title":"TryWith.InvokeForWhile","content":"TryWith.InvokeForWhile \nInvokeForWhile \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html#TryWith","title":"TryWith.TryWith","content":"TryWith.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html#TryWith","title":"TryWith.TryWith","content":"TryWith.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html#TryWith","title":"TryWith.TryWith","content":"TryWith.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html#TryWith","title":"TryWith.TryWith","content":"TryWith.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html#TryWith","title":"TryWith.TryWith","content":"TryWith.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html#TryWith","title":"TryWith.TryWith","content":"TryWith.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html#TryWith","title":"TryWith.TryWith","content":"TryWith.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html#TryWith","title":"TryWith.TryWith","content":"TryWith.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html#TryWith","title":"TryWith.TryWith","content":"TryWith.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-trywith.html#TryWith","title":"TryWith.TryWith","content":"TryWith.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tupletolist.html","title":"TupleToList","content":"TupleToList \n \nTupleToList.Invoke \nInvoke \nTupleToList.TupleToList \nTupleToList \nTupleToList.TupleToList \nTupleToList \nTupleToList.TupleToList \nTupleToList \nTupleToList.TupleToList \nTupleToList \nTupleToList.TupleToList \nTupleToList \nTupleToList.TupleToList \nTupleToList \nTupleToList.TupleToList \nTupleToList \nTupleToList.TupleToList \nTupleToList"},{"uri":"/FSharpPlusreference/fsharpplus-control-tupletolist.html#Invoke","title":"TupleToList.Invoke","content":"TupleToList.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tupletolist.html#TupleToList","title":"TupleToList.TupleToList","content":"TupleToList.TupleToList \nTupleToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tupletolist.html#TupleToList","title":"TupleToList.TupleToList","content":"TupleToList.TupleToList \nTupleToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tupletolist.html#TupleToList","title":"TupleToList.TupleToList","content":"TupleToList.TupleToList \nTupleToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tupletolist.html#TupleToList","title":"TupleToList.TupleToList","content":"TupleToList.TupleToList \nTupleToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tupletolist.html#TupleToList","title":"TupleToList.TupleToList","content":"TupleToList.TupleToList \nTupleToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tupletolist.html#TupleToList","title":"TupleToList.TupleToList","content":"TupleToList.TupleToList \nTupleToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tupletolist.html#TupleToList","title":"TupleToList.TupleToList","content":"TupleToList.TupleToList \nTupleToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-tupletolist.html#TupleToList","title":"TupleToList.TupleToList","content":"TupleToList.TupleToList \nTupleToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-uncurry.html","title":"Uncurry","content":"Uncurry \n \nUncurry.Invoke \nInvoke \nUncurry.Uncurry \nUncurry \nUncurry.Uncurry \nUncurry \nUncurry.Uncurry \nUncurry \nUncurry.Uncurry \nUncurry \nUncurry.Uncurry \nUncurry \nUncurry.Uncurry \nUncurry \nUncurry.Uncurry \nUncurry \nUncurry.Uncurry \nUncurry"},{"uri":"/FSharpPlusreference/fsharpplus-control-uncurry.html#Invoke","title":"Uncurry.Invoke","content":"Uncurry.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-uncurry.html#Uncurry","title":"Uncurry.Uncurry","content":"Uncurry.Uncurry \nUncurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-uncurry.html#Uncurry","title":"Uncurry.Uncurry","content":"Uncurry.Uncurry \nUncurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-uncurry.html#Uncurry","title":"Uncurry.Uncurry","content":"Uncurry.Uncurry \nUncurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-uncurry.html#Uncurry","title":"Uncurry.Uncurry","content":"Uncurry.Uncurry \nUncurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-uncurry.html#Uncurry","title":"Uncurry.Uncurry","content":"Uncurry.Uncurry \nUncurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-uncurry.html#Uncurry","title":"Uncurry.Uncurry","content":"Uncurry.Uncurry \nUncurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-uncurry.html#Uncurry","title":"Uncurry.Uncurry","content":"Uncurry.Uncurry \nUncurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-uncurry.html#Uncurry","title":"Uncurry.Uncurry","content":"Uncurry.Uncurry \nUncurry \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html","title":"Unzip","content":"Unzip \n \nUnzip.Invoke \nInvoke \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip \nUnzip.Unzip \nUnzip"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Invoke","title":"Unzip.Invoke","content":"Unzip.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-unzip.html#Unzip","title":"Unzip.Unzip","content":"Unzip.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-using.html","title":"Using","content":"Using \n \nUsing.Invoke \nInvoke \nUsing.InvokeOnInstance \nInvokeOnInstance \nUsing.Using \nUsing \nUsing.Using \nUsing \nUsing.Using \nUsing \nUsing.Using \nUsing \nUsing.Using \nUsing \nUsing.Using \nUsing \nUsing.Using \nUsing \nUsing.Using \nUsing \nUsing.Using \nUsing \nUsing.Using \nUsing"},{"uri":"/FSharpPlusreference/fsharpplus-control-using.html#Invoke","title":"Using.Invoke","content":"Using.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-using.html#InvokeOnInstance","title":"Using.InvokeOnInstance","content":"Using.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-using.html#Using","title":"Using.Using","content":"Using.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-using.html#Using","title":"Using.Using","content":"Using.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-using.html#Using","title":"Using.Using","content":"Using.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-using.html#Using","title":"Using.Using","content":"Using.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-using.html#Using","title":"Using.Using","content":"Using.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-using.html#Using","title":"Using.Using","content":"Using.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-using.html#Using","title":"Using.Using","content":"Using.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-using.html#Using","title":"Using.Using","content":"Using.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-using.html#Using","title":"Using.Using","content":"Using.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-using.html#Using","title":"Using.Using","content":"Using.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html","title":"Zero","content":"Zero \n \nZero.Invoke \nInvoke \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero \nZero.Zero \nZero"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Invoke","title":"Zero.Invoke","content":"Zero.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zero.html#Zero","title":"Zero.Zero","content":"Zero.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html","title":"Zip","content":"Zip \n \nZip.Invoke \nInvoke \nZip.InvokeOnInstance \nInvokeOnInstance \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip \nZip.Zip \nZip"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Invoke","title":"Zip.Invoke","content":"Zip.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#InvokeOnInstance","title":"Zip.InvokeOnInstance","content":"Zip.InvokeOnInstance \nInvokeOnInstance \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-control-zip.html#Zip","title":"Zip.Zip","content":"Zip.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet.html","title":"ChoiceT","content":"ChoiceT \n \nChoiceT.run \nrun \nChoiceT.lift \nlift \nChoiceT.hoist \nhoist \nChoiceT.bind \nbind \nChoiceT.apply \napply \nChoiceT.map \nmap \nChoiceT.map2 \nmap2"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet.html#run","title":"ChoiceT.run","content":"ChoiceT.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet.html#lift","title":"ChoiceT.lift","content":"ChoiceT.lift \nlift \n\n Embed a Monad<'T> into a ChoiceT<'Monad<Choice<'T,'Error>>>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet.html#hoist","title":"ChoiceT.hoist","content":"ChoiceT.hoist \nhoist \n\n Transform a Choice<'T,'Error> to a ChoiceT<'Monad<Choice<'T,'Error>>>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet.html#bind","title":"ChoiceT.bind","content":"ChoiceT.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet.html#apply","title":"ChoiceT.apply","content":"ChoiceT.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet.html#map","title":"ChoiceT.map","content":"ChoiceT.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet.html#map2","title":"ChoiceT.map2","content":"ChoiceT.map2 \nmap2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-compose.html","title":"Compose","content":"Compose \n\n Basic operations on Compose\n \nCompose.run \nrun"},{"uri":"/FSharpPlusreference/fsharpplus-data-compose.html#run","title":"Compose.run","content":"Compose.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const.html","title":"Const","content":"Const \n\n Basic operations on Const\n \nConst.run \nrun"},{"uri":"/FSharpPlusreference/fsharpplus-data-const.html#run","title":"Const.run","content":"Const.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont.html","title":"Cont","content":"Cont \n\n Basic operations on Cont\n \nCont.run \nrun \nCont.eval \neval \nCont.callCC \ncallCC \nCont.map \nmap \nCont.bind \nbind \nCont.apply \napply"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont.html#run","title":"Cont.run","content":"Cont.run \nrun \n\n The result of running a CPS computation with a given final continuation.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont.html#eval","title":"Cont.eval","content":"Cont.eval \neval \n\n The result of running a CPS computation with the identity function as the final continuation.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont.html#callCC","title":"Cont.callCC","content":"Cont.callCC \ncallCC \n\n (call-with-current-continuation) calls a function with the current continuation as its argument.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont.html#map","title":"Cont.map","content":"Cont.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont.html#bind","title":"Cont.bind","content":"Cont.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont.html#apply","title":"Cont.apply","content":"Cont.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-contt.html","title":"ContT","content":"ContT \n\n Basic operations on ContT\n \nContT.run \nrun \nContT.eval \neval"},{"uri":"/FSharpPlusreference/fsharpplus-data-contt.html#run","title":"ContT.run","content":"ContT.run \nrun \n\n The result of running a CPS computation with the identity function as the final continuation.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-contt.html#eval","title":"ContT.eval","content":"ContT.eval \neval \n\n The result of running a CPS computation with its inner monad's 'Return' function as the final continuation.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-coproductprimitives.html","title":"CoproductPrimitives","content":"CoproductPrimitives \n \nCoproductPrimitives.InL \nInL \nCoproductPrimitives.InR \nInR \nCoproductPrimitives.( |InL|InR| ) \n( |InL|InR| )"},{"uri":"/FSharpPlusreference/fsharpplus-data-coproductprimitives.html#InL","title":"CoproductPrimitives.InL","content":"CoproductPrimitives.InL \nInL \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-coproductprimitives.html#InR","title":"CoproductPrimitives.InR","content":"CoproductPrimitives.InR \nInR \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-coproductprimitives.html#( |InL|InR| )","title":"CoproductPrimitives.( |InL|InR| )","content":"CoproductPrimitives.( |InL|InR| ) \n( |InL|InR| ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html","title":"DList","content":"DList \n \nDList.append \nappend \nDList.cons \ncons \nDList.empty \nempty \nDList.foldBack \nfoldBack \nDList.fold \nfold \nDList.head \nhead \nDList.tryHead \ntryHead \nDList.isEmpty \nisEmpty \nDList.length \nlength \nDList.singleton \nsingleton \nDList.add \nadd \nDList.tail \ntail \nDList.tryTail \ntryTail \nDList.uncons \nuncons \nDList.tryUncons \ntryUncons \nDList.ofSeq \nofSeq \nDList.toList \ntoList \nDList.toSeq \ntoSeq \nDList.map \nmap \nDList.concat \nconcat \nDList.ap \nap \nDList.bind \nbind"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#append","title":"DList.append","content":"DList.append \nappend \n\n O(1). Returns a new DList of two lists.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#cons","title":"DList.cons","content":"DList.cons \ncons \n\n O(1). Returns a new DList with the element added to the beginning.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#empty","title":"DList.empty","content":"DList.empty \nempty \n\n O(1). Returns DList of no elements.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#foldBack","title":"DList.foldBack","content":"DList.foldBack \nfoldBack \n\n O(n). Fold walks the DList using constant stack space. Implementation is from Norman Ramsey.\n See http://stackoverflow.com/questions/5324623/functional-o1-append-and-on-iteration-from-first-element-list-data-structure/5334068#5334068\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#fold","title":"DList.fold","content":"DList.fold \nfold \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#head","title":"DList.head","content":"DList.head \nhead \n\n O(log n). Returns the first element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#tryHead","title":"DList.tryHead","content":"DList.tryHead \ntryHead \n\n O(log n). Returns option first element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#isEmpty","title":"DList.isEmpty","content":"DList.isEmpty \nisEmpty \n\n O(1). Returns true if the DList has no elements.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#length","title":"DList.length","content":"DList.length \nlength \n\n O(1). Returns the count of elememts.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#singleton","title":"DList.singleton","content":"DList.singleton \nsingleton \n\n O(1). Returns DList of one elements.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#add","title":"DList.add","content":"DList.add \nadd \n\n O(1). Returns a new DList with the element added to the end.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#tail","title":"DList.tail","content":"DList.tail \ntail \n\n O(log n). Returns a new DList of the elements trailing the first element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#tryTail","title":"DList.tryTail","content":"DList.tryTail \ntryTail \n\n O(log n). Returns option DList of the elements trailing the first element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#uncons","title":"DList.uncons","content":"DList.uncons \nuncons \n\n O(log n). Returns the first element and tail.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#tryUncons","title":"DList.tryUncons","content":"DList.tryUncons \ntryUncons \n\n O(log n). Returns option first element and tail.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#ofSeq","title":"DList.ofSeq","content":"DList.ofSeq \nofSeq \n\n O(n). Returns a DList of the seq.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#toList","title":"DList.toList","content":"DList.toList \ntoList \n\n O(n). Returns a list of the DList elements.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#toSeq","title":"DList.toSeq","content":"DList.toSeq \ntoSeq \n\n O(n). Returns a seq of the DList elements.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#map","title":"DList.map","content":"DList.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#concat","title":"DList.concat","content":"DList.concat \nconcat \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#ap","title":"DList.ap","content":"DList.ap \nap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistmodule.html#bind","title":"DList.bind","content":"DList.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dual.html","title":"Dual","content":"Dual \n\n Basic operations on Dual\n \nDual.run \nrun"},{"uri":"/FSharpPlusreference/fsharpplus-data-dual.html#run","title":"Dual.run","content":"Dual.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-endo.html","title":"Endo","content":"Endo \n\n Basic operations on Endo\n \nEndo.run \nrun"},{"uri":"/FSharpPlusreference/fsharpplus-data-endo.html#run","title":"Endo.run","content":"Endo.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free.html","title":"Free","content":"Free \n\n Basic operations on Free Monads\n \nFree.run \nrun \nFree.map \nmap \nFree.bind \nbind \nFree.apply \napply \nFree.map2 \nmap2 \nFree.fold \nfold \nFree.iterM \niterM \nFree.liftF \nliftF"},{"uri":"/FSharpPlusreference/fsharpplus-data-free.html#run","title":"Free.run","content":"Free.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free.html#map","title":"Free.map","content":"Free.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free.html#bind","title":"Free.bind","content":"Free.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free.html#apply","title":"Free.apply","content":"Free.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free.html#map2","title":"Free.map2","content":"Free.map2 \nmap2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free.html#fold","title":"Free.fold","content":"Free.fold \nfold \n\n Folds the Free structure into a Monad\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free.html#iterM","title":"Free.iterM","content":"Free.iterM \niterM \n\n Tear down a Free monad using iteration.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free.html#liftF","title":"Free.liftF","content":"Free.liftF \nliftF \n\n Lift any Functor into a Free structure\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-freeprimitives.html","title":"FreePrimitives","content":"FreePrimitives \n \nFreePrimitives.Roll \nRoll \nFreePrimitives.( |Pure|Roll| ) \n( |Pure|Roll| )"},{"uri":"/FSharpPlusreference/fsharpplus-data-freeprimitives.html#Roll","title":"FreePrimitives.Roll","content":"FreePrimitives.Roll \nRoll \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-freeprimitives.html#( |Pure|Roll| )","title":"FreePrimitives.( |Pure|Roll| )","content":"FreePrimitives.( |Pure|Roll| ) \n( |Pure|Roll| ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-identity.html","title":"Identity","content":"Identity \n\n Basic operations on Identity\n \nIdentity.run \nrun"},{"uri":"/FSharpPlusreference/fsharpplus-data-identity.html#run","title":"Identity.run","content":"Identity.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli.html","title":"Kleisli","content":"Kleisli \n\n Basic operations on Kleisli\n \nKleisli.run \nrun"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli.html#run","title":"Kleisli.run","content":"Kleisli.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-list.html","title":"List","content":"List \n\n Additional operations on List\n \nList.sequence \nsequence \nList.traverse \ntraverse \nList.foldM \nfoldM \nList.filterM \nfilterM \nList.replicateM \nreplicateM"},{"uri":"/FSharpPlusreference/fsharpplus-data-list.html#sequence","title":"List.sequence","content":"List.sequence \nsequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-list.html#traverse","title":"List.traverse","content":"List.traverse \ntraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-list.html#foldM","title":"List.foldM","content":"List.foldM \nfoldM \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-list.html#filterM","title":"List.filterM","content":"List.filterM \nfilterM \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-list.html#replicateM","title":"List.replicateM","content":"List.replicateM \nreplicateM \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt.html","title":"ListT","content":"ListT \n\n Basic operations on ListT\n \nListT.run \nrun \nListT.lift \nlift \nListT.bind \nbind \nListT.apply \napply \nListT.lift2 \nlift2 \nListT.map \nmap"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt.html#run","title":"ListT.run","content":"ListT.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt.html#lift","title":"ListT.lift","content":"ListT.lift \nlift \n\n Embed a Monad<'T> into a ListT<'Monad<list<'T>>>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt.html#bind","title":"ListT.bind","content":"ListT.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt.html#apply","title":"ListT.apply","content":"ListT.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt.html#lift2","title":"ListT.lift2","content":"ListT.lift2 \nlift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt.html#map","title":"ListT.map","content":"ListT.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html","title":"Matrix","content":"Matrix \n \nMatrix.map \nmap \nMatrix.map2 \nmap2 \nMatrix.mapi \nmapi \nMatrix.mapi2 \nmapi2 \nMatrix.iter \niter \nMatrix.iter2 \niter2 \nMatrix.iteri \niteri \nMatrix.iteri2 \niteri2 \nMatrix.rowLength \nrowLength \nMatrix.colLength \ncolLength \nMatrix.rowLength' \nrowLength' \nMatrix.colLength' \ncolLength' \nMatrix.toArray2D \ntoArray2D \nMatrix.toJaggedArray \ntoJaggedArray \nMatrix.indexed \nindexed \nMatrix.unsafeCreate \nunsafeCreate \nMatrix.tryOfArray2D \ntryOfArray2D \nMatrix.tryOfJaggedSeq \ntryOfJaggedSeq \nMatrix.create \ncreate \nMatrix.zeroCreate \nzeroCreate \nMatrix.replicate \nreplicate \nMatrix.init \ninit \nMatrix.unsafeGet \nunsafeGet \nMatrix.get \nget \nMatrix.slice \nslice \nMatrix.sliceRow \nsliceRow \nMatrix.sliceCol \nsliceCol \nMatrix.zero \nzero \nMatrix.identity \nidentity \nMatrix.diagonal \ndiagonal \nMatrix.trace \ntrace \nMatrix.rowVec \nrowVec \nMatrix.row \nrow \nMatrix.colVec \ncolVec \nMatrix.col \ncol \nMatrix.ofRows \nofRows \nMatrix.toRows \ntoRows \nMatrix.ofCols \nofCols \nMatrix.toCols \ntoCols \nMatrix.transpose \ntranspose \nMatrix.matrixProduct \nmatrixProduct \nMatrix.kroneckerProduct \nkroneckerProduct \nMatrix.kroneckerSum \nkroneckerSum \nMatrix.directSum \ndirectSum \nMatrix.verticalSum \nverticalSum \nMatrix.horizontalSum \nhorizontalSum \nMatrix.hadamardProduct \nhadamardProduct"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#map","title":"Matrix.map","content":"Matrix.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#map2","title":"Matrix.map2","content":"Matrix.map2 \nmap2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#mapi","title":"Matrix.mapi","content":"Matrix.mapi \nmapi \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#mapi2","title":"Matrix.mapi2","content":"Matrix.mapi2 \nmapi2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#iter","title":"Matrix.iter","content":"Matrix.iter \niter \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#iter2","title":"Matrix.iter2","content":"Matrix.iter2 \niter2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#iteri","title":"Matrix.iteri","content":"Matrix.iteri \niteri \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#iteri2","title":"Matrix.iteri2","content":"Matrix.iteri2 \niteri2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#rowLength","title":"Matrix.rowLength","content":"Matrix.rowLength \nrowLength \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#colLength","title":"Matrix.colLength","content":"Matrix.colLength \ncolLength \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#rowLength'","title":"Matrix.rowLength'","content":"Matrix.rowLength' \nrowLength' \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#colLength'","title":"Matrix.colLength'","content":"Matrix.colLength' \ncolLength' \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#toArray2D","title":"Matrix.toArray2D","content":"Matrix.toArray2D \ntoArray2D \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#toJaggedArray","title":"Matrix.toJaggedArray","content":"Matrix.toJaggedArray \ntoJaggedArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#indexed","title":"Matrix.indexed","content":"Matrix.indexed \nindexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#unsafeCreate","title":"Matrix.unsafeCreate","content":"Matrix.unsafeCreate \nunsafeCreate \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#tryOfArray2D","title":"Matrix.tryOfArray2D","content":"Matrix.tryOfArray2D \ntryOfArray2D \n\n Tries to create a matrix of given dimension.\n If the dimension does not match, returns `None`. Otherwise returns the matrix with `Some`.\n\n You can also use `Matrix.TryCreate.OfArray2D`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#tryOfJaggedSeq","title":"Matrix.tryOfJaggedSeq","content":"Matrix.tryOfJaggedSeq \ntryOfJaggedSeq \n\n Tries to create a matrix of given dimension.\n If the dimension does not match, returns `None`. Otherwise returns the matrix with `Some`.\n\n You can also use `Matrix.TryCreate.OfJaggedSeq`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#create","title":"Matrix.create","content":"Matrix.create \ncreate \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#zeroCreate","title":"Matrix.zeroCreate","content":"Matrix.zeroCreate \nzeroCreate \n\n You can also use `Matrix.ZeroCreate<m, n>.Invoke()`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#replicate","title":"Matrix.replicate","content":"Matrix.replicate \nreplicate \n\n You can also use `Matrix.Replicate<m, n>.Invoke value`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#init","title":"Matrix.init","content":"Matrix.init \ninit \n\n You can also use `Matrix.Init<m, n>.Invoke f`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#unsafeGet","title":"Matrix.unsafeGet","content":"Matrix.unsafeGet \nunsafeGet \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#get","title":"Matrix.get","content":"Matrix.get \nget \n\n You can also use `Matrix.Get<i, j>.Invoke mat`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#slice","title":"Matrix.slice","content":"Matrix.slice \nslice \n\n You can also use `Matrix.Slice<a, b, c, d>.Invoke mat`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#sliceRow","title":"Matrix.sliceRow","content":"Matrix.sliceRow \nsliceRow \n\n You can also use `Matrix.SliceRow<a, b>.Invoke mat`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#sliceCol","title":"Matrix.sliceCol","content":"Matrix.sliceCol \nsliceCol \n\n You can also use `Matrix.SliceCol<a, b>.Invoke mat`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#zero","title":"Matrix.zero","content":"Matrix.zero \nzero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#identity","title":"Matrix.identity","content":"Matrix.identity \nidentity \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#diagonal","title":"Matrix.diagonal","content":"Matrix.diagonal \ndiagonal \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#trace","title":"Matrix.trace","content":"Matrix.trace \ntrace \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#rowVec","title":"Matrix.rowVec","content":"Matrix.rowVec \nrowVec \n\n You can also use `Matrix.Row<i>.AsVector mtx`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#row","title":"Matrix.row","content":"Matrix.row \nrow \n\n You can also use `Matrix.Row<i>.AsMatrix mtx`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#colVec","title":"Matrix.colVec","content":"Matrix.colVec \ncolVec \n\n You can also use `Matrix.Col<j>.AsVector mtx`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#col","title":"Matrix.col","content":"Matrix.col \ncol \n\n You can also use `Matrix.Col<j>.AsMatrix mtx`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#ofRows","title":"Matrix.ofRows","content":"Matrix.ofRows \nofRows \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#toRows","title":"Matrix.toRows","content":"Matrix.toRows \ntoRows \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#ofCols","title":"Matrix.ofCols","content":"Matrix.ofCols \nofCols \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#toCols","title":"Matrix.toCols","content":"Matrix.toCols \ntoCols \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#transpose","title":"Matrix.transpose","content":"Matrix.transpose \ntranspose \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#matrixProduct","title":"Matrix.matrixProduct","content":"Matrix.matrixProduct \nmatrixProduct \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#kroneckerProduct","title":"Matrix.kroneckerProduct","content":"Matrix.kroneckerProduct \nkroneckerProduct \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#kroneckerSum","title":"Matrix.kroneckerSum","content":"Matrix.kroneckerSum \nkroneckerSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#directSum","title":"Matrix.directSum","content":"Matrix.directSum \ndirectSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#verticalSum","title":"Matrix.verticalSum","content":"Matrix.verticalSum \nverticalSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#horizontalSum","title":"Matrix.horizontalSum","content":"Matrix.horizontalSum \nhorizontalSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix.html#hadamardProduct","title":"Matrix.hadamardProduct","content":"Matrix.hadamardProduct \nhadamardProduct \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrixoperators.html","title":"MatrixOperators","content":"MatrixOperators \n \nMatrixOperators.vector \nvector \nMatrixOperators.matrix \nmatrix \nMatrixOperators.( |Vector| ) \n( |Vector| ) \nMatrixOperators.( |Matrix| ) \n( |Matrix| )"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrixoperators.html#vector","title":"MatrixOperators.vector","content":"MatrixOperators.vector \nvector \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrixoperators.html#matrix","title":"MatrixOperators.matrix","content":"MatrixOperators.matrix \nmatrix \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrixoperators.html#( |Vector| )","title":"MatrixOperators.( |Vector| )","content":"MatrixOperators.( |Vector| ) \n( |Vector| ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrixoperators.html#( |Matrix| )","title":"MatrixOperators.( |Matrix| )","content":"MatrixOperators.( |Matrix| ) \n( |Matrix| ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html","title":"NonEmptyList","content":"NonEmptyList \n\n Basic operations on NonEmptyList\n \nNonEmptyList.create \ncreate \nNonEmptyList.singleton \nsingleton \nNonEmptyList.toList \ntoList \nNonEmptyList.toSeq \ntoSeq \nNonEmptyList.toArray \ntoArray \nNonEmptyList.ofArray \nofArray \nNonEmptyList.ofList \nofList \nNonEmptyList.ofSeq \nofSeq \nNonEmptyList.length \nlength \nNonEmptyList.map \nmap \nNonEmptyList.mapi \nmapi \nNonEmptyList.unzip \nunzip \nNonEmptyList.zip \nzip \nNonEmptyList.cons \ncons \nNonEmptyList.head \nhead \nNonEmptyList.tail \ntail \nNonEmptyList.tails \ntails \nNonEmptyList.traverse \ntraverse \nNonEmptyList.average \naverage \nNonEmptyList.averageBy \naverageBy \nNonEmptyList.reduce \nreduce \nNonEmptyList.reduceBack \nreduceBack \nNonEmptyList.max \nmax \nNonEmptyList.maxBy \nmaxBy \nNonEmptyList.min \nmin \nNonEmptyList.minBy \nminBy \nNonEmptyList.range \nrange \nNonEmptyList.choice \nchoice \nNonEmptyList.tryOfList \ntryOfList \nNonEmptyList.ofNonEmptySeq \nofNonEmptySeq \nNonEmptyList.toNonEmptySeq \ntoNonEmptySeq"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#create","title":"NonEmptyList.create","content":"NonEmptyList.create \ncreate \nBuilds a non empty list."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#singleton","title":"NonEmptyList.singleton","content":"NonEmptyList.singleton \nsingleton \nBuilds a non empty list with a single element."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#toList","title":"NonEmptyList.toList","content":"NonEmptyList.toList \ntoList \nBuilds a list from the given non empty list."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#toSeq","title":"NonEmptyList.toSeq","content":"NonEmptyList.toSeq \ntoSeq \nBuilds a sequence from the given non empty list."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#toArray","title":"NonEmptyList.toArray","content":"NonEmptyList.toArray \ntoArray \nBuilds an array from the given non empty list."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#ofArray","title":"NonEmptyList.ofArray","content":"NonEmptyList.ofArray \nofArray \nBuilds a non empty list from the given array. \nThrows exception for empty array"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#ofList","title":"NonEmptyList.ofList","content":"NonEmptyList.ofList \nofList \nBuilds a non empty list from the given list. \nThrows exception for empty list"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#ofSeq","title":"NonEmptyList.ofSeq","content":"NonEmptyList.ofSeq \nofSeq \nBuilds a non empty list from the given sequence. \nThrows exception for empty list"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#length","title":"NonEmptyList.length","content":"NonEmptyList.length \nlength \n\n Returns the length of a non empty list. You can also use property nel.Length.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#map","title":"NonEmptyList.map","content":"NonEmptyList.map \nmap \nBuild a new non empty list whose elements are the results of applying the given function\n to each of the elements of the non empty list."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#mapi","title":"NonEmptyList.mapi","content":"NonEmptyList.mapi \nmapi \nBuild a new non empty list whose elements are the results of applying the given function with index\n to each of the elements of the non empty list."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#unzip","title":"NonEmptyList.unzip","content":"NonEmptyList.unzip \nunzip \nSplits a list of pairs into two lists."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#zip","title":"NonEmptyList.zip","content":"NonEmptyList.zip \nzip \nCombines the two lists into a list of pairs. The two lists must have equal lengths."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#cons","title":"NonEmptyList.cons","content":"NonEmptyList.cons \ncons \n\n Returns a new NonEmptyList with the element added to the beginning.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#head","title":"NonEmptyList.head","content":"NonEmptyList.head \nhead \n\n Returns the first element of a new non empty list. You can also use property nel.Head.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#tail","title":"NonEmptyList.tail","content":"NonEmptyList.tail \ntail \nReturns a new NonEmptyList of the elements trailing the first element. \nThrows exception for empty tail"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#tails","title":"NonEmptyList.tails","content":"NonEmptyList.tails \ntails \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#traverse","title":"NonEmptyList.traverse","content":"NonEmptyList.traverse \ntraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#average","title":"NonEmptyList.average","content":"NonEmptyList.average \naverage \nReturns the average of the elements in the list."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#averageBy","title":"NonEmptyList.averageBy","content":"NonEmptyList.averageBy \naverageBy \nReturns the average of the elements generated by applying the function to each element of the list."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#reduce","title":"NonEmptyList.reduce","content":"NonEmptyList.reduce \nreduce \nApplies a function to each element of the list, threading an accumulator argument\n through the computation. Apply the function to the first two elements of the list.\n Then feed this result into the function along with the third element and so on. \n Return the final result. If the input function is <code>f</code> and the elements are <code>i0...iN</code> then computes \n <code>f (... (f i0 i1) i2 ...) iN</code>."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#reduceBack","title":"NonEmptyList.reduceBack","content":"NonEmptyList.reduceBack \nreduceBack \nApplies a function to each element of the list, starting from the end, threading an accumulator argument\n through the computation. If the input function is <code>f</code> and the elements are <code>i0...iN</code> then computes \n <code>f i0 (...(f iN-1 iN))</code>."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#max","title":"NonEmptyList.max","content":"NonEmptyList.max \nmax \nReturns the greatest of all elements of the list, compared via Operators.max."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#maxBy","title":"NonEmptyList.maxBy","content":"NonEmptyList.maxBy \nmaxBy \nReturns the greatest of all elements of the list, compared via Operators.max on the function result."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#min","title":"NonEmptyList.min","content":"NonEmptyList.min \nmin \nReturns the lowest of all elements of the list, compared via Operators.min."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#minBy","title":"NonEmptyList.minBy","content":"NonEmptyList.minBy \nminBy \nReturns the lowest of all elements of the list, compared via Operators.min on the function result"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#range","title":"NonEmptyList.range","content":"NonEmptyList.range \nrange \n\n Equivalent to [start..stop] on regular lists.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#choice","title":"NonEmptyList.choice","content":"NonEmptyList.choice \nchoice \n\n Reduces using alternative operator `<|>`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#tryOfList","title":"NonEmptyList.tryOfList","content":"NonEmptyList.tryOfList \ntryOfList \n\n Transforms a list to a NonEmptyList, returning an option to signal when the original list was empty.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#ofNonEmptySeq","title":"NonEmptyList.ofNonEmptySeq","content":"NonEmptyList.ofNonEmptySeq \nofNonEmptySeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist.html#toNonEmptySeq","title":"NonEmptyList.toNonEmptySeq","content":"NonEmptyList.toNonEmptySeq \ntoNonEmptySeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylistbuilder.html","title":"NonEmptyListBuilder","content":"NonEmptyListBuilder \n \nNonEmptyListBuilder.NelBuilder \nNelBuilder \nNonEmptyListBuilder.nel \nnel \nNonEmptyListBuilder.nelist \nnelist"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylistbuilder.html#nel","title":"NonEmptyListBuilder.nel","content":"NonEmptyListBuilder.nel \nnel \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylistbuilder.html#nelist","title":"NonEmptyListBuilder.nelist","content":"NonEmptyListBuilder.nelist \nnelist \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylistbuilder-nelbuilder.html","title":"NelBuilder","content":"NelBuilder \n \nNelBuilder.( .ctor ) \n( .ctor ) \nNelBuilder.Combine \nCombine \nNelBuilder.Delay \nDelay \nNelBuilder.Run \nRun \nNelBuilder.Yield \nYield \nNelBuilder.Zero \nZero"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylistbuilder-nelbuilder.html#( .ctor )","title":"NelBuilder.( .ctor )","content":"NelBuilder.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylistbuilder-nelbuilder.html#Combine","title":"NelBuilder.Combine","content":"NelBuilder.Combine \nCombine \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylistbuilder-nelbuilder.html#Delay","title":"NelBuilder.Delay","content":"NelBuilder.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylistbuilder-nelbuilder.html#Run","title":"NelBuilder.Run","content":"NelBuilder.Run \nRun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylistbuilder-nelbuilder.html#Yield","title":"NelBuilder.Yield","content":"NelBuilder.Yield \nYield \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylistbuilder-nelbuilder.html#Zero","title":"NelBuilder.Zero","content":"NelBuilder.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylistbuilderextensions.html","title":"NonEmptyListBuilderExtensions","content":"NonEmptyListBuilderExtensions \n \nNonEmptyListBuilderExtensions.Combine \nCombine \nNonEmptyListBuilderExtensions.Run \nRun"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylistbuilderextensions.html#Combine","title":"NonEmptyListBuilderExtensions.Combine","content":"NonEmptyListBuilderExtensions.Combine \nCombine \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylistbuilderextensions.html#Run","title":"NonEmptyListBuilderExtensions.Run","content":"NonEmptyListBuilderExtensions.Run \nRun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html","title":"NonEmptyMap","content":"NonEmptyMap \n\n Basic operations on NonEmptyMap\n \nNonEmptyMap.create \ncreate \nNonEmptyMap.singleton \nsingleton \nNonEmptyMap.add \nadd \nNonEmptyMap.toList \ntoList \nNonEmptyMap.toNonEmptyList \ntoNonEmptyList \nNonEmptyMap.toSeq \ntoSeq \nNonEmptyMap.toNonEmptySeq \ntoNonEmptySeq \nNonEmptyMap.toArray \ntoArray \nNonEmptyMap.toMap \ntoMap \nNonEmptyMap.ofArray \nofArray \nNonEmptyMap.ofList \nofList \nNonEmptyMap.ofNonEmptyList \nofNonEmptyList \nNonEmptyMap.ofSeq \nofSeq \nNonEmptyMap.ofNonEmptySeq \nofNonEmptySeq \nNonEmptyMap.ofMap \nofMap \nNonEmptyMap.tryOfMap \ntryOfMap \nNonEmptyMap.find \nfind \nNonEmptyMap.tryPick \ntryPick \nNonEmptyMap.pick \npick \nNonEmptyMap.foldBack \nfoldBack \nNonEmptyMap.fold \nfold \nNonEmptyMap.iter \niter \nNonEmptyMap.exists \nexists \nNonEmptyMap.forall \nforall \nNonEmptyMap.map \nmap \nNonEmptyMap.containsKey \ncontainsKey \nNonEmptyMap.tryFind \ntryFind \nNonEmptyMap.findKey \nfindKey \nNonEmptyMap.tryFindKey \ntryFindKey \nNonEmptyMap.count \ncount \nNonEmptyMap.reduce \nreduce \nNonEmptyMap.reduceBack \nreduceBack \nNonEmptyMap.keys \nkeys \nNonEmptyMap.values \nvalues \nNonEmptyMap.mapValues \nmapValues \nNonEmptyMap.iterValues \niterValues \nNonEmptyMap.unzip \nunzip \nNonEmptyMap.unionWith \nunionWith \nNonEmptyMap.union \nunion \nNonEmptyMap.traverse \ntraverse \nNonEmptyMap.traversei \ntraversei"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#create","title":"NonEmptyMap.create","content":"NonEmptyMap.create \ncreate \nBuilds a non empty map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#singleton","title":"NonEmptyMap.singleton","content":"NonEmptyMap.singleton \nsingleton \nBuilds a non empty map with a single element."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#add","title":"NonEmptyMap.add","content":"NonEmptyMap.add \nadd \nReturns a new map with the binding added to the given map.\n If a binding with the given key already exists in the input map, the existing binding is replaced by the new binding in the result map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#toList","title":"NonEmptyMap.toList","content":"NonEmptyMap.toList \ntoList \nBuilds a list from the given non empty map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#toNonEmptyList","title":"NonEmptyMap.toNonEmptyList","content":"NonEmptyMap.toNonEmptyList \ntoNonEmptyList \nBuilds a non-empty list from the given non empty map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#toSeq","title":"NonEmptyMap.toSeq","content":"NonEmptyMap.toSeq \ntoSeq \nBuilds a sequence from the given non empty map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#toNonEmptySeq","title":"NonEmptyMap.toNonEmptySeq","content":"NonEmptyMap.toNonEmptySeq \ntoNonEmptySeq \nBuilds a non-empty sequence from the given non empty map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#toArray","title":"NonEmptyMap.toArray","content":"NonEmptyMap.toArray \ntoArray \nBuilds an array from the given non empty map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#toMap","title":"NonEmptyMap.toMap","content":"NonEmptyMap.toMap \ntoMap \nBuilds a map from the given non empty map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#ofArray","title":"NonEmptyMap.ofArray","content":"NonEmptyMap.ofArray \nofArray \nBuilds a non empty map from the given array. \nThrows exception for empty array"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#ofList","title":"NonEmptyMap.ofList","content":"NonEmptyMap.ofList \nofList \nBuilds a non empty map from the given list. \nThrows exception for empty list"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#ofNonEmptyList","title":"NonEmptyMap.ofNonEmptyList","content":"NonEmptyMap.ofNonEmptyList \nofNonEmptyList \nBuilds a non empty map from the given non-empty list."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#ofSeq","title":"NonEmptyMap.ofSeq","content":"NonEmptyMap.ofSeq \nofSeq \nBuilds a non empty map from the given sequence. \nThrows exception for empty sequence"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#ofNonEmptySeq","title":"NonEmptyMap.ofNonEmptySeq","content":"NonEmptyMap.ofNonEmptySeq \nofNonEmptySeq \nBuilds a non empty map from the given non-empty sequence."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#ofMap","title":"NonEmptyMap.ofMap","content":"NonEmptyMap.ofMap \nofMap \nBuilds a non empty map from the given map. \nThrows exception for empty map"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#tryOfMap","title":"NonEmptyMap.tryOfMap","content":"NonEmptyMap.tryOfMap \ntryOfMap \n\n Transforms a map to a NonEmptyMap, returning an option to signal when the original map was empty.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#find","title":"NonEmptyMap.find","content":"NonEmptyMap.find \nfind \nLookup an element in the map, raising <code>KeyNotFoundException</code> if no binding\n exists in the map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#tryPick","title":"NonEmptyMap.tryPick","content":"NonEmptyMap.tryPick \ntryPick \nSearches the map looking for the first element where the given function returns a <code>Some</code> value."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#pick","title":"NonEmptyMap.pick","content":"NonEmptyMap.pick \npick \nSearches the map looking for the first element where the given function returns a <code>Some</code> value"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#foldBack","title":"NonEmptyMap.foldBack","content":"NonEmptyMap.foldBack \nfoldBack \nFolds over the bindings in the map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#fold","title":"NonEmptyMap.fold","content":"NonEmptyMap.fold \nfold \nFolds over the bindings in the map "},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#iter","title":"NonEmptyMap.iter","content":"NonEmptyMap.iter \niter \nApplies the given function to each binding in the dictionary"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#exists","title":"NonEmptyMap.exists","content":"NonEmptyMap.exists \nexists \nReturns true if the given predicate returns true for one of the\n bindings in the map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#forall","title":"NonEmptyMap.forall","content":"NonEmptyMap.forall \nforall \nReturns true if the given predicate returns true for all of the\n bindings in the map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#map","title":"NonEmptyMap.map","content":"NonEmptyMap.map \nmap \nBuilds a new collection whose elements are the results of applying the given function\n to each of the elements of the collection. The key passed to the\n function indicates the key of element being transformed."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#containsKey","title":"NonEmptyMap.containsKey","content":"NonEmptyMap.containsKey \ncontainsKey \nTests if an element is in the domain of the map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#tryFind","title":"NonEmptyMap.tryFind","content":"NonEmptyMap.tryFind \ntryFind \nLookup an element in the map, returning a <code>Some</code> value if the element is in the domain\n of the map and <code>None</code> if not."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#findKey","title":"NonEmptyMap.findKey","content":"NonEmptyMap.findKey \nfindKey \nEvaluates the function on each mapping in the collection. Returns the key for the first mapping\n where the function returns 'true'. Raise <code>KeyNotFoundException</code> if no such element exists."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#tryFindKey","title":"NonEmptyMap.tryFindKey","content":"NonEmptyMap.tryFindKey \ntryFindKey \nReturns the key of the first mapping in the collection that satisfies the given predicate.\n Returns 'None' if no such element exists."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#count","title":"NonEmptyMap.count","content":"NonEmptyMap.count \ncount \nThe number of bindings in the map."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#reduce","title":"NonEmptyMap.reduce","content":"NonEmptyMap.reduce \nreduce \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#reduceBack","title":"NonEmptyMap.reduceBack","content":"NonEmptyMap.reduceBack \nreduceBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#keys","title":"NonEmptyMap.keys","content":"NonEmptyMap.keys \nkeys \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#values","title":"NonEmptyMap.values","content":"NonEmptyMap.values \nvalues \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#mapValues","title":"NonEmptyMap.mapValues","content":"NonEmptyMap.mapValues \nmapValues \nMap values of the original Map. \nKeys remain unchanged."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#iterValues","title":"NonEmptyMap.iterValues","content":"NonEmptyMap.iterValues \niterValues \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#unzip","title":"NonEmptyMap.unzip","content":"NonEmptyMap.unzip \nunzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#unionWith","title":"NonEmptyMap.unionWith","content":"NonEmptyMap.unionWith \nunionWith \n\n Returns the union of two maps, using the combiner function for duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#union","title":"NonEmptyMap.union","content":"NonEmptyMap.union \nunion \n\n Returns the union of two maps, preferring values from the first in case of duplicate keys.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#traverse","title":"NonEmptyMap.traverse","content":"NonEmptyMap.traverse \ntraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap.html#traversei","title":"NonEmptyMap.traversei","content":"NonEmptyMap.traversei \ntraversei \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html","title":"NonEmptySeq","content":"NonEmptySeq \n \nNonEmptySeq.create \ncreate \nNonEmptySeq.( |.. ) \n( |.. ) \nNonEmptySeq.( ..| ) \n( ..| ) \nNonEmptySeq.allPairs \nallPairs \nNonEmptySeq.append \nappend \nNonEmptySeq.appendSeq \nappendSeq \nNonEmptySeq.appendSeqBack \nappendSeqBack \nNonEmptySeq.cache \ncache \nNonEmptySeq.collect \ncollect \nNonEmptySeq.concat \nconcat \nNonEmptySeq.delay \ndelay \nNonEmptySeq.head \nhead \nNonEmptySeq.indexed \nindexed \nNonEmptySeq.initInfinite \ninitInfinite \nNonEmptySeq.map \nmap \nNonEmptySeq.map2 \nmap2 \nNonEmptySeq.mapFold \nmapFold \nNonEmptySeq.mapFoldBack \nmapFoldBack \nNonEmptySeq.map3 \nmap3 \nNonEmptySeq.mapi \nmapi \nNonEmptySeq.mapi2 \nmapi2 \nNonEmptySeq.ofSeq \nofSeq \nNonEmptySeq.tryOfSeq \ntryOfSeq \nNonEmptySeq.ofArray \nofArray \nNonEmptySeq.tryOfArray \ntryOfArray \nNonEmptySeq.ofList \nofList \nNonEmptySeq.tryOfList \ntryOfList \nNonEmptySeq.pairwise \npairwise \nNonEmptySeq.permute \npermute \nNonEmptySeq.readonly \nreadonly \nNonEmptySeq.rev \nrev \nNonEmptySeq.scan \nscan \nNonEmptySeq.scanBack \nscanBack \nNonEmptySeq.singleton \nsingleton \nNonEmptySeq.sort \nsort \nNonEmptySeq.sortWith \nsortWith \nNonEmptySeq.sortBy \nsortBy \nNonEmptySeq.sortDescending \nsortDescending \nNonEmptySeq.sortByDescending \nsortByDescending \nNonEmptySeq.tail \ntail \nNonEmptySeq.unfold \nunfold \nNonEmptySeq.zip \nzip \nNonEmptySeq.zip3 \nzip3 \nNonEmptySeq.bind \nbind \nNonEmptySeq.apply \napply \nNonEmptySeq.lift2 \nlift2 \nNonEmptySeq.replace \nreplace"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#create","title":"NonEmptySeq.create","content":"NonEmptySeq.create \ncreate \nBuilds a non empty sequence."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#( |.. )","title":"NonEmptySeq.( |.. )","content":"NonEmptySeq.( |.. ) \n( |.. ) \n\n Creates a NonEmptySeq range, containing at least the first element of the range\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#( ..| )","title":"NonEmptySeq.( ..| )","content":"NonEmptySeq.( ..| ) \n( ..| ) \n\n Creates a NonEmptySeq range, containing at least the last element of the range\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#allPairs","title":"NonEmptySeq.allPairs","content":"NonEmptySeq.allPairs \nallPairs \nReturns a new sequence that contains all pairings of elements from the first and second sequences."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#append","title":"NonEmptySeq.append","content":"NonEmptySeq.append \nappend \nWraps the two given enumerations as a single concatenated\n enumeration. \nThe returned sequence may be passed between threads safely. However, \n individual IEnumerator values generated from the returned sequence should not be accessed\n concurrently."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#appendSeq","title":"NonEmptySeq.appendSeq","content":"NonEmptySeq.appendSeq \nappendSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#appendSeqBack","title":"NonEmptySeq.appendSeqBack","content":"NonEmptySeq.appendSeqBack \nappendSeqBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#cache","title":"NonEmptySeq.cache","content":"NonEmptySeq.cache \ncache \nReturns a sequence that corresponds to a cached version of the input sequence.\n This result sequence will have the same elements as the input sequence. The result \n can be enumerated multiple times. The input sequence will be enumerated at most \n once and only as far as is necessary.    Caching a sequence is typically useful when repeatedly\n evaluating items in the original sequence is computationally expensive or if\n iterating the sequence causes side-effects that the user does not want to be\n repeated multiple times.\n\n Enumeration of the result sequence is thread safe in the sense that multiple independent IEnumerator\n values may be used simultaneously from different threads (accesses to \n the internal lookaside table are thread safe). Each individual IEnumerator\n is not typically thread safe and should not be accessed concurrently. \nOnce enumeration of the input sequence has started,\n it's enumerator will be kept live by this object until the enumeration has completed.\n At that point, the enumerator will be disposed. \n\n The enumerator may be disposed and underlying cache storage released by \n converting the returned sequence object to type IDisposable, and calling the Dispose method\n on this object. The sequence object may then be re-enumerated and a fresh enumerator will\n be used."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#collect","title":"NonEmptySeq.collect","content":"NonEmptySeq.collect \ncollect \nApplies the given function to each element of the sequence and concatenates all the\n results. \nRemember sequence is lazy, effects are delayed until it is enumerated."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#concat","title":"NonEmptySeq.concat","content":"NonEmptySeq.concat \nconcat \nCombines the given enumeration-of-enumerations as a single concatenated\n enumeration. \nThe returned sequence may be passed between threads safely. However, \n individual IEnumerator values generated from the returned sequence should not be accessed concurrently."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#delay","title":"NonEmptySeq.delay","content":"NonEmptySeq.delay \ndelay \nReturns a sequence that is built from the given delayed specification of a\n sequence. \nThe input function is evaluated each time an IEnumerator for the sequence \n is requested."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#head","title":"NonEmptySeq.head","content":"NonEmptySeq.head \nhead \nReturns the first element of the sequence."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#indexed","title":"NonEmptySeq.indexed","content":"NonEmptySeq.indexed \nindexed \nBuilds a new collection whose elements are the corresponding elements of the input collection\n paired with the integer index (from 0) of each element."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#initInfinite","title":"NonEmptySeq.initInfinite","content":"NonEmptySeq.initInfinite \ninitInfinite \nGenerates a new sequence which, when iterated, will return successive\n elements by calling the given function.    The results of calling the function\n will not be saved, that is the function will be reapplied as necessary to\n regenerate the elements.    The function is passed the index of the item being\n generated. \nThe returned sequence may be passed between threads safely. However, \n individual IEnumerator values generated from the returned sequence should not be accessed concurrently.\n Iteration can continue up to <code>Int32.MaxValue</code>."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#map","title":"NonEmptySeq.map","content":"NonEmptySeq.map \nmap \nBuilds a new collection whose elements are the results of applying the given function\n to each of the elements of the collection.    The given function will be applied\n as elements are demanded using the <code>MoveNext</code> method on enumerators retrieved from the\n object. \nThe returned sequence may be passed between threads safely. However, \n individual IEnumerator values generated from the returned sequence should not be accessed concurrently."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#map2","title":"NonEmptySeq.map2","content":"NonEmptySeq.map2 \nmap2 \nBuilds a new collection whose elements are the results of applying the given function\n to the corresponding pairs of elements from the two sequences. If one input sequence is shorter than \n the other then the remaining elements of the longer sequence are ignored."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#mapFold","title":"NonEmptySeq.mapFold","content":"NonEmptySeq.mapFold \nmapFold \nCombines map and fold. Builds a new collection whose elements are the results of applying the given function\n to each of the elements of the collection. The function is also used to accumulate a final value. \nThis function digests the whole initial sequence as soon as it is called. As a result this function should\n not be used with large or infinite sequences.This function consumes the whole input sequence before yielding the first element of the result sequence."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#mapFoldBack","title":"NonEmptySeq.mapFoldBack","content":"NonEmptySeq.mapFoldBack \nmapFoldBack \nCombines map and foldBack. Builds a new collection whose elements are the results of applying the given function\n to each of the elements of the collection. The function is also used to accumulate a final value. \nThis function digests the whole initial sequence as soon as it is called. As a result this function should\n not be used with large or infinite sequences.This function consumes the whole input sequence before yielding the first element of the result sequence."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#map3","title":"NonEmptySeq.map3","content":"NonEmptySeq.map3 \nmap3 \nBuilds a new collection whose elements are the results of applying the given function\n to the corresponding triples of elements from the three sequences. If one input sequence if shorter than\n the others then the remaining elements of the longer sequences are ignored."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#mapi","title":"NonEmptySeq.mapi","content":"NonEmptySeq.mapi \nmapi \nBuilds a new collection whose elements are the results of applying the given function\n to each of the elements of the collection. The integer index passed to the\n function indicates the index (from 0) of element being transformed."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#mapi2","title":"NonEmptySeq.mapi2","content":"NonEmptySeq.mapi2 \nmapi2 \nBuilds a new collection whose elements are the results of applying the given function\n to the corresponding pairs of elements from the two sequences. If one input sequence is shorter than \n the other then the remaining elements of the longer sequence are ignored. The integer index passed to the\n function indicates the index (from 0) of element being transformed."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#ofSeq","title":"NonEmptySeq.ofSeq","content":"NonEmptySeq.ofSeq \nofSeq \nBuilds a non empty sequence from the given sequence. \nThrows exception for empty sequence"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#tryOfSeq","title":"NonEmptySeq.tryOfSeq","content":"NonEmptySeq.tryOfSeq \ntryOfSeq \n\n Transforms a sequence to a NonEmptySeq, returning an option to signal when the original sequence was empty.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#ofArray","title":"NonEmptySeq.ofArray","content":"NonEmptySeq.ofArray \nofArray \nBuilds a non empty sequence from the given array. \nThrows exception for empty array"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#tryOfArray","title":"NonEmptySeq.tryOfArray","content":"NonEmptySeq.tryOfArray \ntryOfArray \n\n Transforms a array to a NonEmptySeq, returning an option to signal when the original array was empty.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#ofList","title":"NonEmptySeq.ofList","content":"NonEmptySeq.ofList \nofList \nBuilds a non empty sequence from the given list. \nThrows exception for empty list"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#tryOfList","title":"NonEmptySeq.tryOfList","content":"NonEmptySeq.tryOfList \ntryOfList \n\n Transforms a list to a NonEmptySeq, returning an option to signal when the original list was empty.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#pairwise","title":"NonEmptySeq.pairwise","content":"NonEmptySeq.pairwise \npairwise \nReturns a sequence of each element in the input sequence and its predecessor, with the\n exception of the first element which is only returned as the predecessor of the second element."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#permute","title":"NonEmptySeq.permute","content":"NonEmptySeq.permute \npermute \nReturns a sequence with all elements permuted according to the\n specified permutation. \nNote that this function returns a sequence that digests the whole initial sequence as soon as\n that sequence is iterated. As a result this function should not be used with\n large or infinite sequences.This function consumes the whole input sequence before yielding the first element of the result sequence."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#readonly","title":"NonEmptySeq.readonly","content":"NonEmptySeq.readonly \nreadonly \nBuilds a new sequence object that delegates to the given sequence object. This ensures \n the original sequence cannot be rediscovered and mutated by a type cast. For example, \n if given an array the returned sequence will return the elements of the array, but\n you cannot cast the returned sequence object to an array."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#rev","title":"NonEmptySeq.rev","content":"NonEmptySeq.rev \nrev \nReturns a new sequence with the elements in reverse order. \nThis function consumes the whole input sequence before yielding the first element of the reversed sequence."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#scan","title":"NonEmptySeq.scan","content":"NonEmptySeq.scan \nscan \nLike fold, but computes on-demand and returns the sequence of intermediary and final results."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#scanBack","title":"NonEmptySeq.scanBack","content":"NonEmptySeq.scanBack \nscanBack \nLike <code>foldBack</code>, but returns the sequence of intermediary and final results. \nThis function returns a sequence that digests the whole initial sequence as soon as that\n sequence is iterated. As a result this function should not be used with large or infinite sequences.\n This function consumes the whole input sequence before yielding the first element of the result sequence."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#singleton","title":"NonEmptySeq.singleton","content":"NonEmptySeq.singleton \nsingleton \nReturns a sequence that yields one item only."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#sort","title":"NonEmptySeq.sort","content":"NonEmptySeq.sort \nsort \nYields a sequence ordered by keys. \nThis function returns a sequence that digests the whole initial sequence as soon as \n that sequence is iterated. As a result this function should not be used with \n large or infinite sequences. The function makes no assumption on the ordering of the original \n sequence.\n\n This is a stable sort, that is the original order of equal elements is preserved.This function consumes the whole input sequence before yielding the first element of the result sequence."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#sortWith","title":"NonEmptySeq.sortWith","content":"NonEmptySeq.sortWith \nsortWith \nYields a sequence ordered using the given comparison function. \nThis function returns a sequence that digests the whole initial sequence as soon as\n that sequence is iterated. As a result this function should not be used with\n large or infinite sequences. The function makes no assumption on the ordering of the original\n sequence.\n\n This is a stable sort, that is the original order of equal elements is preserved.This function consumes the whole input sequence before yielding the first element of the result sequence."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#sortBy","title":"NonEmptySeq.sortBy","content":"NonEmptySeq.sortBy \nsortBy \nApplies a key-generating function to each element of a sequence and yield a sequence ordered\n by keys.    The keys are compared using generic comparison as implemented by <code>Operators.compare</code>. \nThis function returns a sequence that digests the whole initial sequence as soon as \n that sequence is iterated. As a result this function should not be used with \n large or infinite sequences. The function makes no assumption on the ordering of the original \n sequence.\n\n This is a stable sort, that is the original order of equal elements is preserved."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#sortDescending","title":"NonEmptySeq.sortDescending","content":"NonEmptySeq.sortDescending \nsortDescending \nYields a sequence ordered descending by keys. \nThis function returns a sequence that digests the whole initial sequence as soon as \n that sequence is iterated. As a result this function should not be used with \n large or infinite sequences. The function makes no assumption on the ordering of the original \n sequence.\n\n This is a stable sort, that is the original order of equal elements is preserved."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#sortByDescending","title":"NonEmptySeq.sortByDescending","content":"NonEmptySeq.sortByDescending \nsortByDescending \nApplies a key-generating function to each element of a sequence and yield a sequence ordered\n descending by keys.    The keys are compared using generic comparison as implemented by <code>Operators.compare</code>. \nThis function returns a sequence that digests the whole initial sequence as soon as \n that sequence is iterated. As a result this function should not be used with \n large or infinite sequences. The function makes no assumption on the ordering of the original \n sequence.\n\n This is a stable sort, that is the original order of equal elements is preserved."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#tail","title":"NonEmptySeq.tail","content":"NonEmptySeq.tail \ntail \nReturns a sequence that skips 1 element of the underlying sequence and then yields the\n remaining elements of the sequence."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#unfold","title":"NonEmptySeq.unfold","content":"NonEmptySeq.unfold \nunfold \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#zip","title":"NonEmptySeq.zip","content":"NonEmptySeq.zip \nzip \nCombines the two sequences into a list of pairs. The two sequences need not have equal lengths:\n when one sequence is exhausted any remaining elements in the other\n sequence are ignored."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#zip3","title":"NonEmptySeq.zip3","content":"NonEmptySeq.zip3 \nzip3 \nCombines the three sequences into a list of triples. The sequences need not have equal lengths:\n when one sequence is exhausted any remaining elements in the other\n sequences are ignored."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#bind","title":"NonEmptySeq.bind","content":"NonEmptySeq.bind \nbind \nApplies the given function to each element of the NonEmptySequence and concatenates all the\n results. \nRemember NonEmptySequence is lazy, effects are delayed until it is enumerated.This is the same as Seq.collect but the type of the mapping function is not flexible."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#apply","title":"NonEmptySeq.apply","content":"NonEmptySeq.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#lift2","title":"NonEmptySeq.lift2","content":"NonEmptySeq.lift2 \nlift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq.html#replace","title":"NonEmptySeq.replace","content":"NonEmptySeq.replace \nreplace \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseqbuilder.html","title":"NonEmptySeqBuilder","content":"NonEmptySeqBuilder \n \nNonEmptySeqBuilder.NESeqBuilder \nNESeqBuilder \nNonEmptySeqBuilder.neseq \nneseq"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseqbuilder.html#neseq","title":"NonEmptySeqBuilder.neseq","content":"NonEmptySeqBuilder.neseq \nneseq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseqbuilder-neseqbuilder.html","title":"NESeqBuilder","content":"NESeqBuilder \n \nNESeqBuilder.( .ctor ) \n( .ctor ) \nNESeqBuilder.Combine \nCombine \nNESeqBuilder.Delay \nDelay \nNESeqBuilder.Yield \nYield \nNESeqBuilder.Zero \nZero"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseqbuilder-neseqbuilder.html#( .ctor )","title":"NESeqBuilder.( .ctor )","content":"NESeqBuilder.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseqbuilder-neseqbuilder.html#Combine","title":"NESeqBuilder.Combine","content":"NESeqBuilder.Combine \nCombine \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseqbuilder-neseqbuilder.html#Delay","title":"NESeqBuilder.Delay","content":"NESeqBuilder.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseqbuilder-neseqbuilder.html#Yield","title":"NESeqBuilder.Yield","content":"NESeqBuilder.Yield \nYield \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseqbuilder-neseqbuilder.html#Zero","title":"NESeqBuilder.Zero","content":"NESeqBuilder.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html","title":"NonEmptySet","content":"NonEmptySet \n\n Basic operations on NonEmptySet\n \nNonEmptySet.create \ncreate \nNonEmptySet.singleton \nsingleton \nNonEmptySet.toList \ntoList \nNonEmptySet.toSeq \ntoSeq \nNonEmptySet.toArray \ntoArray \nNonEmptySet.toSet \ntoSet \nNonEmptySet.toNonEmptyList \ntoNonEmptyList \nNonEmptySet.toNonEmptySeq \ntoNonEmptySeq \nNonEmptySet.ofArray \nofArray \nNonEmptySet.ofList \nofList \nNonEmptySet.ofNonEmptyList \nofNonEmptyList \nNonEmptySet.ofSeq \nofSeq \nNonEmptySet.ofNonEmptySeq \nofNonEmptySeq \nNonEmptySet.ofSet \nofSet \nNonEmptySet.tryOfSet \ntryOfSet \nNonEmptySet.count \ncount \nNonEmptySet.add \nadd \nNonEmptySet.contains \ncontains \nNonEmptySet.isSubset \nisSubset \nNonEmptySet.isProperSubset \nisProperSubset \nNonEmptySet.isSuperset \nisSuperset \nNonEmptySet.isProperSuperset \nisProperSuperset \nNonEmptySet.exists \nexists \nNonEmptySet.map \nmap \nNonEmptySet.forall \nforall \nNonEmptySet.union \nunion \nNonEmptySet.unionMany \nunionMany \nNonEmptySet.iter \niter \nNonEmptySet.minElement \nminElement \nNonEmptySet.maxElement \nmaxElement \nNonEmptySet.fold \nfold \nNonEmptySet.foldBack \nfoldBack \nNonEmptySet.reduce \nreduce"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#create","title":"NonEmptySet.create","content":"NonEmptySet.create \ncreate \nBuilds a non empty set."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#singleton","title":"NonEmptySet.singleton","content":"NonEmptySet.singleton \nsingleton \nBuilds a non empty set with a single element."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#toList","title":"NonEmptySet.toList","content":"NonEmptySet.toList \ntoList \nBuilds a list from the given non empty set."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#toSeq","title":"NonEmptySet.toSeq","content":"NonEmptySet.toSeq \ntoSeq \nBuilds a sequence from the given non empty set."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#toArray","title":"NonEmptySet.toArray","content":"NonEmptySet.toArray \ntoArray \nBuilds an array from the given non empty set."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#toSet","title":"NonEmptySet.toSet","content":"NonEmptySet.toSet \ntoSet \nBuilds a set from the given non empty set."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#toNonEmptyList","title":"NonEmptySet.toNonEmptyList","content":"NonEmptySet.toNonEmptyList \ntoNonEmptyList \nBuilds a non-empty list from the given non empty set."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#toNonEmptySeq","title":"NonEmptySet.toNonEmptySeq","content":"NonEmptySet.toNonEmptySeq \ntoNonEmptySeq \nBuilds a non-empty sequence from the given non empty set."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#ofArray","title":"NonEmptySet.ofArray","content":"NonEmptySet.ofArray \nofArray \nBuilds a non empty set from the given array. \nThrows exception for empty array"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#ofList","title":"NonEmptySet.ofList","content":"NonEmptySet.ofList \nofList \nBuilds a non empty set from the given list. \nThrows exception for empty list"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#ofNonEmptyList","title":"NonEmptySet.ofNonEmptyList","content":"NonEmptySet.ofNonEmptyList \nofNonEmptyList \nBuilds a non empty set from the given non-empty list."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#ofSeq","title":"NonEmptySet.ofSeq","content":"NonEmptySet.ofSeq \nofSeq \nBuilds a non empty set from the given sequence. \nThrows exception for empty sequence"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#ofNonEmptySeq","title":"NonEmptySet.ofNonEmptySeq","content":"NonEmptySet.ofNonEmptySeq \nofNonEmptySeq \nBuilds a non empty set from the given non-empty sequence."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#ofSet","title":"NonEmptySet.ofSet","content":"NonEmptySet.ofSet \nofSet \nBuilds a non empty set from the given set. \nThrows exception for empty set"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#tryOfSet","title":"NonEmptySet.tryOfSet","content":"NonEmptySet.tryOfSet \ntryOfSet \n\n Transforms a set to a NonEmptySet, returning an option to signal when the original set was empty.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#count","title":"NonEmptySet.count","content":"NonEmptySet.count \ncount \n\n Returns the count of a non empty set. You can also use property nes.Count\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#add","title":"NonEmptySet.add","content":"NonEmptySet.add \nadd \nReturns a new set with an element added to the set. No exception is raised if\n the set already contains the given element."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#contains","title":"NonEmptySet.contains","content":"NonEmptySet.contains \ncontains \nEvaluates to \"true\" if the given element is in the given set."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#isSubset","title":"NonEmptySet.isSubset","content":"NonEmptySet.isSubset \nisSubset \nEvaluates to \"true\" if all elements of the first set are in the second"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#isProperSubset","title":"NonEmptySet.isProperSubset","content":"NonEmptySet.isProperSubset \nisProperSubset \nEvaluates to \"true\" if all elements of the first set are in the second, and at least\n one element of the second is not in the first."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#isSuperset","title":"NonEmptySet.isSuperset","content":"NonEmptySet.isSuperset \nisSuperset \nEvaluates to \"true\" if all elements of the second set are in the first."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#isProperSuperset","title":"NonEmptySet.isProperSuperset","content":"NonEmptySet.isProperSuperset \nisProperSuperset \nEvaluates to \"true\" if all elements of the second set are in the first, and at least\n one element of the first is not in the second."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#exists","title":"NonEmptySet.exists","content":"NonEmptySet.exists \nexists \nTests if any element of the collection satisfies the given predicate.\n If the input function is <code>predicate</code> and the elements are <code>i0...iN</code>\n then computes <code>p i0 or ... or p iN</code>."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#map","title":"NonEmptySet.map","content":"NonEmptySet.map \nmap \nReturns a new collection containing the results of applying the\n given function to each element of the input set."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#forall","title":"NonEmptySet.forall","content":"NonEmptySet.forall \nforall \nTests if all elements of the collection satisfy the given predicate.\n If the input function is <code>f</code> and the elements are <code>i0...iN</code> and \"j0...jN\"\n then computes <code>p i0 && ... && p iN</code>."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#union","title":"NonEmptySet.union","content":"NonEmptySet.union \nunion \nComputes the union of the two sets."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#unionMany","title":"NonEmptySet.unionMany","content":"NonEmptySet.unionMany \nunionMany \nComputes the union of a non empty list of sets."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#iter","title":"NonEmptySet.iter","content":"NonEmptySet.iter \niter \nApplies the given function to each element of the set, in order according\n to the comparison function."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#minElement","title":"NonEmptySet.minElement","content":"NonEmptySet.minElement \nminElement \nReturns the lowest element in the set according to the ordering being used for the set."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#maxElement","title":"NonEmptySet.maxElement","content":"NonEmptySet.maxElement \nmaxElement \nReturns the highest element in the set according to the ordering being used for the set."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#fold","title":"NonEmptySet.fold","content":"NonEmptySet.fold \nfold \nApplies the given accumulating function to all the elements of the set"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#foldBack","title":"NonEmptySet.foldBack","content":"NonEmptySet.foldBack \nfoldBack \nApplies the given accumulating function to all the elements of the set."},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset.html#reduce","title":"NonEmptySet.reduce","content":"NonEmptySet.reduce \nreduce \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-option.html","title":"Option","content":"Option \n\n Additional operations on Option\n \nOption.traverse \ntraverse"},{"uri":"/FSharpPlusreference/fsharpplus-data-option.html#traverse","title":"Option.traverse","content":"Option.traverse \ntraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont.html","title":"OptionT","content":"OptionT \n\n Basic operations on OptionT\n \nOptionT.run \nrun \nOptionT.lift \nlift \nOptionT.hoist \nhoist \nOptionT.bind \nbind \nOptionT.apply \napply \nOptionT.map \nmap \nOptionT.map2 \nmap2"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont.html#run","title":"OptionT.run","content":"OptionT.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont.html#lift","title":"OptionT.lift","content":"OptionT.lift \nlift \n\n Embed a Monad<'T> into an OptionT<'Monad<option<'T>>>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont.html#hoist","title":"OptionT.hoist","content":"OptionT.hoist \nhoist \n\n Transform an option<'T,'Error> to an OptionT<'Monad<option<'T,'Error>>>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont.html#bind","title":"OptionT.bind","content":"OptionT.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont.html#apply","title":"OptionT.apply","content":"OptionT.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont.html#map","title":"OptionT.map","content":"OptionT.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont.html#map2","title":"OptionT.map2","content":"OptionT.map2 \nmap2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray.html","title":"ParallelArray","content":"ParallelArray \n\n Basic operations on ParallelArray\n \nParallelArray.run \nrun \nParallelArray.map \nmap \nParallelArray.ap \nap \nParallelArray.map2 \nmap2"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray.html#run","title":"ParallelArray.run","content":"ParallelArray.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray.html#map","title":"ParallelArray.map","content":"ParallelArray.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray.html#ap","title":"ParallelArray.ap","content":"ParallelArray.ap \nap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray.html#map2","title":"ParallelArray.map2","content":"ParallelArray.map2 \nmap2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarrayoperators.html","title":"ParallelArrayOperators","content":"ParallelArrayOperators \n \nParallelArrayOperators.parray \nparray"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarrayoperators.html#parray","title":"ParallelArrayOperators.parray","content":"ParallelArrayOperators.parray \nparray \n\n Creates a parallel array from a normal array.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader.html","title":"Reader","content":"Reader \n\n Basic operations on Reader\n \nReader.run \nrun \nReader.map \nmap \nReader.bind \nbind \nReader.apply \napply \nReader.map2 \nmap2 \nReader.zip \nzip \nReader.ask \nask \nReader.local \nlocal"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader.html#run","title":"Reader.run","content":"Reader.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader.html#map","title":"Reader.map","content":"Reader.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader.html#bind","title":"Reader.bind","content":"Reader.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader.html#apply","title":"Reader.apply","content":"Reader.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader.html#map2","title":"Reader.map2","content":"Reader.map2 \nmap2 \n\n Combines two Readers into one by applying a mapping function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader.html#zip","title":"Reader.zip","content":"Reader.zip \nzip \n\n Zips two Readers into one.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader.html#ask","title":"Reader.ask","content":"Reader.ask \nask \n\n Retrieves the monad environment.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader.html#local","title":"Reader.local","content":"Reader.local \nlocal \n Executes a computation in a modified environment. "},{"uri":"/FSharpPlusreference/fsharpplus-data-readert.html","title":"ReaderT","content":"ReaderT \n\n Basic operations on Reader\n \nReaderT.run \nrun \nReaderT.hoist \nhoist \nReaderT.map \nmap \nReaderT.map2 \nmap2 \nReaderT.apply \napply \nReaderT.zip \nzip \nReaderT.bind \nbind \nReaderT.lift \nlift"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert.html#run","title":"ReaderT.run","content":"ReaderT.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert.html#hoist","title":"ReaderT.hoist","content":"ReaderT.hoist \nhoist \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert.html#map","title":"ReaderT.map","content":"ReaderT.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert.html#map2","title":"ReaderT.map2","content":"ReaderT.map2 \nmap2 \n\n Combines two ReaderTs into one by applying a mapping function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert.html#apply","title":"ReaderT.apply","content":"ReaderT.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert.html#zip","title":"ReaderT.zip","content":"ReaderT.zip \nzip \n\n Zips two ReaderTs into one.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert.html#bind","title":"ReaderT.bind","content":"ReaderT.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert.html#lift","title":"ReaderT.lift","content":"ReaderT.lift \nlift \n\n Embed a Monad<'T> into an ReaderT<'R, 'Monad<'T>>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-result.html","title":"Result","content":"Result \n\n Additional operations on Result\n \nResult.traverse \ntraverse"},{"uri":"/FSharpPlusreference/fsharpplus-data-result.html#traverse","title":"Result.traverse","content":"Result.traverse \ntraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultorexception.html","title":"ResultOrException","content":"ResultOrException \n\n Result<'TSuccess,'TFailure> specialized in 'TFailure = Exception \n \nResultOrException.IsResult \nIsResult \nResultOrException.IsException \nIsException \nResultOrException.Result \nResult \nResultOrException.Exception \nException"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultorexception.html#IsResult","title":"ResultOrException.IsResult","content":"ResultOrException.IsResult \nIsResult \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultorexception.html#IsException","title":"ResultOrException.IsException","content":"ResultOrException.IsException \nIsException \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultorexception.html#Result","title":"ResultOrException.Result","content":"ResultOrException.Result \nResult \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultorexception.html#Exception","title":"ResultOrException.Exception","content":"ResultOrException.Exception \nException \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt.html","title":"ResultT","content":"ResultT \n\n Basic operations on ResultT\n \nResultT.run \nrun \nResultT.lift \nlift \nResultT.hoist \nhoist \nResultT.bind \nbind \nResultT.apply \napply \nResultT.map \nmap \nResultT.map2 \nmap2"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt.html#run","title":"ResultT.run","content":"ResultT.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt.html#lift","title":"ResultT.lift","content":"ResultT.lift \nlift \n\n Embed a Monad<'T> into a ChoiceT<'Monad<Choice<'T,'Error>>>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt.html#hoist","title":"ResultT.hoist","content":"ResultT.hoist \nhoist \n\n Transform a Result<'T,'Error> to a ResultT<'Monad<Result<'T,'Error>>>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt.html#bind","title":"ResultT.bind","content":"ResultT.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt.html#apply","title":"ResultT.apply","content":"ResultT.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt.html#map","title":"ResultT.map","content":"ResultT.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt.html#map2","title":"ResultT.map2","content":"ResultT.map2 \nmap2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seq.html","title":"Seq","content":"Seq \n\n Additional operations on Seq\n \nSeq.sequence \nsequence \nSeq.traverse \ntraverse \nSeq.replicateM \nreplicateM"},{"uri":"/FSharpPlusreference/fsharpplus-data-seq.html#sequence","title":"Seq.sequence","content":"Seq.sequence \nsequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seq.html#traverse","title":"Seq.traverse","content":"Seq.traverse \ntraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seq.html#replicateM","title":"Seq.replicateM","content":"Seq.replicateM \nreplicateM \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt.html","title":"SeqT","content":"SeqT \n\n Basic operations on SeqT\n \nSeqT.run \nrun \nSeqT.lift \nlift \nSeqT.bind \nbind \nSeqT.apply \napply \nSeqT.lift2 \nlift2 \nSeqT.map \nmap"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt.html#run","title":"SeqT.run","content":"SeqT.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt.html#lift","title":"SeqT.lift","content":"SeqT.lift \nlift \n\n Embed a Monad<'T> into a SeqT<'Monad<seq<'T>>>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt.html#bind","title":"SeqT.bind","content":"SeqT.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt.html#apply","title":"SeqT.apply","content":"SeqT.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt.html#lift2","title":"SeqT.lift2","content":"SeqT.lift2 \nlift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt.html#map","title":"SeqT.map","content":"SeqT.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state.html","title":"State","content":"State \n\n Basic operations on State\n \nState.run \nrun \nState.map \nmap \nState.map2 \nmap2 \nState.bind \nbind \nState.apply \napply \nState.eval \neval \nState.exec \nexec \nState.get \nget \nState.gets \ngets \nState.put \nput \nState.modify \nmodify \nState.zip \nzip"},{"uri":"/FSharpPlusreference/fsharpplus-data-state.html#run","title":"State.run","content":"State.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state.html#map","title":"State.map","content":"State.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state.html#map2","title":"State.map2","content":"State.map2 \nmap2 \n\n Combines two States into one by applying a mapping function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state.html#bind","title":"State.bind","content":"State.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state.html#apply","title":"State.apply","content":"State.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state.html#eval","title":"State.eval","content":"State.eval \neval \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state.html#exec","title":"State.exec","content":"State.exec \nexec \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state.html#get","title":"State.get","content":"State.get \nget \n\n Return the state from the internals of the monad.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state.html#gets","title":"State.gets","content":"State.gets \ngets \n\n Get a value which depends on the current state.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state.html#put","title":"State.put","content":"State.put \nput \n\n Replace the state inside the monad.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state.html#modify","title":"State.modify","content":"State.modify \nmodify \n\n Modify the state inside the monad by applying a function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state.html#zip","title":"State.zip","content":"State.zip \nzip \n\n Zips two States into one.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet.html","title":"StateT","content":"StateT \n\n Basic operations on StateT\n \nStateT.run \nrun \nStateT.lift \nlift \nStateT.hoist \nhoist \nStateT.map \nmap \nStateT.map2 \nmap2 \nStateT.apply \napply \nStateT.zip \nzip \nStateT.bind \nbind"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet.html#run","title":"StateT.run","content":"StateT.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet.html#lift","title":"StateT.lift","content":"StateT.lift \nlift \n\n Embed a Monad<'T> into a StateT<'S,'``Monad<'T * 'S>``>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet.html#hoist","title":"StateT.hoist","content":"StateT.hoist \nhoist \n\n Transform a State<'S, 'T> to a StateT<'S, '``Monad<'T * 'S>``>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet.html#map","title":"StateT.map","content":"StateT.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet.html#map2","title":"StateT.map2","content":"StateT.map2 \nmap2 \n\n Combines two StateTs into one by applying a mapping function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet.html#apply","title":"StateT.apply","content":"StateT.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet.html#zip","title":"StateT.zip","content":"StateT.zip \nzip \n\n Zips two StateTs into one.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet.html#bind","title":"StateT.bind","content":"StateT.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html","title":"Validation","content":"Validation \n \nValidation.map \nmap \nValidation.apply \napply \nValidation.map2 \nmap2 \nValidation.foldBack \nfoldBack \nValidation.traverse \ntraverse \nValidation.sequence \nsequence \nValidation.bimap \nbimap \nValidation.bifoldBack \nbifoldBack \nValidation.biFoldBack \nbiFoldBack \nValidation.bitraverse \nbitraverse \nValidation.bisequence \nbisequence \nValidation.bind \nbind \nValidation.orElse \norElse \nValidation.defaultValue \ndefaultValue \nValidation.defaultWith \ndefaultWith \nValidation.valueOr \nvalueOr \nValidation.liftResult \nliftResult \nValidation.liftChoice \nliftChoice \nValidation.appValidation \nappValidation \nValidation.toResult \ntoResult \nValidation.ofResult \nofResult \nValidation.toChoice \ntoChoice \nValidation.ofChoice \nofChoice \nValidation.either \neither \nValidation.validate \nvalidate \nValidation.validationNel \nvalidationNel \nValidation.ensure \nensure \nValidation.protect \nprotect \nValidation._Success \n_Success \nValidation._Failure \n_Failure \nValidation.isoValidationResult \nisoValidationResult"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#map","title":"Validation.map","content":"Validation.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#apply","title":"Validation.apply","content":"Validation.apply \napply \n\n Applies the wrapped value to the wrapped function when both are Success and returns a wrapped result or the Failure(s).\n <param name=\"f\">The function wrapped in a Success or a Failure.</param>\n <param name=\"x\">The value wrapped in a Success or a Failure.</param>\n <returns>A Success of the function applied to the value when both are Success, or the Failure(s) if more than one, combined with the Semigroup (++) operation of the Error type.</returns>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#map2","title":"Validation.map2","content":"Validation.map2 \nmap2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#foldBack","title":"Validation.foldBack","content":"Validation.foldBack \nfoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#traverse","title":"Validation.traverse","content":"Validation.traverse \ntraverse \n\n Traverse the Success case with the supplied function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#sequence","title":"Validation.sequence","content":"Validation.sequence \nsequence \n\n Traverse the Success case.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#bimap","title":"Validation.bimap","content":"Validation.bimap \nbimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#bifoldBack","title":"Validation.bifoldBack","content":"Validation.bifoldBack \nbifoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#biFoldBack","title":"Validation.biFoldBack","content":"Validation.biFoldBack \nbiFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#bitraverse","title":"Validation.bitraverse","content":"Validation.bitraverse \nbitraverse \n\n Like traverse but taking an additional function to traverse the Failure part as well.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#bisequence","title":"Validation.bisequence","content":"Validation.bisequence \nbisequence \n\n Like sequence but traversing the Failure part as well.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#bind","title":"Validation.bind","content":"Validation.bind \nbind \n\n Binds through a Validation, which is useful for\n composing Validations sequentially. Note that despite having a bind\n function of the correct type, Validation is not a monad.\n The reason is, this bind does not accumulate errors, so it does not\n agree with the Applicative instance.\n\n There is nothing wrong with using this function, it just does not make a\n valid Monad instance.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#orElse","title":"Validation.orElse","content":"Validation.orElse \norElse \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#defaultValue","title":"Validation.defaultValue","content":"Validation.defaultValue \ndefaultValue \n\n Extracts the Success value or use the supplied default value when it's a Failure.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#defaultWith","title":"Validation.defaultWith","content":"Validation.defaultWith \ndefaultWith \n\n Extracts the Success value or applies the compensation function over the Failure.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#valueOr","title":"Validation.valueOr","content":"Validation.valueOr \nvalueOr \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#liftResult","title":"Validation.liftResult","content":"Validation.liftResult \nliftResult \n\n Converts a 'Result' to a 'Validation'\n when the 'Error' of the 'Result' needs to be lifted into a 'Semigroup'.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#liftChoice","title":"Validation.liftChoice","content":"Validation.liftChoice \nliftChoice \n\n Converting a 'Choice' to a 'Validation'\n when the 'Choice2Of2' of the 'Choice' needs to be lifted into a 'Semigroup'.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#appValidation","title":"Validation.appValidation","content":"Validation.appValidation \nappValidation \n\n Takes two Validations and returns the first Success.\n If both are Failures it returns both Failures combined with the supplied function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#toResult","title":"Validation.toResult","content":"Validation.toResult \ntoResult \n\n Converts a Validation<'Error,'T> to a Result<'T,'Error>.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#ofResult","title":"Validation.ofResult","content":"Validation.ofResult \nofResult \n\n Creates a Validation<'Error,'T> from a Result<'T,'Error>.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#toChoice","title":"Validation.toChoice","content":"Validation.toChoice \ntoChoice \n\n Converts a Validation<'Error,'T> to a Choice<'T,'Error>.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#ofChoice","title":"Validation.ofChoice","content":"Validation.ofChoice \nofChoice \n\n Creates a Validation<'Error,'T> from a Choice<'T,'Error>.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#either","title":"Validation.either","content":"Validation.either \neither \n Extracts a value from either side of a Validation."},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#validate","title":"Validation.validate","content":"Validation.validate \nvalidate \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#validationNel","title":"Validation.validationNel","content":"Validation.validationNel \nvalidationNel \n\n validationNel : Result<'a,'e> -> Validation (NonEmptyList<'e>) a\n This is 'liftError' specialized to 'NonEmptyList', since\n they are a common semigroup to use.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#ensure","title":"Validation.ensure","content":"Validation.ensure \nensure \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#protect","title":"Validation.protect","content":"Validation.protect \nprotect \n\n Creates a safe version of the supplied function, which returns a Validation<exn,'U> instead of throwing exceptions.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#_Success","title":"Validation._Success","content":"Validation._Success \n_Success \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#_Failure","title":"Validation._Failure","content":"Validation._Failure \n_Failure \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation.html#isoValidationResult","title":"Validation.isoValidationResult","content":"Validation.isoValidationResult \nisoValidationResult \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html","title":"Vector","content":"Vector \n \nVector.map \nmap \nVector.mapi \nmapi \nVector.map2 \nmap2 \nVector.mapi2 \nmapi2 \nVector.map3 \nmap3 \nVector.iter \niter \nVector.iter2 \niter2 \nVector.iteri2 \niteri2 \nVector.zip \nzip \nVector.zip3 \nzip3 \nVector.unzip \nunzip \nVector.unzip3 \nunzip3 \nVector.length \nlength \nVector.length' \nlength' \nVector.toArray \ntoArray \nVector.toSeq \ntoSeq \nVector.toList \ntoList \nVector.unsafeCreate \nunsafeCreate \nVector.tryOfArray \ntryOfArray \nVector.tryOfList \ntryOfList \nVector.tryOfSeq \ntryOfSeq \nVector.create \ncreate \nVector.singleton \nsingleton \nVector.unsafeGet \nunsafeGet \nVector.get \nget \nVector.zeroCreate \nzeroCreate \nVector.replicate \nreplicate \nVector.init \ninit \nVector.zero \nzero \nVector.empty \nempty \nVector.append \nappend \nVector.fold \nfold \nVector.fold2 \nfold2 \nVector.foldBack \nfoldBack \nVector.foldBack2 \nfoldBack2 \nVector.forall \nforall \nVector.exists \nexists \nVector.forall2 \nforall2 \nVector.exists2 \nexists2 \nVector.permute \npermute \nVector.sort \nsort \nVector.sortBy \nsortBy \nVector.sortDescending \nsortDescending \nVector.sortByDescending \nsortByDescending \nVector.sortWith \nsortWith \nVector.rev \nrev \nVector.head \nhead \nVector.tail \ntail \nVector.last \nlast \nVector.indexed \nindexed \nVector.concat \nconcat \nVector.take \ntake \nVector.skip \nskip \nVector.slice \nslice \nVector.allPairs \nallPairs \nVector.pairwise \npairwise \nVector.windowed \nwindowed \nVector.chunkBySize \nchunkBySize \nVector.splitInto \nsplitInto \nVector.mapFold \nmapFold \nVector.mapFoldBack \nmapFoldBack \nVector.apply \napply \nVector.norm \nnorm \nVector.maximumNorm \nmaximumNorm \nVector.pNorm \npNorm \nVector.normalize \nnormalize \nVector.innerProduct \ninnerProduct \nVector.vectorProduct3 \nvectorProduct3 \nVector.directProduct \ndirectProduct \nVector.toRow \ntoRow \nVector.toCol \ntoCol"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#map","title":"Vector.map","content":"Vector.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#mapi","title":"Vector.mapi","content":"Vector.mapi \nmapi \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#map2","title":"Vector.map2","content":"Vector.map2 \nmap2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#mapi2","title":"Vector.mapi2","content":"Vector.mapi2 \nmapi2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#map3","title":"Vector.map3","content":"Vector.map3 \nmap3 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#iter","title":"Vector.iter","content":"Vector.iter \niter \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#iter2","title":"Vector.iter2","content":"Vector.iter2 \niter2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#iteri2","title":"Vector.iteri2","content":"Vector.iteri2 \niteri2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#zip","title":"Vector.zip","content":"Vector.zip \nzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#zip3","title":"Vector.zip3","content":"Vector.zip3 \nzip3 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#unzip","title":"Vector.unzip","content":"Vector.unzip \nunzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#unzip3","title":"Vector.unzip3","content":"Vector.unzip3 \nunzip3 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#length","title":"Vector.length","content":"Vector.length \nlength \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#length'","title":"Vector.length'","content":"Vector.length' \nlength' \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#toArray","title":"Vector.toArray","content":"Vector.toArray \ntoArray \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#toSeq","title":"Vector.toSeq","content":"Vector.toSeq \ntoSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#toList","title":"Vector.toList","content":"Vector.toList \ntoList \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#unsafeCreate","title":"Vector.unsafeCreate","content":"Vector.unsafeCreate \nunsafeCreate \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#tryOfArray","title":"Vector.tryOfArray","content":"Vector.tryOfArray \ntryOfArray \n\n Tries to create a vector of length `n`.\n If the length of `xs` does not match, it will return `None`.\n Otherwise, it will return the vector with `Some`.\n\n You can also use `Vector.TryCreate<n>.OfArray xs`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#tryOfList","title":"Vector.tryOfList","content":"Vector.tryOfList \ntryOfList \n\n Tries to create a vector of length `n`.\n If the length of `xs` does not match, it will return `None`.\n Otherwise, it will return the vector with `Some`.\n\n You can also use `Vector.TryCreate<n>.OfList xs`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#tryOfSeq","title":"Vector.tryOfSeq","content":"Vector.tryOfSeq \ntryOfSeq \n\n Tries to create a vector of length `n`.\n If the length of `xs` does not match, it will return `None`.\n Otherwise, it will return the vector with `Some`.\n\n You can also use `Vector.TryCreate<n>.OfSeq xs`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#create","title":"Vector.create","content":"Vector.create \ncreate \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#singleton","title":"Vector.singleton","content":"Vector.singleton \nsingleton \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#unsafeGet","title":"Vector.unsafeGet","content":"Vector.unsafeGet \nunsafeGet \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#get","title":"Vector.get","content":"Vector.get \nget \n\n You can also use `Vector.Get<i>.Invoke vec`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#zeroCreate","title":"Vector.zeroCreate","content":"Vector.zeroCreate \nzeroCreate \n\n You can also use `Vector.ZeroCreate<n>.Invoke()`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#replicate","title":"Vector.replicate","content":"Vector.replicate \nreplicate \n\n You can also use `Vector.Replicate<n>.Invoke value`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#init","title":"Vector.init","content":"Vector.init \ninit \n\n You can also use `Vector.Init<n>.Invoke f`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#zero","title":"Vector.zero","content":"Vector.zero \nzero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#empty","title":"Vector.empty","content":"Vector.empty \nempty \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#append","title":"Vector.append","content":"Vector.append \nappend \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#fold","title":"Vector.fold","content":"Vector.fold \nfold \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#fold2","title":"Vector.fold2","content":"Vector.fold2 \nfold2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#foldBack","title":"Vector.foldBack","content":"Vector.foldBack \nfoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#foldBack2","title":"Vector.foldBack2","content":"Vector.foldBack2 \nfoldBack2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#forall","title":"Vector.forall","content":"Vector.forall \nforall \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#exists","title":"Vector.exists","content":"Vector.exists \nexists \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#forall2","title":"Vector.forall2","content":"Vector.forall2 \nforall2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#exists2","title":"Vector.exists2","content":"Vector.exists2 \nexists2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#permute","title":"Vector.permute","content":"Vector.permute \npermute \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#sort","title":"Vector.sort","content":"Vector.sort \nsort \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#sortBy","title":"Vector.sortBy","content":"Vector.sortBy \nsortBy \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#sortDescending","title":"Vector.sortDescending","content":"Vector.sortDescending \nsortDescending \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#sortByDescending","title":"Vector.sortByDescending","content":"Vector.sortByDescending \nsortByDescending \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#sortWith","title":"Vector.sortWith","content":"Vector.sortWith \nsortWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#rev","title":"Vector.rev","content":"Vector.rev \nrev \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#head","title":"Vector.head","content":"Vector.head \nhead \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#tail","title":"Vector.tail","content":"Vector.tail \ntail \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#last","title":"Vector.last","content":"Vector.last \nlast \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#indexed","title":"Vector.indexed","content":"Vector.indexed \nindexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#concat","title":"Vector.concat","content":"Vector.concat \nconcat \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#take","title":"Vector.take","content":"Vector.take \ntake \n\n You can also use `Vector.Take<n>.Invoke v`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#skip","title":"Vector.skip","content":"Vector.skip \nskip \n\n You can also use `Vector.Skip<n>.Invoke v`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#slice","title":"Vector.slice","content":"Vector.slice \nslice \n\n You can also use `Vector.Slice<i, j>.Invoke v`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#allPairs","title":"Vector.allPairs","content":"Vector.allPairs \nallPairs \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#pairwise","title":"Vector.pairwise","content":"Vector.pairwise \npairwise \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#windowed","title":"Vector.windowed","content":"Vector.windowed \nwindowed \n\n You can also use `Vector.Windowed<m>.Invoke v`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#chunkBySize","title":"Vector.chunkBySize","content":"Vector.chunkBySize \nchunkBySize \n\n You can also use `Vector.ChunkBySize<n>.Invoke v`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#splitInto","title":"Vector.splitInto","content":"Vector.splitInto \nsplitInto \n\n You can also use `Vector.SplitInto<n>.Invoke v`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#mapFold","title":"Vector.mapFold","content":"Vector.mapFold \nmapFold \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#mapFoldBack","title":"Vector.mapFoldBack","content":"Vector.mapFoldBack \nmapFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#apply","title":"Vector.apply","content":"Vector.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#norm","title":"Vector.norm","content":"Vector.norm \nnorm \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#maximumNorm","title":"Vector.maximumNorm","content":"Vector.maximumNorm \nmaximumNorm \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#pNorm","title":"Vector.pNorm","content":"Vector.pNorm \npNorm \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#normalize","title":"Vector.normalize","content":"Vector.normalize \nnormalize \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#innerProduct","title":"Vector.innerProduct","content":"Vector.innerProduct \ninnerProduct \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#vectorProduct3","title":"Vector.vectorProduct3","content":"Vector.vectorProduct3 \nvectorProduct3 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#directProduct","title":"Vector.directProduct","content":"Vector.directProduct \ndirectProduct \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#toRow","title":"Vector.toRow","content":"Vector.toRow \ntoRow \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector.html#toCol","title":"Vector.toCol","content":"Vector.toCol \ntoCol \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer.html","title":"Writer","content":"Writer \n\n Basic operations on Writer\n \nWriter.run \nrun \nWriter.map \nmap \nWriter.map2 \nmap2 \nWriter.bind \nbind \nWriter.apply \napply \nWriter.exec \nexec \nWriter.tell \ntell \nWriter.listen \nlisten \nWriter.pass \npass"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer.html#run","title":"Writer.run","content":"Writer.run \nrun \n\n Unwraps a writer computation as a (result, output) pair. (The inverse of Writer.)\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer.html#map","title":"Writer.map","content":"Writer.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer.html#map2","title":"Writer.map2","content":"Writer.map2 \nmap2 \n\n Combines two Writers into one by applying a mapping function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer.html#bind","title":"Writer.bind","content":"Writer.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer.html#apply","title":"Writer.apply","content":"Writer.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer.html#exec","title":"Writer.exec","content":"Writer.exec \nexec \n\n Extract the output from a writer computation.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer.html#tell","title":"Writer.tell","content":"Writer.tell \ntell \n\n Embeds a simple writer action.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer.html#listen","title":"Writer.listen","content":"Writer.listen \nlisten \n An action that executes the action <span class=\"fsdocs-param-name\">m</span> and adds its output\n to the value of the computation. "},{"uri":"/FSharpPlusreference/fsharpplus-data-writer.html#pass","title":"Writer.pass","content":"Writer.pass \npass \n\n Action that executes the action m, which returns a value and a function, and returns the value, applying the function to the output.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert.html","title":"WriterT","content":"WriterT \n\n Basic operations on WriterT\n \nWriterT.run \nrun \nWriterT.lift \nlift \nWriterT.map \nmap \nWriterT.map2 \nmap2 \nWriterT.apply \napply \nWriterT.bind \nbind"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert.html#run","title":"WriterT.run","content":"WriterT.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert.html#lift","title":"WriterT.lift","content":"WriterT.lift \nlift \n\n Embed a Monad<'T> into a WriterT<'Monad<'T * 'Monoid>>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert.html#map","title":"WriterT.map","content":"WriterT.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert.html#map2","title":"WriterT.map2","content":"WriterT.map2 \nmap2 \n\n Combines two WriterTs into one by applying a mapping function.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert.html#apply","title":"WriterT.apply","content":"WriterT.apply \napply \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert.html#bind","title":"WriterT.bind","content":"WriterT.bind \nbind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist.html","title":"ZipList","content":"ZipList \n\n Basic operations on ZipList\n \nZipList.run \nrun \nZipList.map \nmap \nZipList.map2 \nmap2 \nZipList.singleton \nsingleton \nZipList.zip \nzip"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist.html#run","title":"ZipList.run","content":"ZipList.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist.html#map","title":"ZipList.map","content":"ZipList.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist.html#map2","title":"ZipList.map2","content":"ZipList.map2 \nmap2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist.html#singleton","title":"ZipList.singleton","content":"ZipList.singleton \nsingleton \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist.html#zip","title":"ZipList.zip","content":"ZipList.zip \nzip \nCombines the two lists into a list of pairs. The two lists need not have equal lengths:\n when one list is exhausted any remaining elements in the other\n list are ignored."},{"uri":"/FSharpPlusreference/fsharpplus-data-all.html","title":"All","content":"All \n\n Boolean monoid under conjunction.\n \nAll.( + ) \n( + ) \nAll.Zero \nZero \nAll.All \nAll"},{"uri":"/FSharpPlusreference/fsharpplus-data-all.html#( + )","title":"All.( + )","content":"All.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-all.html#Zero","title":"All.Zero","content":"All.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-all.html#All","title":"All.All","content":"All.All \nAll \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-any.html","title":"Any","content":"Any \n\n Boolean monoid under disjunction.\n \nAny.( + ) \n( + ) \nAny.Zero \nZero \nAny.Any \nAny"},{"uri":"/FSharpPlusreference/fsharpplus-data-any.html#( + )","title":"Any.( + )","content":"Any.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-any.html#Zero","title":"Any.Zero","content":"Any.Zero \nZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-any.html#Any","title":"Any.Any","content":"Any.Any \nAny \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html","title":"ChoiceT<'monad<'choice<'t,'e>>>","content":"ChoiceT<'monad<'choice<'t,'e>>> \n \nChoiceT<'monad<'choice<'t,'e>>>.CallCC \nCallCC \nChoiceT<'monad<'choice<'t,'e>>>.Catch \nCatch \nChoiceT<'monad<'choice<'t,'e>>>.Lift \nLift \nChoiceT<'monad<'choice<'t,'e>>>.Lift2 \nLift2 \nChoiceT<'monad<'choice<'t,'e>>>.LiftAsync \nLiftAsync \nChoiceT<'monad<'choice<'t,'e>>>.Listen \nListen \nChoiceT<'monad<'choice<'t,'e>>>.Local \nLocal \nChoiceT<'monad<'choice<'t,'e>>>.Map \nMap \nChoiceT<'monad<'choice<'t,'e>>>.Pass \nPass \nChoiceT<'monad<'choice<'t,'e>>>.Put \nPut \nChoiceT<'monad<'choice<'t,'e>>>.Return \nReturn \nChoiceT<'monad<'choice<'t,'e>>>.Tell \nTell \nChoiceT<'monad<'choice<'t,'e>>>.Throw \nThrow \nChoiceT<'monad<'choice<'t,'e>>>.get_Ask \nget_Ask \nChoiceT<'monad<'choice<'t,'e>>>.get_Get \nget_Get \nChoiceT<'monad<'choice<'t,'e>>>.( >>= ) \n( >>= ) \nChoiceT<'monad<'choice<'t,'e>>>.( <*> ) \n( <*> ) \nChoiceT<'monad<'choice<'t,'e>>>.ChoiceT \nChoiceT"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#CallCC","title":"ChoiceT<'monad<'choice<'t,'e>>>.CallCC","content":"ChoiceT<'monad<'choice<'t,'e>>>.CallCC \nCallCC \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#Catch","title":"ChoiceT<'monad<'choice<'t,'e>>>.Catch","content":"ChoiceT<'monad<'choice<'t,'e>>>.Catch \nCatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#Lift","title":"ChoiceT<'monad<'choice<'t,'e>>>.Lift","content":"ChoiceT<'monad<'choice<'t,'e>>>.Lift \nLift \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#Lift2","title":"ChoiceT<'monad<'choice<'t,'e>>>.Lift2","content":"ChoiceT<'monad<'choice<'t,'e>>>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#LiftAsync","title":"ChoiceT<'monad<'choice<'t,'e>>>.LiftAsync","content":"ChoiceT<'monad<'choice<'t,'e>>>.LiftAsync \nLiftAsync \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#Listen","title":"ChoiceT<'monad<'choice<'t,'e>>>.Listen","content":"ChoiceT<'monad<'choice<'t,'e>>>.Listen \nListen \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#Local","title":"ChoiceT<'monad<'choice<'t,'e>>>.Local","content":"ChoiceT<'monad<'choice<'t,'e>>>.Local \nLocal \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#Map","title":"ChoiceT<'monad<'choice<'t,'e>>>.Map","content":"ChoiceT<'monad<'choice<'t,'e>>>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#Pass","title":"ChoiceT<'monad<'choice<'t,'e>>>.Pass","content":"ChoiceT<'monad<'choice<'t,'e>>>.Pass \nPass \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#Put","title":"ChoiceT<'monad<'choice<'t,'e>>>.Put","content":"ChoiceT<'monad<'choice<'t,'e>>>.Put \nPut \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#Return","title":"ChoiceT<'monad<'choice<'t,'e>>>.Return","content":"ChoiceT<'monad<'choice<'t,'e>>>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#Tell","title":"ChoiceT<'monad<'choice<'t,'e>>>.Tell","content":"ChoiceT<'monad<'choice<'t,'e>>>.Tell \nTell \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#Throw","title":"ChoiceT<'monad<'choice<'t,'e>>>.Throw","content":"ChoiceT<'monad<'choice<'t,'e>>>.Throw \nThrow \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#get_Ask","title":"ChoiceT<'monad<'choice<'t,'e>>>.get_Ask","content":"ChoiceT<'monad<'choice<'t,'e>>>.get_Ask \nget_Ask \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#get_Get","title":"ChoiceT<'monad<'choice<'t,'e>>>.get_Get","content":"ChoiceT<'monad<'choice<'t,'e>>>.get_Get \nget_Get \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#( >>= )","title":"ChoiceT<'monad<'choice<'t,'e>>>.( >>= )","content":"ChoiceT<'monad<'choice<'t,'e>>>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#( <*> )","title":"ChoiceT<'monad<'choice<'t,'e>>>.( <*> )","content":"ChoiceT<'monad<'choice<'t,'e>>>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-choicet-1.html#ChoiceT","title":"ChoiceT<'monad<'choice<'t,'e>>>.ChoiceT","content":"ChoiceT<'monad<'choice<'t,'e>>>.ChoiceT \nChoiceT \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-compose-1.html","title":"Compose<'functorF<'functorG<'t>>>","content":"Compose<'functorF<'functorG<'t>>> \n\n Right-to-left composition of functors. The composition of applicative functors is always applicative, but the composition of monads is not always a monad.\n \nCompose<'functorF<'functorG<'t>>>.Map \nMap \nCompose<'functorF<'functorG<'t>>>.Return \nReturn \nCompose<'functorF<'functorG<'t>>>.get_Empty \nget_Empty \nCompose<'functorF<'functorG<'t>>>.( <|> ) \n( <|> ) \nCompose<'functorF<'functorG<'t>>>.( <*> ) \n( <*> ) \nCompose<'functorF<'functorG<'t>>>.Compose \nCompose"},{"uri":"/FSharpPlusreference/fsharpplus-data-compose-1.html#Map","title":"Compose<'functorF<'functorG<'t>>>.Map","content":"Compose<'functorF<'functorG<'t>>>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-compose-1.html#Return","title":"Compose<'functorF<'functorG<'t>>>.Return","content":"Compose<'functorF<'functorG<'t>>>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-compose-1.html#get_Empty","title":"Compose<'functorF<'functorG<'t>>>.get_Empty","content":"Compose<'functorF<'functorG<'t>>>.get_Empty \nget_Empty \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-compose-1.html#( <|> )","title":"Compose<'functorF<'functorG<'t>>>.( <|> )","content":"Compose<'functorF<'functorG<'t>>>.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-compose-1.html#( <*> )","title":"Compose<'functorF<'functorG<'t>>>.( <*> )","content":"Compose<'functorF<'functorG<'t>>>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-compose-1.html#Compose","title":"Compose<'functorF<'functorG<'t>>>.Compose","content":"Compose<'functorF<'functorG<'t>>>.Compose \nCompose \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html","title":"Const<'t, 'u>","content":"Const<'t, 'u> \n The Const functor, defined as Const<'T, 'U> where 'U is a phantom type. Useful for: Lens getters Its applicative instance plays a fundamental role in Lens.\n <p class='fsdocs-para'></p>   Useful for: Lens getters.\n <p class='fsdocs-para'></p>   Its applicative instance plays a fundamental role in Lens.  \nConst<'t, 'u>.Bifold \nBifold \nConst<'t, 'u>.BifoldBack \nBifoldBack \nConst<'t, 'u>.BifoldMap \nBifoldMap \nConst<'t, 'u>.Bimap \nBimap \nConst<'t, 'u>.Bitraverse \nBitraverse \nConst<'t, 'u>.Contramap \nContramap \nConst<'t, 'u>.First \nFirst \nConst<'t, 'u>.Lift2 \nLift2 \nConst<'t, 'u>.Map \nMap \nConst<'t, 'u>.Return \nReturn \nConst<'t, 'u>.get_Zero \nget_Zero \nConst<'t, 'u>.( + ) \n( + ) \nConst<'t, 'u>.( <*> ) \n( <*> ) \nConst<'t, 'u>.Const \nConst"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#Bifold","title":"Const<'t, 'u>.Bifold","content":"Const<'t, 'u>.Bifold \nBifold \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#BifoldBack","title":"Const<'t, 'u>.BifoldBack","content":"Const<'t, 'u>.BifoldBack \nBifoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#BifoldMap","title":"Const<'t, 'u>.BifoldMap","content":"Const<'t, 'u>.BifoldMap \nBifoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#Bimap","title":"Const<'t, 'u>.Bimap","content":"Const<'t, 'u>.Bimap \nBimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#Bitraverse","title":"Const<'t, 'u>.Bitraverse","content":"Const<'t, 'u>.Bitraverse \nBitraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#Contramap","title":"Const<'t, 'u>.Contramap","content":"Const<'t, 'u>.Contramap \nContramap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#First","title":"Const<'t, 'u>.First","content":"Const<'t, 'u>.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#Lift2","title":"Const<'t, 'u>.Lift2","content":"Const<'t, 'u>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#Map","title":"Const<'t, 'u>.Map","content":"Const<'t, 'u>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#Return","title":"Const<'t, 'u>.Return","content":"Const<'t, 'u>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#get_Zero","title":"Const<'t, 'u>.get_Zero","content":"Const<'t, 'u>.get_Zero \nget_Zero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#( + )","title":"Const<'t, 'u>.( + )","content":"Const<'t, 'u>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#( <*> )","title":"Const<'t, 'u>.( <*> )","content":"Const<'t, 'u>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-const-2.html#Const","title":"Const<'t, 'u>.Const","content":"Const<'t, 'u>.Const \nConst \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html","title":"Cont<'r, 't>","content":"Cont<'r, 't> \n Computation type: Computations which can be interrupted and resumed.\n <p class='fsdocs-para'></p>   Binding strategy: Binding a function to a monadic value creates a new continuation which uses the function as the continuation of the monadic computation.\n <p class='fsdocs-para'></p>   Useful for: Complex control structures, error handling, and creating co-routines. \nCont<'r, 't>.CallCC \nCallCC \nCont<'r, 't>.Delay \nDelay \nCont<'r, 't>.Lift \nLift \nCont<'r, 't>.LiftAsync \nLiftAsync \nCont<'r, 't>.Local \nLocal \nCont<'r, 't>.Map \nMap \nCont<'r, 't>.Put \nPut \nCont<'r, 't>.Return \nReturn \nCont<'r, 't>.TryFinally \nTryFinally \nCont<'r, 't>.TryWith \nTryWith \nCont<'r, 't>.Using \nUsing \nCont<'r, 't>.get_Ask \nget_Ask \nCont<'r, 't>.get_Get \nget_Get \nCont<'r, 't>.( >>= ) \n( >>= ) \nCont<'r, 't>.( <*> ) \n( <*> ) \nCont<'r, 't>.Cont \nCont"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#CallCC","title":"Cont<'r, 't>.CallCC","content":"Cont<'r, 't>.CallCC \nCallCC \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#Delay","title":"Cont<'r, 't>.Delay","content":"Cont<'r, 't>.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#Lift","title":"Cont<'r, 't>.Lift","content":"Cont<'r, 't>.Lift \nLift \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#LiftAsync","title":"Cont<'r, 't>.LiftAsync","content":"Cont<'r, 't>.LiftAsync \nLiftAsync \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#Local","title":"Cont<'r, 't>.Local","content":"Cont<'r, 't>.Local \nLocal \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#Map","title":"Cont<'r, 't>.Map","content":"Cont<'r, 't>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#Put","title":"Cont<'r, 't>.Put","content":"Cont<'r, 't>.Put \nPut \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#Return","title":"Cont<'r, 't>.Return","content":"Cont<'r, 't>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#TryFinally","title":"Cont<'r, 't>.TryFinally","content":"Cont<'r, 't>.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#TryWith","title":"Cont<'r, 't>.TryWith","content":"Cont<'r, 't>.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#Using","title":"Cont<'r, 't>.Using","content":"Cont<'r, 't>.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#get_Ask","title":"Cont<'r, 't>.get_Ask","content":"Cont<'r, 't>.get_Ask \nget_Ask \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#get_Get","title":"Cont<'r, 't>.get_Get","content":"Cont<'r, 't>.get_Get \nget_Get \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#( >>= )","title":"Cont<'r, 't>.( >>= )","content":"Cont<'r, 't>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#( <*> )","title":"Cont<'r, 't>.( <*> )","content":"Cont<'r, 't>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-cont-2.html#Cont","title":"Cont<'r, 't>.Cont","content":"Cont<'r, 't>.Cont \nCont \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-contt-2.html","title":"ContT<'r, 't>","content":"ContT<'r, 't> \n\n Monad Transformer for Cont<'R,'T>\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-coproduct-2.html","title":"Coproduct<'functorL<'t>, 'functorR<'t>>","content":"Coproduct<'functorL<'t>, 'functorR<'t>> \n \nCoproduct<'functorL<'t>, 'functorR<'t>>.( .ctor ) \n( .ctor ) \nCoproduct<'functorL<'t>, 'functorR<'t>>.Map \nMap"},{"uri":"/FSharpPlusreference/fsharpplus-data-coproduct-2.html#( .ctor )","title":"Coproduct<'functorL<'t>, 'functorR<'t>>.( .ctor )","content":"Coproduct<'functorL<'t>, 'functorR<'t>>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-coproduct-2.html#Map","title":"Coproduct<'functorL<'t>, 'functorR<'t>>.Map","content":"Coproduct<'functorL<'t>, 'functorR<'t>>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-coproductbase-2.html","title":"CoproductBase<'functorL<'t>, 'functorR<'t>>","content":"CoproductBase<'functorL<'t>, 'functorR<'t>> \n \nCoproductBase<'functorL<'t>, 'functorR<'t>>.( .ctor ) \n( .ctor ) \nCoproductBase<'functorL<'t>, 'functorR<'t>>.getContents \ngetContents \nCoproductBase<'functorL<'t>, 'functorR<'t>>.Map \nMap"},{"uri":"/FSharpPlusreference/fsharpplus-data-coproductbase-2.html#( .ctor )","title":"CoproductBase<'functorL<'t>, 'functorR<'t>>.( .ctor )","content":"CoproductBase<'functorL<'t>, 'functorR<'t>>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-coproductbase-2.html#getContents","title":"CoproductBase<'functorL<'t>, 'functorR<'t>>.getContents","content":"CoproductBase<'functorL<'t>, 'functorR<'t>>.getContents \ngetContents \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-coproductbase-2.html#Map","title":"CoproductBase<'functorL<'t>, 'functorR<'t>>.Map","content":"CoproductBase<'functorL<'t>, 'functorR<'t>>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html","title":"DList<'T>","content":"DList<'T> \n\n DList is an ordered linear structure implementing the List signature (head, tail, cons), \n end-insertion (add), and O(1) append. Ordering is by insertion history.\n DList is an implementation of [John Hughes' append list](http://dl.acm.org/citation.cfm?id=8475).\n \nDList<'T>.( .ctor ) \n( .ctor ) \nDList<'T>.Add \nAdd \nDList<'T>.Cons \nCons \nDList<'T>.toSeq \ntoSeq \nDList<'T>.Uncons \nUncons \nDList<'T>.TryUncons \nTryUncons \nDList<'T>.TryTail \nTryTail \nDList<'T>.TryHead \nTryHead \nDList<'T>.Tail \nTail \nDList<'T>.Length \nLength \nDList<'T>.Item \nItem \nDList<'T>.IsEmpty \nIsEmpty \nDList<'T>.Head \nHead \nDList<'T>.Fold \nFold \nDList<'T>.Map \nMap \nDList<'T>.OfSeq \nOfSeq \nDList<'T>.Return \nReturn \nDList<'T>.ToList \nToList \nDList<'T>.ToSeq \nToSeq \nDList<'T>.append \nappend \nDList<'T>.appendLists \nappendLists \nDList<'T>.fold \nfold \nDList<'T>.foldBack \nfoldBack \nDList<'T>.get_Empty \nget_Empty \nDList<'T>.get_Zero \nget_Zero \nDList<'T>.head \nhead \nDList<'T>.ofSeq \nofSeq \nDList<'T>.( + ) \n( + ) \nDList<'T>.( >>= ) \n( >>= ) \nDList<'T>.( <|> ) \n( <|> ) \nDList<'T>.( <*> ) \n( <*> ) \nDList<'T>.tryHead \ntryHead"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#( .ctor )","title":"DList<'T>.( .ctor )","content":"DList<'T>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#Add","title":"DList<'T>.Add","content":"DList<'T>.Add \nAdd \n\n O(1). Returns a new DList with the element added to the end.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#Cons","title":"DList<'T>.Cons","content":"DList<'T>.Cons \nCons \n\n O(1). Returns a new DList with the element added to the front.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#toSeq","title":"DList<'T>.toSeq","content":"DList<'T>.toSeq \ntoSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#Uncons","title":"DList<'T>.Uncons","content":"DList<'T>.Uncons \nUncons \n\n O(log n). Returns the first element and tail.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#TryUncons","title":"DList<'T>.TryUncons","content":"DList<'T>.TryUncons \nTryUncons \n\n O(log n). Returns option first element and tail.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#TryTail","title":"DList<'T>.TryTail","content":"DList<'T>.TryTail \nTryTail \n\n O(log n). Returns option DList of the elements trailing the first element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#TryHead","title":"DList<'T>.TryHead","content":"DList<'T>.TryHead \nTryHead \n\n O(log n). Returns option first element\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#Tail","title":"DList<'T>.Tail","content":"DList<'T>.Tail \nTail \n\n O(log n). Returns a new DList of the elements trailing the first element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#Length","title":"DList<'T>.Length","content":"DList<'T>.Length \nLength \n\n O(1). Returns the count of elememts.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#Item","title":"DList<'T>.Item","content":"DList<'T>.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#IsEmpty","title":"DList<'T>.IsEmpty","content":"DList<'T>.IsEmpty \nIsEmpty \n\n O(1). Returns true if the DList has no elements.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#Head","title":"DList<'T>.Head","content":"DList<'T>.Head \nHead \n\n O(log n). Returns the first element.\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#Fold","title":"DList<'T>.Fold","content":"DList<'T>.Fold \nFold \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#Map","title":"DList<'T>.Map","content":"DList<'T>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#OfSeq","title":"DList<'T>.OfSeq","content":"DList<'T>.OfSeq \nOfSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#Return","title":"DList<'T>.Return","content":"DList<'T>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#ToList","title":"DList<'T>.ToList","content":"DList<'T>.ToList \nToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#ToSeq","title":"DList<'T>.ToSeq","content":"DList<'T>.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#append","title":"DList<'T>.append","content":"DList<'T>.append \nappend \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#appendLists","title":"DList<'T>.appendLists","content":"DList<'T>.appendLists \nappendLists \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#fold","title":"DList<'T>.fold","content":"DList<'T>.fold \nfold \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#foldBack","title":"DList<'T>.foldBack","content":"DList<'T>.foldBack \nfoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#get_Empty","title":"DList<'T>.get_Empty","content":"DList<'T>.get_Empty \nget_Empty \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#get_Zero","title":"DList<'T>.get_Zero","content":"DList<'T>.get_Zero \nget_Zero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#head","title":"DList<'T>.head","content":"DList<'T>.head \nhead \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#ofSeq","title":"DList<'T>.ofSeq","content":"DList<'T>.ofSeq \nofSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#( + )","title":"DList<'T>.( + )","content":"DList<'T>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#( >>= )","title":"DList<'T>.( >>= )","content":"DList<'T>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#( <|> )","title":"DList<'T>.( <|> )","content":"DList<'T>.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#( <*> )","title":"DList<'T>.( <*> )","content":"DList<'T>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlist-1.html#tryHead","title":"DList<'T>.tryHead","content":"DList<'T>.tryHead \ntryHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistdata-1.html","title":"DListData<'T>","content":"DListData<'T> \n \nDListData<'T>.Nil \nNil \nDListData<'T>.Unit \nUnit \nDListData<'T>.Join \nJoin"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistdata-1.html#Nil","title":"DListData<'T>.Nil","content":"DListData<'T>.Nil \nNil \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistdata-1.html#Unit","title":"DListData<'T>.Unit","content":"DListData<'T>.Unit \nUnit \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dlistdata-1.html#Join","title":"DListData<'T>.Join","content":"DListData<'T>.Join \nJoin \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dual-1.html","title":"Dual<'t>","content":"Dual<'t> \n\n The dual of a monoid, obtained by swapping the arguments of append.\n \nDual<'t>.get_Zero \nget_Zero \nDual<'t>.( + ) \n( + ) \nDual<'t>.Dual \nDual"},{"uri":"/FSharpPlusreference/fsharpplus-data-dual-1.html#get_Zero","title":"Dual<'t>.get_Zero","content":"Dual<'t>.get_Zero \nget_Zero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dual-1.html#( + )","title":"Dual<'t>.( + )","content":"Dual<'t>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-dual-1.html#Dual","title":"Dual<'t>.Dual","content":"Dual<'t>.Dual \nDual \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-endo-1.html","title":"Endo<'t>","content":"Endo<'t> \n\n The monoid of endomorphisms under composition.\n \nEndo<'t>.get_Zero \nget_Zero \nEndo<'t>.( + ) \n( + ) \nEndo<'t>.Endo \nEndo"},{"uri":"/FSharpPlusreference/fsharpplus-data-endo-1.html#get_Zero","title":"Endo<'t>.get_Zero","content":"Endo<'t>.get_Zero \nget_Zero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-endo-1.html#( + )","title":"Endo<'t>.( + )","content":"Endo<'t>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-endo-1.html#Endo","title":"Endo<'t>.Endo","content":"Endo<'t>.Endo \nEndo \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-first-1.html","title":"First<'t>","content":"First<'t> \n\n Option<'T> monoid returning the leftmost non-None value.\n \nFirst<'t>.get_Zero \nget_Zero \nFirst<'t>.( + ) \n( + ) \nFirst<'t>.run \nrun \nFirst<'t>.First \nFirst"},{"uri":"/FSharpPlusreference/fsharpplus-data-first-1.html#get_Zero","title":"First<'t>.get_Zero","content":"First<'t>.get_Zero \nget_Zero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-first-1.html#( + )","title":"First<'t>.( + )","content":"First<'t>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-first-1.html#run","title":"First<'t>.run","content":"First<'t>.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-first-1.html#First","title":"First<'t>.First","content":"First<'t>.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free-2.html","title":"Free<'functor<'t>, 't>","content":"Free<'functor<'t>, 't> \n \nFree<'functor<'t>, 't>.Delay \nDelay \nFree<'functor<'t>, 't>.Lift2 \nLift2 \nFree<'functor<'t>, 't>.Map \nMap \nFree<'functor<'t>, 't>.Return \nReturn \nFree<'functor<'t>, 't>.( >>= ) \n( >>= ) \nFree<'functor<'t>, 't>.( <*> ) \n( <*> ) \nFree<'functor<'t>, 't>.Pure \nPure \nFree<'functor<'t>, 't>.Roll \nRoll"},{"uri":"/FSharpPlusreference/fsharpplus-data-free-2.html#Delay","title":"Free<'functor<'t>, 't>.Delay","content":"Free<'functor<'t>, 't>.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free-2.html#Lift2","title":"Free<'functor<'t>, 't>.Lift2","content":"Free<'functor<'t>, 't>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free-2.html#Map","title":"Free<'functor<'t>, 't>.Map","content":"Free<'functor<'t>, 't>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free-2.html#Return","title":"Free<'functor<'t>, 't>.Return","content":"Free<'functor<'t>, 't>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free-2.html#( >>= )","title":"Free<'functor<'t>, 't>.( >>= )","content":"Free<'functor<'t>, 't>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free-2.html#( <*> )","title":"Free<'functor<'t>, 't>.( <*> )","content":"Free<'functor<'t>, 't>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free-2.html#Pure","title":"Free<'functor<'t>, 't>.Pure","content":"Free<'functor<'t>, 't>.Pure \nPure \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-free-2.html#Roll","title":"Free<'functor<'t>, 't>.Roll","content":"Free<'functor<'t>, 't>.Roll \nRoll \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-identity-1.html","title":"Identity<'t>","content":"Identity<'t> \n Computation type: Simple function application.\n <p class='fsdocs-para'></p>   Binding strategy: The bound function is applied to the input value. Identity x >>= f = Identity (f x)\n <p class='fsdocs-para'></p>   Useful for: Lens setters and updaters - Monads can be derived from monad transformers applied to the Identity monad.\n <p class='fsdocs-para'></p>   The Identity monad is a monad that does not embody any computational strategy. \n           It simply applies the bound function to its input without any modification. \n           Computationally, there is no reason to use the Identity monad instead of the much simpler act of simply applying functions to their arguments.\n           The purpose of the Identity monad is its fundamental role in the theory of monad transformers.\n           Any monad transformer applied to the Identity monad yields a non-transformer version of that monad.\n           Its applicative instance plays a fundamental role in Lens.  \nIdentity<'t>.Lift2 \nLift2 \nIdentity<'t>.Map \nMap \nIdentity<'t>.Return \nReturn \nIdentity<'t>.Zip \nZip \nIdentity<'t>.( >>= ) \n( >>= ) \nIdentity<'t>.( <*> ) \n( <*> ) \nIdentity<'t>.Identity \nIdentity"},{"uri":"/FSharpPlusreference/fsharpplus-data-identity-1.html#Lift2","title":"Identity<'t>.Lift2","content":"Identity<'t>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-identity-1.html#Map","title":"Identity<'t>.Map","content":"Identity<'t>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-identity-1.html#Return","title":"Identity<'t>.Return","content":"Identity<'t>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-identity-1.html#Zip","title":"Identity<'t>.Zip","content":"Identity<'t>.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-identity-1.html#( >>= )","title":"Identity<'t>.( >>= )","content":"Identity<'t>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-identity-1.html#( <*> )","title":"Identity<'t>.( <*> )","content":"Identity<'t>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-identity-1.html#Identity","title":"Identity<'t>.Identity","content":"Identity<'t>.Identity \nIdentity \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html","title":"Kleisli<'t, 'monad<'u>>","content":"Kleisli<'t, 'monad<'u>> \n\n Kleisli arrows of a monad. Represents a function 'T -> 'Monad<'U>\n \nKleisli<'t, 'monad<'u>>.( <|> ) \n( <|> ) \nKleisli<'t, 'monad<'u>>.Arr \nArr \nKleisli<'t, 'monad<'u>>.Contramap \nContramap \nKleisli<'t, 'monad<'u>>.Dimap \nDimap \nKleisli<'t, 'monad<'u>>.Empty \nEmpty \nKleisli<'t, 'monad<'u>>.First \nFirst \nKleisli<'t, 'monad<'u>>.Left \nLeft \nKleisli<'t, 'monad<'u>>.Map \nMap \nKleisli<'t, 'monad<'u>>.Right \nRight \nKleisli<'t, 'monad<'u>>.Second \nSecond \nKleisli<'t, 'monad<'u>>.get_App \nget_App \nKleisli<'t, 'monad<'u>>.get_Id \nget_Id \nKleisli<'t, 'monad<'u>>.( ||| ) \n( ||| ) \nKleisli<'t, 'monad<'u>>.( <<< ) \n( <<< ) \nKleisli<'t, 'monad<'u>>.( +++ ) \n( +++ ) \nKleisli<'t, 'monad<'u>>.Kleisli \nKleisli"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#( <|> )","title":"Kleisli<'t, 'monad<'u>>.( <|> )","content":"Kleisli<'t, 'monad<'u>>.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#Arr","title":"Kleisli<'t, 'monad<'u>>.Arr","content":"Kleisli<'t, 'monad<'u>>.Arr \nArr \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#Contramap","title":"Kleisli<'t, 'monad<'u>>.Contramap","content":"Kleisli<'t, 'monad<'u>>.Contramap \nContramap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#Dimap","title":"Kleisli<'t, 'monad<'u>>.Dimap","content":"Kleisli<'t, 'monad<'u>>.Dimap \nDimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#Empty","title":"Kleisli<'t, 'monad<'u>>.Empty","content":"Kleisli<'t, 'monad<'u>>.Empty \nEmpty \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#First","title":"Kleisli<'t, 'monad<'u>>.First","content":"Kleisli<'t, 'monad<'u>>.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#Left","title":"Kleisli<'t, 'monad<'u>>.Left","content":"Kleisli<'t, 'monad<'u>>.Left \nLeft \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#Map","title":"Kleisli<'t, 'monad<'u>>.Map","content":"Kleisli<'t, 'monad<'u>>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#Right","title":"Kleisli<'t, 'monad<'u>>.Right","content":"Kleisli<'t, 'monad<'u>>.Right \nRight \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#Second","title":"Kleisli<'t, 'monad<'u>>.Second","content":"Kleisli<'t, 'monad<'u>>.Second \nSecond \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#get_App","title":"Kleisli<'t, 'monad<'u>>.get_App","content":"Kleisli<'t, 'monad<'u>>.get_App \nget_App \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#get_Id","title":"Kleisli<'t, 'monad<'u>>.get_Id","content":"Kleisli<'t, 'monad<'u>>.get_Id \nget_Id \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#( ||| )","title":"Kleisli<'t, 'monad<'u>>.( ||| )","content":"Kleisli<'t, 'monad<'u>>.( ||| ) \n( ||| ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#( <<< )","title":"Kleisli<'t, 'monad<'u>>.( <<< )","content":"Kleisli<'t, 'monad<'u>>.( <<< ) \n( <<< ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#( +++ )","title":"Kleisli<'t, 'monad<'u>>.( +++ )","content":"Kleisli<'t, 'monad<'u>>.( +++ ) \n( +++ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-kleisli-2.html#Kleisli","title":"Kleisli<'t, 'monad<'u>>.Kleisli","content":"Kleisli<'t, 'monad<'u>>.Kleisli \nKleisli \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-last-1.html","title":"Last<'t>","content":"Last<'t> \n\n Option<'T> monoid returning the rightmost non-None value.\n \nLast<'t>.get_Zero \nget_Zero \nLast<'t>.( + ) \n( + ) \nLast<'t>.run \nrun \nLast<'t>.Last \nLast"},{"uri":"/FSharpPlusreference/fsharpplus-data-last-1.html#get_Zero","title":"Last<'t>.get_Zero","content":"Last<'t>.get_Zero \nget_Zero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-last-1.html#( + )","title":"Last<'t>.( + )","content":"Last<'t>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-last-1.html#run","title":"Last<'t>.run","content":"Last<'t>.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-last-1.html#Last","title":"Last<'t>.Last","content":"Last<'t>.Last \nLast \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html","title":"ListT<'monad<list<'t>>>","content":"ListT<'monad<list<'t>>> \n\n Monad Transformer for list<'T>\n \nListT<'monad<list<'t>>>.CallCC \nCallCC \nListT<'monad<list<'t>>>.Catch \nCatch \nListT<'monad<list<'t>>>.Delay \nDelay \nListT<'monad<list<'t>>>.Lift \nLift \nListT<'monad<list<'t>>>.Lift2 \nLift2 \nListT<'monad<list<'t>>>.LiftAsync \nLiftAsync \nListT<'monad<list<'t>>>.Local \nLocal \nListT<'monad<list<'t>>>.Map \nMap \nListT<'monad<list<'t>>>.Put \nPut \nListT<'monad<list<'t>>>.Return \nReturn \nListT<'monad<list<'t>>>.Throw \nThrow \nListT<'monad<list<'t>>>.TryFinally \nTryFinally \nListT<'monad<list<'t>>>.TryWith \nTryWith \nListT<'monad<list<'t>>>.Using \nUsing \nListT<'monad<list<'t>>>.get_Ask \nget_Ask \nListT<'monad<list<'t>>>.get_Empty \nget_Empty \nListT<'monad<list<'t>>>.get_Get \nget_Get \nListT<'monad<list<'t>>>.( >>= ) \n( >>= ) \nListT<'monad<list<'t>>>.( <|> ) \n( <|> ) \nListT<'monad<list<'t>>>.( <*> ) \n( <*> ) \nListT<'monad<list<'t>>>.ListT \nListT"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#CallCC","title":"ListT<'monad<list<'t>>>.CallCC","content":"ListT<'monad<list<'t>>>.CallCC \nCallCC \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#Catch","title":"ListT<'monad<list<'t>>>.Catch","content":"ListT<'monad<list<'t>>>.Catch \nCatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#Delay","title":"ListT<'monad<list<'t>>>.Delay","content":"ListT<'monad<list<'t>>>.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#Lift","title":"ListT<'monad<list<'t>>>.Lift","content":"ListT<'monad<list<'t>>>.Lift \nLift \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#Lift2","title":"ListT<'monad<list<'t>>>.Lift2","content":"ListT<'monad<list<'t>>>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#LiftAsync","title":"ListT<'monad<list<'t>>>.LiftAsync","content":"ListT<'monad<list<'t>>>.LiftAsync \nLiftAsync \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#Local","title":"ListT<'monad<list<'t>>>.Local","content":"ListT<'monad<list<'t>>>.Local \nLocal \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#Map","title":"ListT<'monad<list<'t>>>.Map","content":"ListT<'monad<list<'t>>>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#Put","title":"ListT<'monad<list<'t>>>.Put","content":"ListT<'monad<list<'t>>>.Put \nPut \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#Return","title":"ListT<'monad<list<'t>>>.Return","content":"ListT<'monad<list<'t>>>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#Throw","title":"ListT<'monad<list<'t>>>.Throw","content":"ListT<'monad<list<'t>>>.Throw \nThrow \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#TryFinally","title":"ListT<'monad<list<'t>>>.TryFinally","content":"ListT<'monad<list<'t>>>.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#TryWith","title":"ListT<'monad<list<'t>>>.TryWith","content":"ListT<'monad<list<'t>>>.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#Using","title":"ListT<'monad<list<'t>>>.Using","content":"ListT<'monad<list<'t>>>.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#get_Ask","title":"ListT<'monad<list<'t>>>.get_Ask","content":"ListT<'monad<list<'t>>>.get_Ask \nget_Ask \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#get_Empty","title":"ListT<'monad<list<'t>>>.get_Empty","content":"ListT<'monad<list<'t>>>.get_Empty \nget_Empty \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#get_Get","title":"ListT<'monad<list<'t>>>.get_Get","content":"ListT<'monad<list<'t>>>.get_Get \nget_Get \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#( >>= )","title":"ListT<'monad<list<'t>>>.( >>= )","content":"ListT<'monad<list<'t>>>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#( <|> )","title":"ListT<'monad<list<'t>>>.( <|> )","content":"ListT<'monad<list<'t>>>.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#( <*> )","title":"ListT<'monad<list<'t>>>.( <*> )","content":"ListT<'monad<list<'t>>>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-listt-1.html#ListT","title":"ListT<'monad<list<'t>>>.ListT","content":"ListT<'monad<list<'t>>>.ListT \nListT \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html","title":"Matrix<'Item, 'Row, 'Column>","content":"Matrix<'Item, 'Row, 'Column> \n \nMatrix<'Item, 'Row, 'Column>.UnsafeGet \nUnsafeGet \nMatrix<'Item, 'Row, 'Column>.FromBigInt \nFromBigInt \nMatrix<'Item, 'Row, 'Column>.FromInt32 \nFromInt32 \nMatrix<'Item, 'Row, 'Column>.FromInt64 \nFromInt64 \nMatrix<'Item, 'Row, 'Column>.Item \nItem \nMatrix<'Item, 'Row, 'Column>.Map \nMap \nMatrix<'Item, 'Row, 'Column>.Return \nReturn \nMatrix<'Item, 'Row, 'Column>.UnsafeCreate \nUnsafeCreate \nMatrix<'Item, 'Row, 'Column>.get_Zero \nget_Zero \nMatrix<'Item, 'Row, 'Column>.( + ) \n( + ) \nMatrix<'Item, 'Row, 'Column>.( @| ) \n( @| ) \nMatrix<'Item, 'Row, 'Column>.( @- ) \n( @- ) \nMatrix<'Item, 'Row, 'Column>.( @* ) \n( @* ) \nMatrix<'Item, 'Row, 'Column>.( |*| ) \n( |*| ) \nMatrix<'Item, 'Row, 'Column>.( / ) \n( / ) \nMatrix<'Item, 'Row, 'Column>.( <*> ) \n( <*> ) \nMatrix<'Item, 'Row, 'Column>.( * ) \n( * ) \nMatrix<'Item, 'Row, 'Column>.( - ) \n( - ) \nMatrix<'Item, 'Row, 'Column>.( ~- ) \n( ~- ) \nMatrix<'Item, 'Row, 'Column>.Items \nItems"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#UnsafeGet","title":"Matrix<'Item, 'Row, 'Column>.UnsafeGet","content":"Matrix<'Item, 'Row, 'Column>.UnsafeGet \nUnsafeGet \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#FromBigInt","title":"Matrix<'Item, 'Row, 'Column>.FromBigInt","content":"Matrix<'Item, 'Row, 'Column>.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#FromInt32","title":"Matrix<'Item, 'Row, 'Column>.FromInt32","content":"Matrix<'Item, 'Row, 'Column>.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#FromInt64","title":"Matrix<'Item, 'Row, 'Column>.FromInt64","content":"Matrix<'Item, 'Row, 'Column>.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#Item","title":"Matrix<'Item, 'Row, 'Column>.Item","content":"Matrix<'Item, 'Row, 'Column>.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#Map","title":"Matrix<'Item, 'Row, 'Column>.Map","content":"Matrix<'Item, 'Row, 'Column>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#Return","title":"Matrix<'Item, 'Row, 'Column>.Return","content":"Matrix<'Item, 'Row, 'Column>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#UnsafeCreate","title":"Matrix<'Item, 'Row, 'Column>.UnsafeCreate","content":"Matrix<'Item, 'Row, 'Column>.UnsafeCreate \nUnsafeCreate \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#get_Zero","title":"Matrix<'Item, 'Row, 'Column>.get_Zero","content":"Matrix<'Item, 'Row, 'Column>.get_Zero \nget_Zero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#( + )","title":"Matrix<'Item, 'Row, 'Column>.( + )","content":"Matrix<'Item, 'Row, 'Column>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#( @| )","title":"Matrix<'Item, 'Row, 'Column>.( @| )","content":"Matrix<'Item, 'Row, 'Column>.( @| ) \n( @| ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#( @- )","title":"Matrix<'Item, 'Row, 'Column>.( @- )","content":"Matrix<'Item, 'Row, 'Column>.( @- ) \n( @- ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#( @* )","title":"Matrix<'Item, 'Row, 'Column>.( @* )","content":"Matrix<'Item, 'Row, 'Column>.( @* ) \n( @* ) \n\n kronecker (tensor) product\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#( |*| )","title":"Matrix<'Item, 'Row, 'Column>.( |*| )","content":"Matrix<'Item, 'Row, 'Column>.( |*| ) \n( |*| ) \n\n matrix product\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#( / )","title":"Matrix<'Item, 'Row, 'Column>.( / )","content":"Matrix<'Item, 'Row, 'Column>.( / ) \n( / ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#( <*> )","title":"Matrix<'Item, 'Row, 'Column>.( <*> )","content":"Matrix<'Item, 'Row, 'Column>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#( * )","title":"Matrix<'Item, 'Row, 'Column>.( * )","content":"Matrix<'Item, 'Row, 'Column>.( * ) \n( * ) \n\n hadamard (element-wise) product\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#( - )","title":"Matrix<'Item, 'Row, 'Column>.( - )","content":"Matrix<'Item, 'Row, 'Column>.( - ) \n( - ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#( ~- )","title":"Matrix<'Item, 'Row, 'Column>.( ~- )","content":"Matrix<'Item, 'Row, 'Column>.( ~- ) \n( ~- ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-matrix-3.html#Items","title":"Matrix<'Item, 'Row, 'Column>.Items","content":"Matrix<'Item, 'Row, 'Column>.Items \nItems \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-mult-1.html","title":"Mult<'a>","content":"Mult<'a> \n\n Numeric wrapper for multiplication monoid (*, 1)\n \nMult<'a>.get_Zero \nget_Zero \nMult<'a>.( + ) \n( + ) \nMult<'a>.Mult \nMult"},{"uri":"/FSharpPlusreference/fsharpplus-data-mult-1.html#get_Zero","title":"Mult<'a>.get_Zero","content":"Mult<'a>.get_Zero \nget_Zero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-mult-1.html#( + )","title":"Mult<'a>.( + )","content":"Mult<'a>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-mult-1.html#Mult","title":"Mult<'a>.Mult","content":"Mult<'a>.Mult \nMult \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html","title":"NonEmptyList<'t>","content":"NonEmptyList<'t> \n\n A type-safe list that contains at least one element.\n \nNonEmptyList<'t>.tail \ntail \nNonEmptyList<'t>.head \nhead \nNonEmptyList<'t>.Length \nLength \nNonEmptyList<'t>.Item \nItem \nNonEmptyList<'t>.GetSlice \nGetSlice \nNonEmptyList<'t>.Choice \nChoice \nNonEmptyList<'t>.Duplicate \nDuplicate \nNonEmptyList<'t>.Extract \nExtract \nNonEmptyList<'t>.Fold \nFold \nNonEmptyList<'t>.FoldBack \nFoldBack \nNonEmptyList<'t>.Lift2 \nLift2 \nNonEmptyList<'t>.Map \nMap \nNonEmptyList<'t>.MapIndexed \nMapIndexed \nNonEmptyList<'t>.Reduce \nReduce \nNonEmptyList<'t>.Replace \nReplace \nNonEmptyList<'t>.Return \nReturn \nNonEmptyList<'t>.Sum \nSum \nNonEmptyList<'t>.ToList \nToList \nNonEmptyList<'t>.ToSeq \nToSeq \nNonEmptyList<'t>.Traverse \nTraverse \nNonEmptyList<'t>.Unzip \nUnzip \nNonEmptyList<'t>.Zip \nZip \nNonEmptyList<'t>.( + ) \n( + ) \nNonEmptyList<'t>.( =>> ) \n( =>> ) \nNonEmptyList<'t>.( >>= ) \n( >>= ) \nNonEmptyList<'t>.( <*> ) \n( <*> ) \nNonEmptyList<'t>.Head \nHead \nNonEmptyList<'t>.Tail \nTail"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#tail","title":"NonEmptyList<'t>.tail","content":"NonEmptyList<'t>.tail \ntail \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#head","title":"NonEmptyList<'t>.head","content":"NonEmptyList<'t>.head \nhead \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Length","title":"NonEmptyList<'t>.Length","content":"NonEmptyList<'t>.Length \nLength \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Item","title":"NonEmptyList<'t>.Item","content":"NonEmptyList<'t>.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#GetSlice","title":"NonEmptyList<'t>.GetSlice","content":"NonEmptyList<'t>.GetSlice \nGetSlice \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Choice","title":"NonEmptyList<'t>.Choice","content":"NonEmptyList<'t>.Choice \nChoice \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Duplicate","title":"NonEmptyList<'t>.Duplicate","content":"NonEmptyList<'t>.Duplicate \nDuplicate \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Extract","title":"NonEmptyList<'t>.Extract","content":"NonEmptyList<'t>.Extract \nExtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Fold","title":"NonEmptyList<'t>.Fold","content":"NonEmptyList<'t>.Fold \nFold \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#FoldBack","title":"NonEmptyList<'t>.FoldBack","content":"NonEmptyList<'t>.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Lift2","title":"NonEmptyList<'t>.Lift2","content":"NonEmptyList<'t>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Map","title":"NonEmptyList<'t>.Map","content":"NonEmptyList<'t>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#MapIndexed","title":"NonEmptyList<'t>.MapIndexed","content":"NonEmptyList<'t>.MapIndexed \nMapIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Reduce","title":"NonEmptyList<'t>.Reduce","content":"NonEmptyList<'t>.Reduce \nReduce \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Replace","title":"NonEmptyList<'t>.Replace","content":"NonEmptyList<'t>.Replace \nReplace \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Return","title":"NonEmptyList<'t>.Return","content":"NonEmptyList<'t>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Sum","title":"NonEmptyList<'t>.Sum","content":"NonEmptyList<'t>.Sum \nSum \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#ToList","title":"NonEmptyList<'t>.ToList","content":"NonEmptyList<'t>.ToList \nToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#ToSeq","title":"NonEmptyList<'t>.ToSeq","content":"NonEmptyList<'t>.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Traverse","title":"NonEmptyList<'t>.Traverse","content":"NonEmptyList<'t>.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Unzip","title":"NonEmptyList<'t>.Unzip","content":"NonEmptyList<'t>.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Zip","title":"NonEmptyList<'t>.Zip","content":"NonEmptyList<'t>.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#( + )","title":"NonEmptyList<'t>.( + )","content":"NonEmptyList<'t>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#( =>> )","title":"NonEmptyList<'t>.( =>> )","content":"NonEmptyList<'t>.( =>> ) \n( =>> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#( >>= )","title":"NonEmptyList<'t>.( >>= )","content":"NonEmptyList<'t>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#( <*> )","title":"NonEmptyList<'t>.( <*> )","content":"NonEmptyList<'t>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Head","title":"NonEmptyList<'t>.Head","content":"NonEmptyList<'t>.Head \nHead \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptylist-1.html#Tail","title":"NonEmptyList<'t>.Tail","content":"NonEmptyList<'t>.Tail \nTail \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html","title":"NonEmptyMap<'Key, 'Value>","content":"NonEmptyMap<'Key, 'Value> \n\n A type-safe map that contains at least one element.\n \nNonEmptyMap<'Key, 'Value>.Add \nAdd \nNonEmptyMap<'Key, 'Value>.ContainsKey \nContainsKey \nNonEmptyMap<'Key, 'Value>.TryFind \nTryFind \nNonEmptyMap<'Key, 'Value>.TryGetValue \nTryGetValue \nNonEmptyMap<'Key, 'Value>.Item \nItem \nNonEmptyMap<'Key, 'Value>.( + ) \n( + ) \nNonEmptyMap<'Key, 'Value>.Create \nCreate \nNonEmptyMap<'Key, 'Value>.FoldIndexed \nFoldIndexed \nNonEmptyMap<'Key, 'Value>.Iterate \nIterate \nNonEmptyMap<'Key, 'Value>.IterateIndexed \nIterateIndexed \nNonEmptyMap<'Key, 'Value>.Map \nMap \nNonEmptyMap<'Key, 'Value>.MapIndexed \nMapIndexed \nNonEmptyMap<'Key, 'Value>.ToList \nToList \nNonEmptyMap<'Key, 'Value>.ToSeq \nToSeq \nNonEmptyMap<'Key, 'Value>.Traverse \nTraverse \nNonEmptyMap<'Key, 'Value>.TraverseIndexed \nTraverseIndexed \nNonEmptyMap<'Key, 'Value>.Unzip \nUnzip \nNonEmptyMap<'Key, 'Value>.Value \nValue"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#Add","title":"NonEmptyMap<'Key, 'Value>.Add","content":"NonEmptyMap<'Key, 'Value>.Add \nAdd \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#ContainsKey","title":"NonEmptyMap<'Key, 'Value>.ContainsKey","content":"NonEmptyMap<'Key, 'Value>.ContainsKey \nContainsKey \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#TryFind","title":"NonEmptyMap<'Key, 'Value>.TryFind","content":"NonEmptyMap<'Key, 'Value>.TryFind \nTryFind \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#TryGetValue","title":"NonEmptyMap<'Key, 'Value>.TryGetValue","content":"NonEmptyMap<'Key, 'Value>.TryGetValue \nTryGetValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#Item","title":"NonEmptyMap<'Key, 'Value>.Item","content":"NonEmptyMap<'Key, 'Value>.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#( + )","title":"NonEmptyMap<'Key, 'Value>.( + )","content":"NonEmptyMap<'Key, 'Value>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#Create","title":"NonEmptyMap<'Key, 'Value>.Create","content":"NonEmptyMap<'Key, 'Value>.Create \nCreate \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#FoldIndexed","title":"NonEmptyMap<'Key, 'Value>.FoldIndexed","content":"NonEmptyMap<'Key, 'Value>.FoldIndexed \nFoldIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#Iterate","title":"NonEmptyMap<'Key, 'Value>.Iterate","content":"NonEmptyMap<'Key, 'Value>.Iterate \nIterate \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#IterateIndexed","title":"NonEmptyMap<'Key, 'Value>.IterateIndexed","content":"NonEmptyMap<'Key, 'Value>.IterateIndexed \nIterateIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#Map","title":"NonEmptyMap<'Key, 'Value>.Map","content":"NonEmptyMap<'Key, 'Value>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#MapIndexed","title":"NonEmptyMap<'Key, 'Value>.MapIndexed","content":"NonEmptyMap<'Key, 'Value>.MapIndexed \nMapIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#ToList","title":"NonEmptyMap<'Key, 'Value>.ToList","content":"NonEmptyMap<'Key, 'Value>.ToList \nToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#ToSeq","title":"NonEmptyMap<'Key, 'Value>.ToSeq","content":"NonEmptyMap<'Key, 'Value>.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#Traverse","title":"NonEmptyMap<'Key, 'Value>.Traverse","content":"NonEmptyMap<'Key, 'Value>.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#TraverseIndexed","title":"NonEmptyMap<'Key, 'Value>.TraverseIndexed","content":"NonEmptyMap<'Key, 'Value>.TraverseIndexed \nTraverseIndexed \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#Unzip","title":"NonEmptyMap<'Key, 'Value>.Unzip","content":"NonEmptyMap<'Key, 'Value>.Unzip \nUnzip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptymap-2.html#Value","title":"NonEmptyMap<'Key, 'Value>.Value","content":"NonEmptyMap<'Key, 'Value>.Value \nValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq-1.html","title":"NonEmptySeq<'T>","content":"NonEmptySeq<'T> \n\n A type-safe sequence that contains at least one element.\n \nNonEmptySeq<'T>.First \nFirst"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyseq-1.html#First","title":"NonEmptySeq<'T>.First","content":"NonEmptySeq<'T>.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html","title":"NonEmptySet<'a>","content":"NonEmptySet<'a> \n\n A type-safe set that contains at least one element.\n \nNonEmptySet<'a>.Add \nAdd \nNonEmptySet<'a>.Contains \nContains \nNonEmptySet<'a>.IsProperSubsetOf \nIsProperSubsetOf \nNonEmptySet<'a>.IsProperSupersetOf \nIsProperSupersetOf \nNonEmptySet<'a>.IsSubsetOf \nIsSubsetOf \nNonEmptySet<'a>.IsSupersetOf \nIsSupersetOf \nNonEmptySet<'a>.MinimumElement \nMinimumElement \nNonEmptySet<'a>.MaximumElement \nMaximumElement \nNonEmptySet<'a>.Count \nCount \nNonEmptySet<'a>.Create \nCreate \nNonEmptySet<'a>.FoldBack \nFoldBack \nNonEmptySet<'a>.Map \nMap \nNonEmptySet<'a>.Reduce \nReduce \nNonEmptySet<'a>.Return \nReturn \nNonEmptySet<'a>.ToList \nToList \nNonEmptySet<'a>.ToSeq \nToSeq \nNonEmptySet<'a>.( + ) \n( + ) \nNonEmptySet<'a>.Value \nValue"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#Add","title":"NonEmptySet<'a>.Add","content":"NonEmptySet<'a>.Add \nAdd \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#Contains","title":"NonEmptySet<'a>.Contains","content":"NonEmptySet<'a>.Contains \nContains \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#IsProperSubsetOf","title":"NonEmptySet<'a>.IsProperSubsetOf","content":"NonEmptySet<'a>.IsProperSubsetOf \nIsProperSubsetOf \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#IsProperSupersetOf","title":"NonEmptySet<'a>.IsProperSupersetOf","content":"NonEmptySet<'a>.IsProperSupersetOf \nIsProperSupersetOf \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#IsSubsetOf","title":"NonEmptySet<'a>.IsSubsetOf","content":"NonEmptySet<'a>.IsSubsetOf \nIsSubsetOf \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#IsSupersetOf","title":"NonEmptySet<'a>.IsSupersetOf","content":"NonEmptySet<'a>.IsSupersetOf \nIsSupersetOf \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#MinimumElement","title":"NonEmptySet<'a>.MinimumElement","content":"NonEmptySet<'a>.MinimumElement \nMinimumElement \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#MaximumElement","title":"NonEmptySet<'a>.MaximumElement","content":"NonEmptySet<'a>.MaximumElement \nMaximumElement \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#Count","title":"NonEmptySet<'a>.Count","content":"NonEmptySet<'a>.Count \nCount \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#Create","title":"NonEmptySet<'a>.Create","content":"NonEmptySet<'a>.Create \nCreate \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#FoldBack","title":"NonEmptySet<'a>.FoldBack","content":"NonEmptySet<'a>.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#Map","title":"NonEmptySet<'a>.Map","content":"NonEmptySet<'a>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#Reduce","title":"NonEmptySet<'a>.Reduce","content":"NonEmptySet<'a>.Reduce \nReduce \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#Return","title":"NonEmptySet<'a>.Return","content":"NonEmptySet<'a>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#ToList","title":"NonEmptySet<'a>.ToList","content":"NonEmptySet<'a>.ToList \nToList \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#ToSeq","title":"NonEmptySet<'a>.ToSeq","content":"NonEmptySet<'a>.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#( + )","title":"NonEmptySet<'a>.( + )","content":"NonEmptySet<'a>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nonemptyset-1.html#Value","title":"NonEmptySet<'a>.Value","content":"NonEmptySet<'a>.Value \nValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html","title":"OptionT<'monad<option<'t>>>","content":"OptionT<'monad<option<'t>>> \n\n Monad Transformer for Option<'T>\n \nOptionT<'monad<option<'t>>>.CallCC \nCallCC \nOptionT<'monad<option<'t>>>.Catch \nCatch \nOptionT<'monad<option<'t>>>.Delay \nDelay \nOptionT<'monad<option<'t>>>.Lift \nLift \nOptionT<'monad<option<'t>>>.Lift2 \nLift2 \nOptionT<'monad<option<'t>>>.LiftAsync \nLiftAsync \nOptionT<'monad<option<'t>>>.Listen \nListen \nOptionT<'monad<option<'t>>>.Local \nLocal \nOptionT<'monad<option<'t>>>.Map \nMap \nOptionT<'monad<option<'t>>>.Pass \nPass \nOptionT<'monad<option<'t>>>.Put \nPut \nOptionT<'monad<option<'t>>>.Return \nReturn \nOptionT<'monad<option<'t>>>.Tell \nTell \nOptionT<'monad<option<'t>>>.Throw \nThrow \nOptionT<'monad<option<'t>>>.TryFinally \nTryFinally \nOptionT<'monad<option<'t>>>.TryWith \nTryWith \nOptionT<'monad<option<'t>>>.Using \nUsing \nOptionT<'monad<option<'t>>>.get_Ask \nget_Ask \nOptionT<'monad<option<'t>>>.get_Empty \nget_Empty \nOptionT<'monad<option<'t>>>.get_Get \nget_Get \nOptionT<'monad<option<'t>>>.( >>= ) \n( >>= ) \nOptionT<'monad<option<'t>>>.( <|> ) \n( <|> ) \nOptionT<'monad<option<'t>>>.( <*> ) \n( <*> ) \nOptionT<'monad<option<'t>>>.OptionT \nOptionT"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#CallCC","title":"OptionT<'monad<option<'t>>>.CallCC","content":"OptionT<'monad<option<'t>>>.CallCC \nCallCC \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#Catch","title":"OptionT<'monad<option<'t>>>.Catch","content":"OptionT<'monad<option<'t>>>.Catch \nCatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#Delay","title":"OptionT<'monad<option<'t>>>.Delay","content":"OptionT<'monad<option<'t>>>.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#Lift","title":"OptionT<'monad<option<'t>>>.Lift","content":"OptionT<'monad<option<'t>>>.Lift \nLift \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#Lift2","title":"OptionT<'monad<option<'t>>>.Lift2","content":"OptionT<'monad<option<'t>>>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#LiftAsync","title":"OptionT<'monad<option<'t>>>.LiftAsync","content":"OptionT<'monad<option<'t>>>.LiftAsync \nLiftAsync \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#Listen","title":"OptionT<'monad<option<'t>>>.Listen","content":"OptionT<'monad<option<'t>>>.Listen \nListen \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#Local","title":"OptionT<'monad<option<'t>>>.Local","content":"OptionT<'monad<option<'t>>>.Local \nLocal \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#Map","title":"OptionT<'monad<option<'t>>>.Map","content":"OptionT<'monad<option<'t>>>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#Pass","title":"OptionT<'monad<option<'t>>>.Pass","content":"OptionT<'monad<option<'t>>>.Pass \nPass \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#Put","title":"OptionT<'monad<option<'t>>>.Put","content":"OptionT<'monad<option<'t>>>.Put \nPut \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#Return","title":"OptionT<'monad<option<'t>>>.Return","content":"OptionT<'monad<option<'t>>>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#Tell","title":"OptionT<'monad<option<'t>>>.Tell","content":"OptionT<'monad<option<'t>>>.Tell \nTell \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#Throw","title":"OptionT<'monad<option<'t>>>.Throw","content":"OptionT<'monad<option<'t>>>.Throw \nThrow \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#TryFinally","title":"OptionT<'monad<option<'t>>>.TryFinally","content":"OptionT<'monad<option<'t>>>.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#TryWith","title":"OptionT<'monad<option<'t>>>.TryWith","content":"OptionT<'monad<option<'t>>>.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#Using","title":"OptionT<'monad<option<'t>>>.Using","content":"OptionT<'monad<option<'t>>>.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#get_Ask","title":"OptionT<'monad<option<'t>>>.get_Ask","content":"OptionT<'monad<option<'t>>>.get_Ask \nget_Ask \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#get_Empty","title":"OptionT<'monad<option<'t>>>.get_Empty","content":"OptionT<'monad<option<'t>>>.get_Empty \nget_Empty \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#get_Get","title":"OptionT<'monad<option<'t>>>.get_Get","content":"OptionT<'monad<option<'t>>>.get_Get \nget_Get \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#( >>= )","title":"OptionT<'monad<option<'t>>>.( >>= )","content":"OptionT<'monad<option<'t>>>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#( <|> )","title":"OptionT<'monad<option<'t>>>.( <|> )","content":"OptionT<'monad<option<'t>>>.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#( <*> )","title":"OptionT<'monad<option<'t>>>.( <*> )","content":"OptionT<'monad<option<'t>>>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-optiont-1.html#OptionT","title":"OptionT<'monad<option<'t>>>.OptionT","content":"OptionT<'monad<option<'t>>>.OptionT \nOptionT \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray-1.html","title":"ParallelArray<'t>","content":"ParallelArray<'t> \n\n Array with an Applicative functor based on zipping and parallel execution.\n \nParallelArray<'t>.Lift2 \nLift2 \nParallelArray<'t>.Map \nMap \nParallelArray<'t>.Return \nReturn \nParallelArray<'t>.get_Zero \nget_Zero \nParallelArray<'t>.( + ) \n( + ) \nParallelArray<'t>.( <*> ) \n( <*> ) \nParallelArray<'t>.Infinite \nInfinite \nParallelArray<'t>.Bounded \nBounded"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray-1.html#Lift2","title":"ParallelArray<'t>.Lift2","content":"ParallelArray<'t>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray-1.html#Map","title":"ParallelArray<'t>.Map","content":"ParallelArray<'t>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray-1.html#Return","title":"ParallelArray<'t>.Return","content":"ParallelArray<'t>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray-1.html#get_Zero","title":"ParallelArray<'t>.get_Zero","content":"ParallelArray<'t>.get_Zero \nget_Zero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray-1.html#( + )","title":"ParallelArray<'t>.( + )","content":"ParallelArray<'t>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray-1.html#( <*> )","title":"ParallelArray<'t>.( <*> )","content":"ParallelArray<'t>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray-1.html#Infinite","title":"ParallelArray<'t>.Infinite","content":"ParallelArray<'t>.Infinite \nInfinite \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parallelarray-1.html#Bounded","title":"ParallelArray<'t>.Bounded","content":"ParallelArray<'t>.Bounded \nBounded \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html","title":"Reader<'r, 't>","content":"Reader<'r, 't> \n Computation type: Computations which read values from a shared environment.\n <p class='fsdocs-para'></p>   Binding strategy: Monad values are functions from the environment to a value. The bound function is applied to the bound value, and both have access to the shared environment.\n <p class='fsdocs-para'></p>   Useful for: Maintaining variable bindings, or other shared environment. \nReader<'r, 't>.Delay \nDelay \nReader<'r, 't>.Extract \nExtract \nReader<'r, 't>.Local \nLocal \nReader<'r, 't>.Map \nMap \nReader<'r, 't>.Return \nReturn \nReader<'r, 't>.TryFinally \nTryFinally \nReader<'r, 't>.TryWith \nTryWith \nReader<'r, 't>.Using \nUsing \nReader<'r, 't>.Zip \nZip \nReader<'r, 't>.get_Ask \nget_Ask \nReader<'r, 't>.( =>> ) \n( =>> ) \nReader<'r, 't>.( >>= ) \n( >>= ) \nReader<'r, 't>.( <*> ) \n( <*> ) \nReader<'r, 't>.Reader \nReader"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#Delay","title":"Reader<'r, 't>.Delay","content":"Reader<'r, 't>.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#Extract","title":"Reader<'r, 't>.Extract","content":"Reader<'r, 't>.Extract \nExtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#Local","title":"Reader<'r, 't>.Local","content":"Reader<'r, 't>.Local \nLocal \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#Map","title":"Reader<'r, 't>.Map","content":"Reader<'r, 't>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#Return","title":"Reader<'r, 't>.Return","content":"Reader<'r, 't>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#TryFinally","title":"Reader<'r, 't>.TryFinally","content":"Reader<'r, 't>.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#TryWith","title":"Reader<'r, 't>.TryWith","content":"Reader<'r, 't>.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#Using","title":"Reader<'r, 't>.Using","content":"Reader<'r, 't>.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#Zip","title":"Reader<'r, 't>.Zip","content":"Reader<'r, 't>.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#get_Ask","title":"Reader<'r, 't>.get_Ask","content":"Reader<'r, 't>.get_Ask \nget_Ask \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#( =>> )","title":"Reader<'r, 't>.( =>> )","content":"Reader<'r, 't>.( =>> ) \n( =>> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#( >>= )","title":"Reader<'r, 't>.( >>= )","content":"Reader<'r, 't>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#( <*> )","title":"Reader<'r, 't>.( <*> )","content":"Reader<'r, 't>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-reader-2.html#Reader","title":"Reader<'r, 't>.Reader","content":"Reader<'r, 't>.Reader \nReader \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html","title":"ReaderT<'r, 'monad<'t>>","content":"ReaderT<'r, 'monad<'t>> \n\n Monad Transformer for Reader<'R, 'T>\n \nReaderT<'r, 'monad<'t>>.CallCC \nCallCC \nReaderT<'r, 'monad<'t>>.Catch \nCatch \nReaderT<'r, 'monad<'t>>.Delay \nDelay \nReaderT<'r, 'monad<'t>>.Lift \nLift \nReaderT<'r, 'monad<'t>>.Lift2 \nLift2 \nReaderT<'r, 'monad<'t>>.LiftAsync \nLiftAsync \nReaderT<'r, 'monad<'t>>.Listen \nListen \nReaderT<'r, 'monad<'t>>.Local \nLocal \nReaderT<'r, 'monad<'t>>.Map \nMap \nReaderT<'r, 'monad<'t>>.Pass \nPass \nReaderT<'r, 'monad<'t>>.Put \nPut \nReaderT<'r, 'monad<'t>>.Return \nReturn \nReaderT<'r, 'monad<'t>>.Tell \nTell \nReaderT<'r, 'monad<'t>>.Throw \nThrow \nReaderT<'r, 'monad<'t>>.TryFinally \nTryFinally \nReaderT<'r, 'monad<'t>>.TryWith \nTryWith \nReaderT<'r, 'monad<'t>>.Using \nUsing \nReaderT<'r, 'monad<'t>>.Zip \nZip \nReaderT<'r, 'monad<'t>>.get_Ask \nget_Ask \nReaderT<'r, 'monad<'t>>.get_Empty \nget_Empty \nReaderT<'r, 'monad<'t>>.get_Get \nget_Get \nReaderT<'r, 'monad<'t>>.( >>= ) \n( >>= ) \nReaderT<'r, 'monad<'t>>.( <|> ) \n( <|> ) \nReaderT<'r, 'monad<'t>>.( <*> ) \n( <*> ) \nReaderT<'r, 'monad<'t>>.ReaderT \nReaderT"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#CallCC","title":"ReaderT<'r, 'monad<'t>>.CallCC","content":"ReaderT<'r, 'monad<'t>>.CallCC \nCallCC \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Catch","title":"ReaderT<'r, 'monad<'t>>.Catch","content":"ReaderT<'r, 'monad<'t>>.Catch \nCatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Delay","title":"ReaderT<'r, 'monad<'t>>.Delay","content":"ReaderT<'r, 'monad<'t>>.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Lift","title":"ReaderT<'r, 'monad<'t>>.Lift","content":"ReaderT<'r, 'monad<'t>>.Lift \nLift \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Lift2","title":"ReaderT<'r, 'monad<'t>>.Lift2","content":"ReaderT<'r, 'monad<'t>>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#LiftAsync","title":"ReaderT<'r, 'monad<'t>>.LiftAsync","content":"ReaderT<'r, 'monad<'t>>.LiftAsync \nLiftAsync \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Listen","title":"ReaderT<'r, 'monad<'t>>.Listen","content":"ReaderT<'r, 'monad<'t>>.Listen \nListen \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Local","title":"ReaderT<'r, 'monad<'t>>.Local","content":"ReaderT<'r, 'monad<'t>>.Local \nLocal \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Map","title":"ReaderT<'r, 'monad<'t>>.Map","content":"ReaderT<'r, 'monad<'t>>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Pass","title":"ReaderT<'r, 'monad<'t>>.Pass","content":"ReaderT<'r, 'monad<'t>>.Pass \nPass \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Put","title":"ReaderT<'r, 'monad<'t>>.Put","content":"ReaderT<'r, 'monad<'t>>.Put \nPut \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Return","title":"ReaderT<'r, 'monad<'t>>.Return","content":"ReaderT<'r, 'monad<'t>>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Tell","title":"ReaderT<'r, 'monad<'t>>.Tell","content":"ReaderT<'r, 'monad<'t>>.Tell \nTell \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Throw","title":"ReaderT<'r, 'monad<'t>>.Throw","content":"ReaderT<'r, 'monad<'t>>.Throw \nThrow \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#TryFinally","title":"ReaderT<'r, 'monad<'t>>.TryFinally","content":"ReaderT<'r, 'monad<'t>>.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#TryWith","title":"ReaderT<'r, 'monad<'t>>.TryWith","content":"ReaderT<'r, 'monad<'t>>.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Using","title":"ReaderT<'r, 'monad<'t>>.Using","content":"ReaderT<'r, 'monad<'t>>.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#Zip","title":"ReaderT<'r, 'monad<'t>>.Zip","content":"ReaderT<'r, 'monad<'t>>.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#get_Ask","title":"ReaderT<'r, 'monad<'t>>.get_Ask","content":"ReaderT<'r, 'monad<'t>>.get_Ask \nget_Ask \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#get_Empty","title":"ReaderT<'r, 'monad<'t>>.get_Empty","content":"ReaderT<'r, 'monad<'t>>.get_Empty \nget_Empty \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#get_Get","title":"ReaderT<'r, 'monad<'t>>.get_Get","content":"ReaderT<'r, 'monad<'t>>.get_Get \nget_Get \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#( >>= )","title":"ReaderT<'r, 'monad<'t>>.( >>= )","content":"ReaderT<'r, 'monad<'t>>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#( <|> )","title":"ReaderT<'r, 'monad<'t>>.( <|> )","content":"ReaderT<'r, 'monad<'t>>.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#( <*> )","title":"ReaderT<'r, 'monad<'t>>.( <*> )","content":"ReaderT<'r, 'monad<'t>>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-readert-2.html#ReaderT","title":"ReaderT<'r, 'monad<'t>>.ReaderT","content":"ReaderT<'r, 'monad<'t>>.ReaderT \nReaderT \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html","title":"ResultT<'monad<'result<'t,'e>>>","content":"ResultT<'monad<'result<'t,'e>>> \n\n Monad Transformer for Result<'T, 'E>\n \nResultT<'monad<'result<'t,'e>>>.CallCC \nCallCC \nResultT<'monad<'result<'t,'e>>>.Catch \nCatch \nResultT<'monad<'result<'t,'e>>>.Delay \nDelay \nResultT<'monad<'result<'t,'e>>>.Lift \nLift \nResultT<'monad<'result<'t,'e>>>.Lift2 \nLift2 \nResultT<'monad<'result<'t,'e>>>.LiftAsync \nLiftAsync \nResultT<'monad<'result<'t,'e>>>.Listen \nListen \nResultT<'monad<'result<'t,'e>>>.Local \nLocal \nResultT<'monad<'result<'t,'e>>>.Map \nMap \nResultT<'monad<'result<'t,'e>>>.Pass \nPass \nResultT<'monad<'result<'t,'e>>>.Put \nPut \nResultT<'monad<'result<'t,'e>>>.Return \nReturn \nResultT<'monad<'result<'t,'e>>>.Tell \nTell \nResultT<'monad<'result<'t,'e>>>.Throw \nThrow \nResultT<'monad<'result<'t,'e>>>.TryFinally \nTryFinally \nResultT<'monad<'result<'t,'e>>>.TryWith \nTryWith \nResultT<'monad<'result<'t,'e>>>.Using \nUsing \nResultT<'monad<'result<'t,'e>>>.get_Ask \nget_Ask \nResultT<'monad<'result<'t,'e>>>.get_Get \nget_Get \nResultT<'monad<'result<'t,'e>>>.( >>= ) \n( >>= ) \nResultT<'monad<'result<'t,'e>>>.( <*> ) \n( <*> ) \nResultT<'monad<'result<'t,'e>>>.ResultT \nResultT"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#CallCC","title":"ResultT<'monad<'result<'t,'e>>>.CallCC","content":"ResultT<'monad<'result<'t,'e>>>.CallCC \nCallCC \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#Catch","title":"ResultT<'monad<'result<'t,'e>>>.Catch","content":"ResultT<'monad<'result<'t,'e>>>.Catch \nCatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#Delay","title":"ResultT<'monad<'result<'t,'e>>>.Delay","content":"ResultT<'monad<'result<'t,'e>>>.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#Lift","title":"ResultT<'monad<'result<'t,'e>>>.Lift","content":"ResultT<'monad<'result<'t,'e>>>.Lift \nLift \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#Lift2","title":"ResultT<'monad<'result<'t,'e>>>.Lift2","content":"ResultT<'monad<'result<'t,'e>>>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#LiftAsync","title":"ResultT<'monad<'result<'t,'e>>>.LiftAsync","content":"ResultT<'monad<'result<'t,'e>>>.LiftAsync \nLiftAsync \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#Listen","title":"ResultT<'monad<'result<'t,'e>>>.Listen","content":"ResultT<'monad<'result<'t,'e>>>.Listen \nListen \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#Local","title":"ResultT<'monad<'result<'t,'e>>>.Local","content":"ResultT<'monad<'result<'t,'e>>>.Local \nLocal \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#Map","title":"ResultT<'monad<'result<'t,'e>>>.Map","content":"ResultT<'monad<'result<'t,'e>>>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#Pass","title":"ResultT<'monad<'result<'t,'e>>>.Pass","content":"ResultT<'monad<'result<'t,'e>>>.Pass \nPass \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#Put","title":"ResultT<'monad<'result<'t,'e>>>.Put","content":"ResultT<'monad<'result<'t,'e>>>.Put \nPut \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#Return","title":"ResultT<'monad<'result<'t,'e>>>.Return","content":"ResultT<'monad<'result<'t,'e>>>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#Tell","title":"ResultT<'monad<'result<'t,'e>>>.Tell","content":"ResultT<'monad<'result<'t,'e>>>.Tell \nTell \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#Throw","title":"ResultT<'monad<'result<'t,'e>>>.Throw","content":"ResultT<'monad<'result<'t,'e>>>.Throw \nThrow \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#TryFinally","title":"ResultT<'monad<'result<'t,'e>>>.TryFinally","content":"ResultT<'monad<'result<'t,'e>>>.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#TryWith","title":"ResultT<'monad<'result<'t,'e>>>.TryWith","content":"ResultT<'monad<'result<'t,'e>>>.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#Using","title":"ResultT<'monad<'result<'t,'e>>>.Using","content":"ResultT<'monad<'result<'t,'e>>>.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#get_Ask","title":"ResultT<'monad<'result<'t,'e>>>.get_Ask","content":"ResultT<'monad<'result<'t,'e>>>.get_Ask \nget_Ask \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#get_Get","title":"ResultT<'monad<'result<'t,'e>>>.get_Get","content":"ResultT<'monad<'result<'t,'e>>>.get_Get \nget_Get \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#( >>= )","title":"ResultT<'monad<'result<'t,'e>>>.( >>= )","content":"ResultT<'monad<'result<'t,'e>>>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#( <*> )","title":"ResultT<'monad<'result<'t,'e>>>.( <*> )","content":"ResultT<'monad<'result<'t,'e>>>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-resultt-1.html#ResultT","title":"ResultT<'monad<'result<'t,'e>>>.ResultT","content":"ResultT<'monad<'result<'t,'e>>>.ResultT \nResultT \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html","title":"SeqT<'monad<seq<'t>>>","content":"SeqT<'monad<seq<'t>>> \n\n Monad Transformer for seq<'T>\n \nSeqT<'monad<seq<'t>>>.CallCC \nCallCC \nSeqT<'monad<seq<'t>>>.Catch \nCatch \nSeqT<'monad<seq<'t>>>.Delay \nDelay \nSeqT<'monad<seq<'t>>>.Lift \nLift \nSeqT<'monad<seq<'t>>>.Lift2 \nLift2 \nSeqT<'monad<seq<'t>>>.LiftAsync \nLiftAsync \nSeqT<'monad<seq<'t>>>.Local \nLocal \nSeqT<'monad<seq<'t>>>.Map \nMap \nSeqT<'monad<seq<'t>>>.Put \nPut \nSeqT<'monad<seq<'t>>>.Return \nReturn \nSeqT<'monad<seq<'t>>>.Throw \nThrow \nSeqT<'monad<seq<'t>>>.TryFinally \nTryFinally \nSeqT<'monad<seq<'t>>>.TryWith \nTryWith \nSeqT<'monad<seq<'t>>>.Using \nUsing \nSeqT<'monad<seq<'t>>>.get_Ask \nget_Ask \nSeqT<'monad<seq<'t>>>.get_Empty \nget_Empty \nSeqT<'monad<seq<'t>>>.get_Get \nget_Get \nSeqT<'monad<seq<'t>>>.( >>= ) \n( >>= ) \nSeqT<'monad<seq<'t>>>.( <|> ) \n( <|> ) \nSeqT<'monad<seq<'t>>>.( <*> ) \n( <*> ) \nSeqT<'monad<seq<'t>>>.SeqT \nSeqT"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#CallCC","title":"SeqT<'monad<seq<'t>>>.CallCC","content":"SeqT<'monad<seq<'t>>>.CallCC \nCallCC \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#Catch","title":"SeqT<'monad<seq<'t>>>.Catch","content":"SeqT<'monad<seq<'t>>>.Catch \nCatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#Delay","title":"SeqT<'monad<seq<'t>>>.Delay","content":"SeqT<'monad<seq<'t>>>.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#Lift","title":"SeqT<'monad<seq<'t>>>.Lift","content":"SeqT<'monad<seq<'t>>>.Lift \nLift \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#Lift2","title":"SeqT<'monad<seq<'t>>>.Lift2","content":"SeqT<'monad<seq<'t>>>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#LiftAsync","title":"SeqT<'monad<seq<'t>>>.LiftAsync","content":"SeqT<'monad<seq<'t>>>.LiftAsync \nLiftAsync \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#Local","title":"SeqT<'monad<seq<'t>>>.Local","content":"SeqT<'monad<seq<'t>>>.Local \nLocal \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#Map","title":"SeqT<'monad<seq<'t>>>.Map","content":"SeqT<'monad<seq<'t>>>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#Put","title":"SeqT<'monad<seq<'t>>>.Put","content":"SeqT<'monad<seq<'t>>>.Put \nPut \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#Return","title":"SeqT<'monad<seq<'t>>>.Return","content":"SeqT<'monad<seq<'t>>>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#Throw","title":"SeqT<'monad<seq<'t>>>.Throw","content":"SeqT<'monad<seq<'t>>>.Throw \nThrow \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#TryFinally","title":"SeqT<'monad<seq<'t>>>.TryFinally","content":"SeqT<'monad<seq<'t>>>.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#TryWith","title":"SeqT<'monad<seq<'t>>>.TryWith","content":"SeqT<'monad<seq<'t>>>.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#Using","title":"SeqT<'monad<seq<'t>>>.Using","content":"SeqT<'monad<seq<'t>>>.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#get_Ask","title":"SeqT<'monad<seq<'t>>>.get_Ask","content":"SeqT<'monad<seq<'t>>>.get_Ask \nget_Ask \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#get_Empty","title":"SeqT<'monad<seq<'t>>>.get_Empty","content":"SeqT<'monad<seq<'t>>>.get_Empty \nget_Empty \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#get_Get","title":"SeqT<'monad<seq<'t>>>.get_Get","content":"SeqT<'monad<seq<'t>>>.get_Get \nget_Get \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#( >>= )","title":"SeqT<'monad<seq<'t>>>.( >>= )","content":"SeqT<'monad<seq<'t>>>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#( <|> )","title":"SeqT<'monad<seq<'t>>>.( <|> )","content":"SeqT<'monad<seq<'t>>>.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#( <*> )","title":"SeqT<'monad<seq<'t>>>.( <*> )","content":"SeqT<'monad<seq<'t>>>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-seqt-1.html#SeqT","title":"SeqT<'monad<seq<'t>>>.SeqT","content":"SeqT<'monad<seq<'t>>>.SeqT \nSeqT \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state-2.html","title":"State<'s, 't>","content":"State<'s, 't> \n Computation type: Computations which maintain state.\n <p class='fsdocs-para'></p>   Binding strategy: Threads a state parameter through the sequence of bound functions so that the same state value is never used twice, giving the illusion of in-place update.\n <p class='fsdocs-para'></p>   Useful for: Building computations from sequences of operations that require a shared state.  \nState<'s, 't>.Delay \nDelay \nState<'s, 't>.Map \nMap \nState<'s, 't>.Put \nPut \nState<'s, 't>.Return \nReturn \nState<'s, 't>.TryFinally \nTryFinally \nState<'s, 't>.TryWith \nTryWith \nState<'s, 't>.Using \nUsing \nState<'s, 't>.Zip \nZip \nState<'s, 't>.get_Get \nget_Get \nState<'s, 't>.( >>= ) \n( >>= ) \nState<'s, 't>.( <*> ) \n( <*> ) \nState<'s, 't>.State \nState"},{"uri":"/FSharpPlusreference/fsharpplus-data-state-2.html#Delay","title":"State<'s, 't>.Delay","content":"State<'s, 't>.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state-2.html#Map","title":"State<'s, 't>.Map","content":"State<'s, 't>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state-2.html#Put","title":"State<'s, 't>.Put","content":"State<'s, 't>.Put \nPut \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state-2.html#Return","title":"State<'s, 't>.Return","content":"State<'s, 't>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state-2.html#TryFinally","title":"State<'s, 't>.TryFinally","content":"State<'s, 't>.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state-2.html#TryWith","title":"State<'s, 't>.TryWith","content":"State<'s, 't>.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state-2.html#Using","title":"State<'s, 't>.Using","content":"State<'s, 't>.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state-2.html#Zip","title":"State<'s, 't>.Zip","content":"State<'s, 't>.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state-2.html#get_Get","title":"State<'s, 't>.get_Get","content":"State<'s, 't>.get_Get \nget_Get \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state-2.html#( >>= )","title":"State<'s, 't>.( >>= )","content":"State<'s, 't>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state-2.html#( <*> )","title":"State<'s, 't>.( <*> )","content":"State<'s, 't>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-state-2.html#State","title":"State<'s, 't>.State","content":"State<'s, 't>.State \nState \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html","title":"StateT<'s, 'monad<'t * 's>>","content":"StateT<'s, 'monad<'t * 's>> \n\n Monad Transformer for State<'S, 'T>\n \nStateT<'s, 'monad<'t * 's>>.Catch \nCatch \nStateT<'s, 'monad<'t * 's>>.Delay \nDelay \nStateT<'s, 'monad<'t * 's>>.Lift \nLift \nStateT<'s, 'monad<'t * 's>>.Lift2 \nLift2 \nStateT<'s, 'monad<'t * 's>>.LiftAsync \nLiftAsync \nStateT<'s, 'monad<'t * 's>>.Map \nMap \nStateT<'s, 'monad<'t * 's>>.Put \nPut \nStateT<'s, 'monad<'t * 's>>.Return \nReturn \nStateT<'s, 'monad<'t * 's>>.Throw \nThrow \nStateT<'s, 'monad<'t * 's>>.TryFinally \nTryFinally \nStateT<'s, 'monad<'t * 's>>.TryWith \nTryWith \nStateT<'s, 'monad<'t * 's>>.Using \nUsing \nStateT<'s, 'monad<'t * 's>>.Zip \nZip \nStateT<'s, 'monad<'t * 's>>.get_Empty \nget_Empty \nStateT<'s, 'monad<'t * 's>>.get_Get \nget_Get \nStateT<'s, 'monad<'t * 's>>.( >>= ) \n( >>= ) \nStateT<'s, 'monad<'t * 's>>.( <|> ) \n( <|> ) \nStateT<'s, 'monad<'t * 's>>.( <*> ) \n( <*> ) \nStateT<'s, 'monad<'t * 's>>.StateT \nStateT"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#Catch","title":"StateT<'s, 'monad<'t * 's>>.Catch","content":"StateT<'s, 'monad<'t * 's>>.Catch \nCatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#Delay","title":"StateT<'s, 'monad<'t * 's>>.Delay","content":"StateT<'s, 'monad<'t * 's>>.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#Lift","title":"StateT<'s, 'monad<'t * 's>>.Lift","content":"StateT<'s, 'monad<'t * 's>>.Lift \nLift \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#Lift2","title":"StateT<'s, 'monad<'t * 's>>.Lift2","content":"StateT<'s, 'monad<'t * 's>>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#LiftAsync","title":"StateT<'s, 'monad<'t * 's>>.LiftAsync","content":"StateT<'s, 'monad<'t * 's>>.LiftAsync \nLiftAsync \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#Map","title":"StateT<'s, 'monad<'t * 's>>.Map","content":"StateT<'s, 'monad<'t * 's>>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#Put","title":"StateT<'s, 'monad<'t * 's>>.Put","content":"StateT<'s, 'monad<'t * 's>>.Put \nPut \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#Return","title":"StateT<'s, 'monad<'t * 's>>.Return","content":"StateT<'s, 'monad<'t * 's>>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#Throw","title":"StateT<'s, 'monad<'t * 's>>.Throw","content":"StateT<'s, 'monad<'t * 's>>.Throw \nThrow \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#TryFinally","title":"StateT<'s, 'monad<'t * 's>>.TryFinally","content":"StateT<'s, 'monad<'t * 's>>.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#TryWith","title":"StateT<'s, 'monad<'t * 's>>.TryWith","content":"StateT<'s, 'monad<'t * 's>>.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#Using","title":"StateT<'s, 'monad<'t * 's>>.Using","content":"StateT<'s, 'monad<'t * 's>>.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#Zip","title":"StateT<'s, 'monad<'t * 's>>.Zip","content":"StateT<'s, 'monad<'t * 's>>.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#get_Empty","title":"StateT<'s, 'monad<'t * 's>>.get_Empty","content":"StateT<'s, 'monad<'t * 's>>.get_Empty \nget_Empty \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#get_Get","title":"StateT<'s, 'monad<'t * 's>>.get_Get","content":"StateT<'s, 'monad<'t * 's>>.get_Get \nget_Get \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#( >>= )","title":"StateT<'s, 'monad<'t * 's>>.( >>= )","content":"StateT<'s, 'monad<'t * 's>>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#( <|> )","title":"StateT<'s, 'monad<'t * 's>>.( <|> )","content":"StateT<'s, 'monad<'t * 's>>.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#( <*> )","title":"StateT<'s, 'monad<'t * 's>>.( <*> )","content":"StateT<'s, 'monad<'t * 's>>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-statet-2.html#StateT","title":"StateT<'s, 'monad<'t * 's>>.StateT","content":"StateT<'s, 'monad<'t * 's>>.StateT \nStateT \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html","title":"Validation<'error, 't>","content":"Validation<'error, 't> \n\n A 'Validation' is either a value of the type 'error or 't, similar to 'Result'. However,\n the 'Applicative' instance for 'Validation' accumulates errors using a 'Semigroup' on 'error.\n In contrast, the Applicative for 'Result' returns only the first error.\n\n A consequence of this is that 'Validation' is not a monad. There is no F#+ 'Bind' method since\n that would violate monad rules.\n \nValidation<'error, 't>.Bifold \nBifold \nValidation<'error, 't>.BifoldBack \nBifoldBack \nValidation<'error, 't>.BifoldMap \nBifoldMap \nValidation<'error, 't>.Bimap \nBimap \nValidation<'error, 't>.Bisequence \nBisequence \nValidation<'error, 't>.Bitraverse \nBitraverse \nValidation<'error, 't>.Lift2 \nLift2 \nValidation<'error, 't>.Map \nMap \nValidation<'error, 't>.Return \nReturn \nValidation<'error, 't>.Sequence \nSequence \nValidation<'error, 't>.Traverse \nTraverse \nValidation<'error, 't>.get_Empty \nget_Empty \nValidation<'error, 't>.( <!> ) \n( <!> ) \nValidation<'error, 't>.( <|> ) \n( <|> ) \nValidation<'error, 't>.( <*> ) \n( <*> ) \nValidation<'error, 't>.Failure \nFailure \nValidation<'error, 't>.Success \nSuccess"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#Bifold","title":"Validation<'error, 't>.Bifold","content":"Validation<'error, 't>.Bifold \nBifold \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#BifoldBack","title":"Validation<'error, 't>.BifoldBack","content":"Validation<'error, 't>.BifoldBack \nBifoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#BifoldMap","title":"Validation<'error, 't>.BifoldMap","content":"Validation<'error, 't>.BifoldMap \nBifoldMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#Bimap","title":"Validation<'error, 't>.Bimap","content":"Validation<'error, 't>.Bimap \nBimap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#Bisequence","title":"Validation<'error, 't>.Bisequence","content":"Validation<'error, 't>.Bisequence \nBisequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#Bitraverse","title":"Validation<'error, 't>.Bitraverse","content":"Validation<'error, 't>.Bitraverse \nBitraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#Lift2","title":"Validation<'error, 't>.Lift2","content":"Validation<'error, 't>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#Map","title":"Validation<'error, 't>.Map","content":"Validation<'error, 't>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#Return","title":"Validation<'error, 't>.Return","content":"Validation<'error, 't>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#Sequence","title":"Validation<'error, 't>.Sequence","content":"Validation<'error, 't>.Sequence \nSequence \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#Traverse","title":"Validation<'error, 't>.Traverse","content":"Validation<'error, 't>.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#get_Empty","title":"Validation<'error, 't>.get_Empty","content":"Validation<'error, 't>.get_Empty \nget_Empty \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#( <!> )","title":"Validation<'error, 't>.( <!> )","content":"Validation<'error, 't>.( <!> ) \n( <!> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#( <|> )","title":"Validation<'error, 't>.( <|> )","content":"Validation<'error, 't>.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#( <*> )","title":"Validation<'error, 't>.( <*> )","content":"Validation<'error, 't>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#Failure","title":"Validation<'error, 't>.Failure","content":"Validation<'error, 't>.Failure \nFailure \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-validation-2.html#Success","title":"Validation<'error, 't>.Success","content":"Validation<'error, 't>.Success \nSuccess \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html","title":"Vector<'Item, 'Length>","content":"Vector<'Item, 'Length> \n \nVector<'Item, 'Length>.UnsafeGet \nUnsafeGet \nVector<'Item, 'Length>.FoldBack \nFoldBack \nVector<'Item, 'Length>.FromBigInt \nFromBigInt \nVector<'Item, 'Length>.FromInt32 \nFromInt32 \nVector<'Item, 'Length>.FromInt64 \nFromInt64 \nVector<'Item, 'Length>.Item \nItem \nVector<'Item, 'Length>.Map \nMap \nVector<'Item, 'Length>.Reduce \nReduce \nVector<'Item, 'Length>.Return \nReturn \nVector<'Item, 'Length>.ToSeq \nToSeq \nVector<'Item, 'Length>.UnsafeCreate \nUnsafeCreate \nVector<'Item, 'Length>.Zip \nZip \nVector<'Item, 'Length>.get_Zero \nget_Zero \nVector<'Item, 'Length>.( + ) \n( + ) \nVector<'Item, 'Length>.( @@ ) \n( @@ ) \nVector<'Item, 'Length>.( @* ) \n( @* ) \nVector<'Item, 'Length>.( |*| ) \n( |*| ) \nVector<'Item, 'Length>.( / ) \n( / ) \nVector<'Item, 'Length>.op_Explicit \nop_Explicit \nVector<'Item, 'Length>.op_Explicit \nop_Explicit \nVector<'Item, 'Length>.( <*> ) \n( <*> ) \nVector<'Item, 'Length>.( * ) \n( * ) \nVector<'Item, 'Length>.( %* ) \n( %* ) \nVector<'Item, 'Length>.( - ) \n( - ) \nVector<'Item, 'Length>.( ~- ) \n( ~- ) \nVector<'Item, 'Length>.Items \nItems"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#UnsafeGet","title":"Vector<'Item, 'Length>.UnsafeGet","content":"Vector<'Item, 'Length>.UnsafeGet \nUnsafeGet \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#FoldBack","title":"Vector<'Item, 'Length>.FoldBack","content":"Vector<'Item, 'Length>.FoldBack \nFoldBack \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#FromBigInt","title":"Vector<'Item, 'Length>.FromBigInt","content":"Vector<'Item, 'Length>.FromBigInt \nFromBigInt \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#FromInt32","title":"Vector<'Item, 'Length>.FromInt32","content":"Vector<'Item, 'Length>.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#FromInt64","title":"Vector<'Item, 'Length>.FromInt64","content":"Vector<'Item, 'Length>.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#Item","title":"Vector<'Item, 'Length>.Item","content":"Vector<'Item, 'Length>.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#Map","title":"Vector<'Item, 'Length>.Map","content":"Vector<'Item, 'Length>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#Reduce","title":"Vector<'Item, 'Length>.Reduce","content":"Vector<'Item, 'Length>.Reduce \nReduce \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#Return","title":"Vector<'Item, 'Length>.Return","content":"Vector<'Item, 'Length>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#ToSeq","title":"Vector<'Item, 'Length>.ToSeq","content":"Vector<'Item, 'Length>.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#UnsafeCreate","title":"Vector<'Item, 'Length>.UnsafeCreate","content":"Vector<'Item, 'Length>.UnsafeCreate \nUnsafeCreate \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#Zip","title":"Vector<'Item, 'Length>.Zip","content":"Vector<'Item, 'Length>.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#get_Zero","title":"Vector<'Item, 'Length>.get_Zero","content":"Vector<'Item, 'Length>.get_Zero \nget_Zero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#( + )","title":"Vector<'Item, 'Length>.( + )","content":"Vector<'Item, 'Length>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#( @@ )","title":"Vector<'Item, 'Length>.( @@ )","content":"Vector<'Item, 'Length>.( @@ ) \n( @@ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#( @* )","title":"Vector<'Item, 'Length>.( @* )","content":"Vector<'Item, 'Length>.( @* ) \n( @* ) \n\n direct (tensor) product\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#( |*| )","title":"Vector<'Item, 'Length>.( |*| )","content":"Vector<'Item, 'Length>.( |*| ) \n( |*| ) \n\n dot (inner) product\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#( / )","title":"Vector<'Item, 'Length>.( / )","content":"Vector<'Item, 'Length>.( / ) \n( / ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#op_Explicit","title":"Vector<'Item, 'Length>.op_Explicit","content":"Vector<'Item, 'Length>.op_Explicit \nop_Explicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#op_Explicit","title":"Vector<'Item, 'Length>.op_Explicit","content":"Vector<'Item, 'Length>.op_Explicit \nop_Explicit \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#( <*> )","title":"Vector<'Item, 'Length>.( <*> )","content":"Vector<'Item, 'Length>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#( * )","title":"Vector<'Item, 'Length>.( * )","content":"Vector<'Item, 'Length>.( * ) \n( * ) \n\n hadamard (element-wise) product\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#( %* )","title":"Vector<'Item, 'Length>.( %* )","content":"Vector<'Item, 'Length>.( %* ) \n( %* ) \n\n cross product\n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#( - )","title":"Vector<'Item, 'Length>.( - )","content":"Vector<'Item, 'Length>.( - ) \n( - ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#( ~- )","title":"Vector<'Item, 'Length>.( ~- )","content":"Vector<'Item, 'Length>.( ~- ) \n( ~- ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-vector-2.html#Items","title":"Vector<'Item, 'Length>.Items","content":"Vector<'Item, 'Length>.Items \nItems \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer-2.html","title":"Writer<'monoid, 't>","content":"Writer<'monoid, 't> \n Computation type: Computations which produce a stream of data in addition to the computed values.\n <p class='fsdocs-para'></p>   Binding strategy: Combines the outputs of the subcomputations using <code>mappend</code>.\n <p class='fsdocs-para'></p>   Useful for: Logging, or other computations that produce output \"on the side\".  \nWriter<'monoid, 't>.Extract \nExtract \nWriter<'monoid, 't>.Listen \nListen \nWriter<'monoid, 't>.Map \nMap \nWriter<'monoid, 't>.Pass \nPass \nWriter<'monoid, 't>.Return \nReturn \nWriter<'monoid, 't>.Tell \nTell \nWriter<'monoid, 't>.( =>> ) \n( =>> ) \nWriter<'monoid, 't>.( >>= ) \n( >>= ) \nWriter<'monoid, 't>.( <*> ) \n( <*> ) \nWriter<'monoid, 't>.Writer \nWriter"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer-2.html#Extract","title":"Writer<'monoid, 't>.Extract","content":"Writer<'monoid, 't>.Extract \nExtract \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer-2.html#Listen","title":"Writer<'monoid, 't>.Listen","content":"Writer<'monoid, 't>.Listen \nListen \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer-2.html#Map","title":"Writer<'monoid, 't>.Map","content":"Writer<'monoid, 't>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer-2.html#Pass","title":"Writer<'monoid, 't>.Pass","content":"Writer<'monoid, 't>.Pass \nPass \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer-2.html#Return","title":"Writer<'monoid, 't>.Return","content":"Writer<'monoid, 't>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer-2.html#Tell","title":"Writer<'monoid, 't>.Tell","content":"Writer<'monoid, 't>.Tell \nTell \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer-2.html#( =>> )","title":"Writer<'monoid, 't>.( =>> )","content":"Writer<'monoid, 't>.( =>> ) \n( =>> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer-2.html#( >>= )","title":"Writer<'monoid, 't>.( >>= )","content":"Writer<'monoid, 't>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer-2.html#( <*> )","title":"Writer<'monoid, 't>.( <*> )","content":"Writer<'monoid, 't>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writer-2.html#Writer","title":"Writer<'monoid, 't>.Writer","content":"Writer<'monoid, 't>.Writer \nWriter \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html","title":"WriterT<'monad<'t * 'monoid>>","content":"WriterT<'monad<'t * 'monoid>> \n\n Monad Transformer for Writer<'Monoid, 'T>\n \nWriterT<'monad<'t * 'monoid>>.CallCC \nCallCC \nWriterT<'monad<'t * 'monoid>>.Catch \nCatch \nWriterT<'monad<'t * 'monoid>>.Delay \nDelay \nWriterT<'monad<'t * 'monoid>>.Lift \nLift \nWriterT<'monad<'t * 'monoid>>.Lift2 \nLift2 \nWriterT<'monad<'t * 'monoid>>.LiftAsync \nLiftAsync \nWriterT<'monad<'t * 'monoid>>.Listen \nListen \nWriterT<'monad<'t * 'monoid>>.Local \nLocal \nWriterT<'monad<'t * 'monoid>>.Map \nMap \nWriterT<'monad<'t * 'monoid>>.Pass \nPass \nWriterT<'monad<'t * 'monoid>>.Put \nPut \nWriterT<'monad<'t * 'monoid>>.Return \nReturn \nWriterT<'monad<'t * 'monoid>>.Tell \nTell \nWriterT<'monad<'t * 'monoid>>.Throw \nThrow \nWriterT<'monad<'t * 'monoid>>.TryFinally \nTryFinally \nWriterT<'monad<'t * 'monoid>>.TryWith \nTryWith \nWriterT<'monad<'t * 'monoid>>.Using \nUsing \nWriterT<'monad<'t * 'monoid>>.get_Ask \nget_Ask \nWriterT<'monad<'t * 'monoid>>.get_Empty \nget_Empty \nWriterT<'monad<'t * 'monoid>>.get_Get \nget_Get \nWriterT<'monad<'t * 'monoid>>.( >>= ) \n( >>= ) \nWriterT<'monad<'t * 'monoid>>.( <|> ) \n( <|> ) \nWriterT<'monad<'t * 'monoid>>.( <*> ) \n( <*> ) \nWriterT<'monad<'t * 'monoid>>.WriterT \nWriterT"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#CallCC","title":"WriterT<'monad<'t * 'monoid>>.CallCC","content":"WriterT<'monad<'t * 'monoid>>.CallCC \nCallCC \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#Catch","title":"WriterT<'monad<'t * 'monoid>>.Catch","content":"WriterT<'monad<'t * 'monoid>>.Catch \nCatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#Delay","title":"WriterT<'monad<'t * 'monoid>>.Delay","content":"WriterT<'monad<'t * 'monoid>>.Delay \nDelay \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#Lift","title":"WriterT<'monad<'t * 'monoid>>.Lift","content":"WriterT<'monad<'t * 'monoid>>.Lift \nLift \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#Lift2","title":"WriterT<'monad<'t * 'monoid>>.Lift2","content":"WriterT<'monad<'t * 'monoid>>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#LiftAsync","title":"WriterT<'monad<'t * 'monoid>>.LiftAsync","content":"WriterT<'monad<'t * 'monoid>>.LiftAsync \nLiftAsync \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#Listen","title":"WriterT<'monad<'t * 'monoid>>.Listen","content":"WriterT<'monad<'t * 'monoid>>.Listen \nListen \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#Local","title":"WriterT<'monad<'t * 'monoid>>.Local","content":"WriterT<'monad<'t * 'monoid>>.Local \nLocal \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#Map","title":"WriterT<'monad<'t * 'monoid>>.Map","content":"WriterT<'monad<'t * 'monoid>>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#Pass","title":"WriterT<'monad<'t * 'monoid>>.Pass","content":"WriterT<'monad<'t * 'monoid>>.Pass \nPass \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#Put","title":"WriterT<'monad<'t * 'monoid>>.Put","content":"WriterT<'monad<'t * 'monoid>>.Put \nPut \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#Return","title":"WriterT<'monad<'t * 'monoid>>.Return","content":"WriterT<'monad<'t * 'monoid>>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#Tell","title":"WriterT<'monad<'t * 'monoid>>.Tell","content":"WriterT<'monad<'t * 'monoid>>.Tell \nTell \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#Throw","title":"WriterT<'monad<'t * 'monoid>>.Throw","content":"WriterT<'monad<'t * 'monoid>>.Throw \nThrow \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#TryFinally","title":"WriterT<'monad<'t * 'monoid>>.TryFinally","content":"WriterT<'monad<'t * 'monoid>>.TryFinally \nTryFinally \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#TryWith","title":"WriterT<'monad<'t * 'monoid>>.TryWith","content":"WriterT<'monad<'t * 'monoid>>.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#Using","title":"WriterT<'monad<'t * 'monoid>>.Using","content":"WriterT<'monad<'t * 'monoid>>.Using \nUsing \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#get_Ask","title":"WriterT<'monad<'t * 'monoid>>.get_Ask","content":"WriterT<'monad<'t * 'monoid>>.get_Ask \nget_Ask \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#get_Empty","title":"WriterT<'monad<'t * 'monoid>>.get_Empty","content":"WriterT<'monad<'t * 'monoid>>.get_Empty \nget_Empty \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#get_Get","title":"WriterT<'monad<'t * 'monoid>>.get_Get","content":"WriterT<'monad<'t * 'monoid>>.get_Get \nget_Get \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#( >>= )","title":"WriterT<'monad<'t * 'monoid>>.( >>= )","content":"WriterT<'monad<'t * 'monoid>>.( >>= ) \n( >>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#( <|> )","title":"WriterT<'monad<'t * 'monoid>>.( <|> )","content":"WriterT<'monad<'t * 'monoid>>.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#( <*> )","title":"WriterT<'monad<'t * 'monoid>>.( <*> )","content":"WriterT<'monad<'t * 'monoid>>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-writert-1.html#WriterT","title":"WriterT<'monad<'t * 'monoid>>.WriterT","content":"WriterT<'monad<'t * 'monoid>>.WriterT \nWriterT \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html","title":"ZipList<'s>","content":"ZipList<'s> \n\n A sequence with an Applicative functor based on zipping.\n \nZipList<'s>.Item \nItem \nZipList<'s>.IsLeftZero \nIsLeftZero \nZipList<'s>.Lift2 \nLift2 \nZipList<'s>.Map \nMap \nZipList<'s>.Return \nReturn \nZipList<'s>.ToSeq \nToSeq \nZipList<'s>.Traverse \nTraverse \nZipList<'s>.Zip \nZip \nZipList<'s>.get_Empty \nget_Empty \nZipList<'s>.get_Zero \nget_Zero \nZipList<'s>.( + ) \n( + ) \nZipList<'s>.( <|> ) \n( <|> ) \nZipList<'s>.( <*> ) \n( <*> ) \nZipList<'s>.ZipList \nZipList"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#Item","title":"ZipList<'s>.Item","content":"ZipList<'s>.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#IsLeftZero","title":"ZipList<'s>.IsLeftZero","content":"ZipList<'s>.IsLeftZero \nIsLeftZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#Lift2","title":"ZipList<'s>.Lift2","content":"ZipList<'s>.Lift2 \nLift2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#Map","title":"ZipList<'s>.Map","content":"ZipList<'s>.Map \nMap \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#Return","title":"ZipList<'s>.Return","content":"ZipList<'s>.Return \nReturn \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#ToSeq","title":"ZipList<'s>.ToSeq","content":"ZipList<'s>.ToSeq \nToSeq \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#Traverse","title":"ZipList<'s>.Traverse","content":"ZipList<'s>.Traverse \nTraverse \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#Zip","title":"ZipList<'s>.Zip","content":"ZipList<'s>.Zip \nZip \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#get_Empty","title":"ZipList<'s>.get_Empty","content":"ZipList<'s>.get_Empty \nget_Empty \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#get_Zero","title":"ZipList<'s>.get_Zero","content":"ZipList<'s>.get_Zero \nget_Zero \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#( + )","title":"ZipList<'s>.( + )","content":"ZipList<'s>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#( <|> )","title":"ZipList<'s>.( <|> )","content":"ZipList<'s>.( <|> ) \n( <|> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#( <*> )","title":"ZipList<'s>.( <*> )","content":"ZipList<'s>.( <*> ) \n( <*> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-ziplist-1.html#ZipList","title":"ZipList<'s>.ZipList","content":"ZipList<'s>.ZipList \nZipList \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nelist-1.html","title":"nelist<'t>","content":"nelist<'t> \n\n A type alias for NonEmptyList<'t>\n \nnelist<'t>.tail \ntail \nnelist<'t>.head \nhead \nnelist<'t>.Length \nLength \nnelist<'t>.Item \nItem \nnelist<'t>.GetSlice \nGetSlice"},{"uri":"/FSharpPlusreference/fsharpplus-data-nelist-1.html#tail","title":"nelist<'t>.tail","content":"nelist<'t>.tail \ntail \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nelist-1.html#head","title":"nelist<'t>.head","content":"nelist<'t>.head \nhead \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nelist-1.html#Length","title":"nelist<'t>.Length","content":"nelist<'t>.Length \nLength \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nelist-1.html#Item","title":"nelist<'t>.Item","content":"nelist<'t>.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nelist-1.html#GetSlice","title":"nelist<'t>.GetSlice","content":"nelist<'t>.GetSlice \nGetSlice \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-nemap-2.html","title":"nemap<'Key, 'Value>","content":"nemap<'Key, 'Value> \n\n A type alias for NonEmptyMap<'Key,'Value>\n \nnemap<'Key, 'Value>.Item \nItem"},{"uri":"/FSharpPlusreference/fsharpplus-data-nemap-2.html#Item","title":"nemap<'Key, 'Value>.Item","content":"nemap<'Key, 'Value>.Item \nItem \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-neseq-1.html","title":"neseq<'t>","content":"neseq<'t> \n\n A type alias for NonEmptySeq<'t>\n \nneseq<'t>.First \nFirst"},{"uri":"/FSharpPlusreference/fsharpplus-data-neseq-1.html#First","title":"neseq<'t>.First","content":"neseq<'t>.First \nFirst \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-neset-1.html","title":"neset<'t>","content":"neset<'t> \n\n A type alias for NonEmptySet<'t>\n \nneset<'t>.MinimumElement \nMinimumElement \nneset<'t>.MaximumElement \nMaximumElement \nneset<'t>.Count \nCount"},{"uri":"/FSharpPlusreference/fsharpplus-data-neset-1.html#MinimumElement","title":"neset<'t>.MinimumElement","content":"neset<'t>.MinimumElement \nMinimumElement \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-neset-1.html#MaximumElement","title":"neset<'t>.MaximumElement","content":"neset<'t>.MaximumElement \nMaximumElement \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-neset-1.html#Count","title":"neset<'t>.Count","content":"neset<'t>.Count \nCount \n"},{"uri":"/FSharpPlusreference/fsharpplus-data-parray-1.html","title":"parray<'t>","content":"parray<'t> \n\n A type alias for ParallelArray<'T>\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-biginteger.html","title":"BigInteger","content":"BigInteger \n \nBigInteger.trySqrtRem \ntrySqrtRem"},{"uri":"/FSharpPlusreference/fsharpplus-internals-biginteger.html#trySqrtRem","title":"BigInteger.trySqrtRem","content":"BigInteger.trySqrtRem \ntrySqrtRem \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-constraints.html","title":"Constraints","content":"Constraints \n \nConstraints.whenNestedTuple \nwhenNestedTuple"},{"uri":"/FSharpPlusreference/fsharpplus-internals-constraints.html#whenNestedTuple","title":"Constraints.whenNestedTuple","content":"Constraints.whenNestedTuple \nwhenNestedTuple \n\n Constrain 't to be a nested tuple of <'t1,'t2,'t3,'t4,'t5,'t6,'t7,'tr>\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-decimal.html","title":"Decimal","content":"Decimal \n \nDecimal.trySqrt \ntrySqrt"},{"uri":"/FSharpPlusreference/fsharpplus-internals-decimal.html#trySqrt","title":"Decimal.trySqrt","content":"Decimal.trySqrt \ntrySqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-errors.html","title":"Errors","content":"Errors \n \nErrors.exnDivByZero \nexnDivByZero \nErrors.exnNoDivision \nexnNoDivision \nErrors.exnSqrtOfNegative \nexnSqrtOfNegative \nErrors.exnNoSqrt \nexnNoSqrt \nErrors.exnNoSubtraction \nexnNoSubtraction \nErrors.exnUnreachable \nexnUnreachable"},{"uri":"/FSharpPlusreference/fsharpplus-internals-errors.html#exnDivByZero","title":"Errors.exnDivByZero","content":"Errors.exnDivByZero \nexnDivByZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-errors.html#exnNoDivision","title":"Errors.exnNoDivision","content":"Errors.exnNoDivision \nexnNoDivision \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-errors.html#exnSqrtOfNegative","title":"Errors.exnSqrtOfNegative","content":"Errors.exnSqrtOfNegative \nexnSqrtOfNegative \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-errors.html#exnNoSqrt","title":"Errors.exnNoSqrt","content":"Errors.exnNoSqrt \nexnNoSqrt \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-errors.html#exnNoSubtraction","title":"Errors.exnNoSubtraction","content":"Errors.exnNoSubtraction \nexnNoSubtraction \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-errors.html#exnUnreachable","title":"Errors.exnUnreachable","content":"Errors.exnUnreachable \nexnUnreachable \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-findsliceindex.html","title":"FindSliceIndex","content":"FindSliceIndex \n \nFindSliceIndex.seqImpl \nseqImpl \nFindSliceIndex.listImpl \nlistImpl \nFindSliceIndex.arrayImpl \narrayImpl"},{"uri":"/FSharpPlusreference/fsharpplus-internals-findsliceindex.html#seqImpl","title":"FindSliceIndex.seqImpl","content":"FindSliceIndex.seqImpl \nseqImpl \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-findsliceindex.html#listImpl","title":"FindSliceIndex.listImpl","content":"FindSliceIndex.listImpl \nlistImpl \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-findsliceindex.html#arrayImpl","title":"FindSliceIndex.arrayImpl","content":"FindSliceIndex.arrayImpl \narrayImpl \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-id.html","title":"Id","content":"Id \n \nId.run \nrun \nId.map \nmap \nId.create \ncreate"},{"uri":"/FSharpPlusreference/fsharpplus-internals-id.html#run","title":"Id.run","content":"Id.run \nrun \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-id.html#map","title":"Id.map","content":"Id.map \nmap \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-id.html#create","title":"Id.create","content":"Id.create \ncreate \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-rational.html","title":"Rational","content":"Rational \n \nRational.numerator \nnumerator \nRational.denominator \ndenominator"},{"uri":"/FSharpPlusreference/fsharpplus-internals-rational.html#numerator","title":"Rational.numerator","content":"Rational.numerator \nnumerator \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-rational.html#denominator","title":"Rational.denominator","content":"Rational.denominator \ndenominator \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html","title":"BitConverter","content":"BitConverter \n \nBitConverter.GetBytes \nGetBytes \nBitConverter.GetBytes \nGetBytes \nBitConverter.GetBytes \nGetBytes \nBitConverter.GetBytes \nGetBytes \nBitConverter.GetBytes \nGetBytes \nBitConverter.GetBytes \nGetBytes \nBitConverter.GetBytes \nGetBytes \nBitConverter.GetBytes \nGetBytes \nBitConverter.GetBytes \nGetBytes \nBitConverter.GetBytes \nGetBytes \nBitConverter.ToChar \nToChar \nBitConverter.ToDouble \nToDouble \nBitConverter.ToInt16 \nToInt16 \nBitConverter.ToInt32 \nToInt32 \nBitConverter.ToInt64 \nToInt64 \nBitConverter.ToSingle \nToSingle \nBitConverter.ToString \nToString \nBitConverter.ToString \nToString \nBitConverter.ToString \nToString \nBitConverter.ToUInt16 \nToUInt16 \nBitConverter.ToUInt32 \nToUInt32 \nBitConverter.ToUInt64 \nToUInt64"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#GetBytes","title":"BitConverter.GetBytes","content":"BitConverter.GetBytes \nGetBytes \n\n Converts a double into an array of bytes with length\n eight.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#GetBytes","title":"BitConverter.GetBytes","content":"BitConverter.GetBytes \nGetBytes \n\n Converts a float into an array of bytes with length\n four.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#GetBytes","title":"BitConverter.GetBytes","content":"BitConverter.GetBytes \nGetBytes \n\n Converts an unsigned long into an array of bytes with\n length eight.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#GetBytes","title":"BitConverter.GetBytes","content":"BitConverter.GetBytes \nGetBytes \n\n Converts an uint into an array of bytes with\n length four.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#GetBytes","title":"BitConverter.GetBytes","content":"BitConverter.GetBytes \nGetBytes \n\n Converts an ushort into an array of bytes with\n length two.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#GetBytes","title":"BitConverter.GetBytes","content":"BitConverter.GetBytes \nGetBytes \n\n Converts a long into an array of bytes with length\n eight.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#GetBytes","title":"BitConverter.GetBytes","content":"BitConverter.GetBytes \nGetBytes \n\n Converts an int into an array of bytes with length\n four.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#GetBytes","title":"BitConverter.GetBytes","content":"BitConverter.GetBytes \nGetBytes \n\n Converts a short into an array of bytes with length\n two.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#GetBytes","title":"BitConverter.GetBytes","content":"BitConverter.GetBytes \nGetBytes \n\n Converts a char into an array of bytes with length two.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#GetBytes","title":"BitConverter.GetBytes","content":"BitConverter.GetBytes \nGetBytes \n\n Converts a byte into an array of bytes with length one.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#ToChar","title":"BitConverter.ToChar","content":"BitConverter.ToChar \nToChar \n\n Converts an array of bytes into a char.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#ToDouble","title":"BitConverter.ToDouble","content":"BitConverter.ToDouble \nToDouble \n\n Converts an array of bytes into a double.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#ToInt16","title":"BitConverter.ToInt16","content":"BitConverter.ToInt16 \nToInt16 \n\n Converts an array of bytes into a short.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#ToInt32","title":"BitConverter.ToInt32","content":"BitConverter.ToInt32 \nToInt32 \n\n Converts an array of bytes into an int.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#ToInt64","title":"BitConverter.ToInt64","content":"BitConverter.ToInt64 \nToInt64 \n\n Converts an array of bytes into a long.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#ToSingle","title":"BitConverter.ToSingle","content":"BitConverter.ToSingle \nToSingle \n\n Converts an array of bytes into a float.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#ToString","title":"BitConverter.ToString","content":"BitConverter.ToString \nToString \n\n Converts an array of bytes into a String.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#ToString","title":"BitConverter.ToString","content":"BitConverter.ToString \nToString \n\n Converts an array of bytes into a String.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#ToString","title":"BitConverter.ToString","content":"BitConverter.ToString \nToString \n\n Converts an array of bytes into a String.\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#ToUInt16","title":"BitConverter.ToUInt16","content":"BitConverter.ToUInt16 \nToUInt16 \n\n Converts an array of bytes into an ushort.\n\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#ToUInt32","title":"BitConverter.ToUInt32","content":"BitConverter.ToUInt32 \nToUInt32 \n\n Converts an array of bytes into an uint.\n\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-bitconverter.html#ToUInt64","title":"BitConverter.ToUInt64","content":"BitConverter.ToUInt64 \nToUInt64 \n\n Converts an array of bytes into an unsigned long.\n\n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-default1.html","title":"Default1","content":"Default1 \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-default2.html","title":"Default2","content":"Default2 \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-default3.html","title":"Default3","content":"Default3 \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-default4.html","title":"Default4","content":"Default4 \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-default5.html","title":"Default5","content":"Default5 \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-default6.html","title":"Default6","content":"Default6 \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-dmstruct.html","title":"DmStruct","content":"DmStruct \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-either-2.html","title":"Either<'t, 'u>","content":"Either<'t, 'u> \n \nEither<'t, 'u>.Left \nLeft \nEither<'t, 'u>.Right \nRight"},{"uri":"/FSharpPlusreference/fsharpplus-internals-either-2.html#Left","title":"Either<'t, 'u>.Left","content":"Either<'t, 'u>.Left \nLeft \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-either-2.html#Right","title":"Either<'t, 'u>.Right","content":"Either<'t, 'u>.Right \nRight \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-id-1.html","title":"Id<'t>","content":"Id<'t> \n \nId<'t>.( .ctor ) \n( .ctor ) \nId<'t>.getValue \ngetValue"},{"uri":"/FSharpPlusreference/fsharpplus-internals-id-1.html#( .ctor )","title":"Id<'t>.( .ctor )","content":"Id<'t>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-id-1.html#getValue","title":"Id<'t>.getValue","content":"Id<'t>.getValue \ngetValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-id0.html","title":"Id0","content":"Id0 \n \nId0.( .ctor ) \n( .ctor ) \nId0.getValue \ngetValue"},{"uri":"/FSharpPlusreference/fsharpplus-internals-id0.html#( .ctor )","title":"Id0.( .ctor )","content":"Id0.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-id0.html#getValue","title":"Id0.getValue","content":"Id0.getValue \ngetValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-set2-1.html","title":"Set2<'T>","content":"Set2<'T> \n \nSet2<'T>.( .ctor ) \n( .ctor )"},{"uri":"/FSharpPlusreference/fsharpplus-internals-set2-1.html#( .ctor )","title":"Set2<'T>.( .ctor )","content":"Set2<'T>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-_dual-1.html","title":"_Dual<'T>","content":"_Dual<'T> \n \n_Dual<'T>.( .ctor ) \n( .ctor ) \n_Dual<'T>.get_Zero \nget_Zero \n_Dual<'T>.( + ) \n( + ) \n_Dual<'T>.Value \nValue"},{"uri":"/FSharpPlusreference/fsharpplus-internals-_dual-1.html#( .ctor )","title":"_Dual<'T>.( .ctor )","content":"_Dual<'T>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-_dual-1.html#get_Zero","title":"_Dual<'T>.get_Zero","content":"_Dual<'T>.get_Zero \nget_Zero \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-_dual-1.html#( + )","title":"_Dual<'T>.( + )","content":"_Dual<'T>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-_dual-1.html#Value","title":"_Dual<'T>.Value","content":"_Dual<'T>.Value \nValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-_endo-1.html","title":"_Endo<'T>","content":"_Endo<'T> \n \n_Endo<'T>.( .ctor ) \n( .ctor ) \n_Endo<'T>.get_Zero \nget_Zero \n_Endo<'T>.( + ) \n( + ) \n_Endo<'T>.Value \nValue"},{"uri":"/FSharpPlusreference/fsharpplus-internals-_endo-1.html#( .ctor )","title":"_Endo<'T>.( .ctor )","content":"_Endo<'T>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-_endo-1.html#get_Zero","title":"_Endo<'T>.get_Zero","content":"_Endo<'T>.get_Zero \nget_Zero \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-_endo-1.html#( + )","title":"_Endo<'T>.( + )","content":"_Endo<'T>.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-internals-_endo-1.html#Value","title":"_Endo<'T>.Value","content":"_Endo<'T>.Value \nValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html","title":"Applicative","content":"Applicative \nMath Operators ready to use over Applicative Functors. \nApplicative.( ~-. ) \n( ~-. ) \nApplicative.( .+ ) \n( .+ ) \nApplicative.( +. ) \n( +. ) \nApplicative.( .+. ) \n( .+. ) \nApplicative.( .- ) \n( .- ) \nApplicative.( -. ) \n( -. ) \nApplicative.( .-. ) \n( .-. ) \nApplicative.( .* ) \n( .* ) \nApplicative.( *. ) \n( *. ) \nApplicative.( .*. ) \n( .*. ) \nApplicative.( .% ) \n( .% ) \nApplicative.( %. ) \n( %. ) \nApplicative.( .%. ) \n( .%. ) \nApplicative.( ./ ) \n( ./ ) \nApplicative.( /. ) \n( /. ) \nApplicative.( ./. ) \n( ./. ) \nApplicative.( .= ) \n( .= ) \nApplicative.( =. ) \n( =. ) \nApplicative.( .=. ) \n( .=. ) \nApplicative.( .> ) \n( .> ) \nApplicative.( >. ) \n( >. ) \nApplicative.( .>. ) \n( .>. ) \nApplicative.( .< ) \n( .< ) \nApplicative.( <. ) \n( <. ) \nApplicative.( .<. ) \n( .<. ) \nApplicative.( .|| ) \n( .|| ) \nApplicative.( ||. ) \n( ||. ) \nApplicative.( .||. ) \n( .||. ) \nApplicative.( .&& ) \n( .&& ) \nApplicative.( &&. ) \n( &&. ) \nApplicative.( .&&. ) \n( .&&. ) \nApplicative.( .<= ) \n( .<= ) \nApplicative.( <=. ) \n( <=. ) \nApplicative.( .<=. ) \n( .<=. ) \nApplicative.( .>= ) \n( .>= ) \nApplicative.( >=. ) \n( >=. ) \nApplicative.( .>=. ) \n( .>=. )"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( ~-. )","title":"Applicative.( ~-. )","content":"Applicative.( ~-. ) \n( ~-. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .+ )","title":"Applicative.( .+ )","content":"Applicative.( .+ ) \n( .+ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( +. )","title":"Applicative.( +. )","content":"Applicative.( +. ) \n( +. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .+. )","title":"Applicative.( .+. )","content":"Applicative.( .+. ) \n( .+. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .- )","title":"Applicative.( .- )","content":"Applicative.( .- ) \n( .- ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( -. )","title":"Applicative.( -. )","content":"Applicative.( -. ) \n( -. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .-. )","title":"Applicative.( .-. )","content":"Applicative.( .-. ) \n( .-. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .* )","title":"Applicative.( .* )","content":"Applicative.( .* ) \n( .* ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( *. )","title":"Applicative.( *. )","content":"Applicative.( *. ) \n( *. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .*. )","title":"Applicative.( .*. )","content":"Applicative.( .*. ) \n( .*. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .% )","title":"Applicative.( .% )","content":"Applicative.( .% ) \n( .% ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( %. )","title":"Applicative.( %. )","content":"Applicative.( %. ) \n( %. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .%. )","title":"Applicative.( .%. )","content":"Applicative.( .%. ) \n( .%. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( ./ )","title":"Applicative.( ./ )","content":"Applicative.( ./ ) \n( ./ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( /. )","title":"Applicative.( /. )","content":"Applicative.( /. ) \n( /. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( ./. )","title":"Applicative.( ./. )","content":"Applicative.( ./. ) \n( ./. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .= )","title":"Applicative.( .= )","content":"Applicative.( .= ) \n( .= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( =. )","title":"Applicative.( =. )","content":"Applicative.( =. ) \n( =. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .=. )","title":"Applicative.( .=. )","content":"Applicative.( .=. ) \n( .=. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .> )","title":"Applicative.( .> )","content":"Applicative.( .> ) \n( .> ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( >. )","title":"Applicative.( >. )","content":"Applicative.( >. ) \n( >. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .>. )","title":"Applicative.( .>. )","content":"Applicative.( .>. ) \n( .>. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .< )","title":"Applicative.( .< )","content":"Applicative.( .< ) \n( .< ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( <. )","title":"Applicative.( <. )","content":"Applicative.( <. ) \n( <. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .<. )","title":"Applicative.( .<. )","content":"Applicative.( .<. ) \n( .<. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .|| )","title":"Applicative.( .|| )","content":"Applicative.( .|| ) \n( .|| ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( ||. )","title":"Applicative.( ||. )","content":"Applicative.( ||. ) \n( ||. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .||. )","title":"Applicative.( .||. )","content":"Applicative.( .||. ) \n( .||. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .&& )","title":"Applicative.( .&& )","content":"Applicative.( .&& ) \n( .&& ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( &&. )","title":"Applicative.( &&. )","content":"Applicative.( &&. ) \n( &&. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .&&. )","title":"Applicative.( .&&. )","content":"Applicative.( .&&. ) \n( .&&. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .<= )","title":"Applicative.( .<= )","content":"Applicative.( .<= ) \n( .<= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( <=. )","title":"Applicative.( <=. )","content":"Applicative.( <=. ) \n( <=. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .<=. )","title":"Applicative.( .<=. )","content":"Applicative.( .<=. ) \n( .<=. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .>= )","title":"Applicative.( .>= )","content":"Applicative.( .>= ) \n( .>= ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( >=. )","title":"Applicative.( >=. )","content":"Applicative.( >=. ) \n( >=. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-applicative.html#( .>=. )","title":"Applicative.( .>=. )","content":"Applicative.( .>=. ) \n( .>=. ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic.html","title":"Generic","content":"Generic \n\n Generic numbers, functions and operators.\n By opening this module some common operators become restricted, like (+) to 'T->'T->'T\n  \nGeneric.NumericLiteralG \nNumericLiteralG \nGeneric.fromIntegral \nfromIntegral \nGeneric.( + ) \n( + ) \nGeneric.( - ) \n( - ) \nGeneric.( * ) \n( * ) \nGeneric.( / ) \n( / ) \nGeneric.div \ndiv \nGeneric.divE \ndivE \nGeneric.rem \nrem \nGeneric.remE \nremE \nGeneric.divRemE \ndivRemE \nGeneric.gcd \ngcd"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic.html#fromIntegral","title":"Generic.fromIntegral","content":"Generic.fromIntegral \nfromIntegral \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic.html#( + )","title":"Generic.( + )","content":"Generic.( + ) \n( + ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic.html#( - )","title":"Generic.( - )","content":"Generic.( - ) \n( - ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic.html#( * )","title":"Generic.( * )","content":"Generic.( * ) \n( * ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic.html#( / )","title":"Generic.( / )","content":"Generic.( / ) \n( / ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic.html#div","title":"Generic.div","content":"Generic.div \ndiv \n\n Integer division. Same as (/) for Integral types.\n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic.html#divE","title":"Generic.divE","content":"Generic.divE \ndivE \n\n Euclidean integer division, following the mathematical convention where the mod is always positive.\n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic.html#rem","title":"Generic.rem","content":"Generic.rem \nrem \n\n Remainder of Integer division. Same as (%).\n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic.html#remE","title":"Generic.remE","content":"Generic.remE \nremE \n\n Euclidean remainder of integer division, following the mathematical convention where the mod is always positive.\n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic.html#divRemE","title":"Generic.divRemE","content":"Generic.divRemE \ndivRemE \n\n Euclidean division-remainder, following the mathematical convention where the mod is always positive.\n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic.html#gcd","title":"Generic.gcd","content":"Generic.gcd \ngcd \n\n Greatest Common Divisor.\n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic-numericliteralg.html","title":"NumericLiteralG","content":"NumericLiteralG \n \nNumericLiteralG.FromZero \nFromZero \nNumericLiteralG.FromOne \nFromOne \nNumericLiteralG.FromInt32 \nFromInt32 \nNumericLiteralG.FromInt64 \nFromInt64 \nNumericLiteralG.FromString \nFromString"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic-numericliteralg.html#FromZero","title":"NumericLiteralG.FromZero","content":"NumericLiteralG.FromZero \nFromZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic-numericliteralg.html#FromOne","title":"NumericLiteralG.FromOne","content":"NumericLiteralG.FromOne \nFromOne \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic-numericliteralg.html#FromInt32","title":"NumericLiteralG.FromInt32","content":"NumericLiteralG.FromInt32 \nFromInt32 \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic-numericliteralg.html#FromInt64","title":"NumericLiteralG.FromInt64","content":"NumericLiteralG.FromInt64 \nFromInt64 \n"},{"uri":"/FSharpPlusreference/fsharpplus-math-generic-numericliteralg.html#FromString","title":"NumericLiteralG.FromString","content":"NumericLiteralG.FromString \nFromString \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-natop.html","title":"NatOp","content":"NatOp \n \nNatOp.( +^ ) \n( +^ ) \nNatOp.( -^ ) \n( -^ ) \nNatOp.( *^ ) \n( *^ ) \nNatOp.( /^ ) \n( /^ ) \nNatOp.( %^ ) \n( %^ ) \nNatOp.( <^ ) \n( <^ ) \nNatOp.( >^ ) \n( >^ ) \nNatOp.( <=^ ) \n( <=^ ) \nNatOp.( >=^ ) \n( >=^ )"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-natop.html#( +^ )","title":"NatOp.( +^ )","content":"NatOp.( +^ ) \n( +^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-natop.html#( -^ )","title":"NatOp.( -^ )","content":"NatOp.( -^ ) \n( -^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-natop.html#( *^ )","title":"NatOp.( *^ )","content":"NatOp.( *^ ) \n( *^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-natop.html#( /^ )","title":"NatOp.( /^ )","content":"NatOp.( /^ ) \n( /^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-natop.html#( %^ )","title":"NatOp.( %^ )","content":"NatOp.( %^ ) \n( %^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-natop.html#( <^ )","title":"NatOp.( <^ )","content":"NatOp.( <^ ) \n( <^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-natop.html#( >^ )","title":"NatOp.( >^ )","content":"NatOp.( >^ ) \n( >^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-natop.html#( <=^ )","title":"NatOp.( <=^ )","content":"NatOp.( <=^ ) \n( <=^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-natop.html#( >=^ )","title":"NatOp.( >=^ )","content":"NatOp.( >=^ ) \n( >=^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typebool.html","title":"TypeBool","content":"TypeBool \n \nTypeBool.Not \nNot \nTypeBool.IfThenElse \nIfThenElse \nTypeBool.Assert \nAssert"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typebool.html#Not","title":"TypeBool.Not","content":"TypeBool.Not \nNot \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typebool.html#IfThenElse","title":"TypeBool.IfThenElse","content":"TypeBool.IfThenElse \nIfThenElse \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typebool.html#Assert","title":"TypeBool.Assert","content":"TypeBool.Assert \nAssert \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typeleveloperators.html","title":"TypeLevelOperators","content":"TypeLevelOperators \n \nTypeLevelOperators.Singleton \nSingleton \nTypeLevelOperators.RuntimeValue \nRuntimeValue \nTypeLevelOperators.TryWith \nTryWith \nTypeLevelOperators.TryWithCont \nTryWithCont"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typeleveloperators.html#Singleton","title":"TypeLevelOperators.Singleton","content":"TypeLevelOperators.Singleton \nSingleton \n\n Gets a singleton value of given type-level literal.\n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typeleveloperators.html#RuntimeValue","title":"TypeLevelOperators.RuntimeValue","content":"TypeLevelOperators.RuntimeValue \nRuntimeValue \n\n Gets a value-level counterpart of given type-level literal.\n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typeleveloperators.html#TryWith","title":"TypeLevelOperators.TryWith","content":"TypeLevelOperators.TryWith \nTryWith \n\n If `x` is a type-level error, returns `onError`. Otherwise, returns `x`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typeleveloperators.html#TryWithCont","title":"TypeLevelOperators.TryWithCont","content":"TypeLevelOperators.TryWithCont \nTryWithCont \n\n If `x` is a type-level error, returns `onError`. Otherwise, returns `f x`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typenat.html","title":"TypeNat","content":"TypeNat \n \nTypeNat.IsZero \nIsZero \nTypeNat.Pred \nPred \nTypeNat.Match \nMatch"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typenat.html#IsZero","title":"TypeNat.IsZero","content":"TypeNat.IsZero \nIsZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typenat.html#Pred","title":"TypeNat.Pred","content":"TypeNat.Pred \nPred \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typenat.html#Match","title":"TypeNat.Match","content":"TypeNat.Match \nMatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typeop.html","title":"TypeOp","content":"TypeOp \n \nTypeOp.( =^ ) \n( =^ )"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typeop.html#( =^ )","title":"TypeOp.( =^ )","content":"TypeOp.( =^ ) \n( =^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-aggregatedbooltypeerror-1.html","title":"AggregatedBoolTypeError<'a>","content":"AggregatedBoolTypeError<'a> \n \nAggregatedBoolTypeError<'a>.( .ctor ) \n( .ctor )"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-aggregatedbooltypeerror-1.html#( .ctor )","title":"AggregatedBoolTypeError<'a>.( .ctor )","content":"AggregatedBoolTypeError<'a>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-aggregatednattypeerror-1.html","title":"AggregatedNatTypeError<'a>","content":"AggregatedNatTypeError<'a> \n \nAggregatedNatTypeError<'a>.( .ctor ) \n( .ctor )"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-aggregatednattypeerror-1.html#( .ctor )","title":"AggregatedNatTypeError<'a>.( .ctor )","content":"AggregatedNatTypeError<'a>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-booltypeerror-1.html","title":"BoolTypeError<'a>","content":"BoolTypeError<'a> \n \nBoolTypeError<'a>.( .ctor ) \n( .ctor ) \nBoolTypeError<'a>.IfThenElse \nIfThenElse \nBoolTypeError<'a>.Not \nNot \nBoolTypeError<'a>.( &&^ ) \n( &&^ ) \nBoolTypeError<'a>.( ||^ ) \n( ||^ ) \nBoolTypeError<'a>.( =^ ) \n( =^ )"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-booltypeerror-1.html#( .ctor )","title":"BoolTypeError<'a>.( .ctor )","content":"BoolTypeError<'a>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-booltypeerror-1.html#IfThenElse","title":"BoolTypeError<'a>.IfThenElse","content":"BoolTypeError<'a>.IfThenElse \nIfThenElse \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-booltypeerror-1.html#Not","title":"BoolTypeError<'a>.Not","content":"BoolTypeError<'a>.Not \nNot \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-booltypeerror-1.html#( &&^ )","title":"BoolTypeError<'a>.( &&^ )","content":"BoolTypeError<'a>.( &&^ ) \n( &&^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-booltypeerror-1.html#( ||^ )","title":"BoolTypeError<'a>.( ||^ )","content":"BoolTypeError<'a>.( ||^ ) \n( ||^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-booltypeerror-1.html#( =^ )","title":"BoolTypeError<'a>.( =^ )","content":"BoolTypeError<'a>.( =^ ) \n( =^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-booltypeerrorlifter.html","title":"BoolTypeErrorLifter","content":"BoolTypeErrorLifter \n \nBoolTypeErrorLifter.Lift \nLift"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-booltypeerrorlifter.html#Lift","title":"BoolTypeErrorLifter.Lift","content":"BoolTypeErrorLifter.Lift \nLift \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-dividedbyzeroerror.html","title":"DividedByZeroError","content":"DividedByZeroError \n \nDividedByZeroError.( .ctor ) \n( .ctor )"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-dividedbyzeroerror.html#( .ctor )","title":"DividedByZeroError.( .ctor )","content":"DividedByZeroError.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-false.html","title":"False","content":"False \n \nFalse.IfThenElse \nIfThenElse \nFalse.Not \nNot \nFalse.RuntimeValue \nRuntimeValue \nFalse.Singleton \nSingleton \nFalse.( &&^ ) \n( &&^ ) \nFalse.( ||^ ) \n( ||^ ) \nFalse.( ||^ ) \n( ||^ ) \nFalse.( ||^ ) \n( ||^ ) \nFalse.( =^ ) \n( =^ ) \nFalse.False \nFalse"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-false.html#IfThenElse","title":"False.IfThenElse","content":"False.IfThenElse \nIfThenElse \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-false.html#Not","title":"False.Not","content":"False.Not \nNot \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-false.html#RuntimeValue","title":"False.RuntimeValue","content":"False.RuntimeValue \nRuntimeValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-false.html#Singleton","title":"False.Singleton","content":"False.Singleton \nSingleton \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-false.html#( &&^ )","title":"False.( &&^ )","content":"False.( &&^ ) \n( &&^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-false.html#( ||^ )","title":"False.( ||^ )","content":"False.( ||^ ) \n( ||^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-false.html#( ||^ )","title":"False.( ||^ )","content":"False.( ||^ ) \n( ||^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-false.html#( ||^ )","title":"False.( ||^ )","content":"False.( ||^ ) \n( ||^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-false.html#( =^ )","title":"False.( =^ )","content":"False.( =^ ) \n( =^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-false.html#False","title":"False.False","content":"False.False \nFalse \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-ierrorliftable-1.html","title":"IErrorLiftable<'a>","content":"IErrorLiftable<'a> \n\n Marker interface for getting the corresponding type-level error class of a type-level literal.\n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-itypebool.html","title":"ITypeBool","content":"ITypeBool \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-itypeliteral.html","title":"ITypeLiteral","content":"ITypeLiteral \n\n Marker interface for type-level literals.\n\n #### Members\n\n     static member inline Singleton (defaultValue: T) = (* unique value-level representation of T *)\n\n `Singleton` will be called with `Unchecked.defaultof<T>` so it should not use/deconstruct its value.\n\n     static member inline RuntimeValue (t: T) = (* value-level counterpart of T *)\n\n `RuntimeValue` should return value-level representation of `T`. i.e. If `T` is type-level boolean `True`, then\n the method should return value-level boolean `true`.\n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-itypenat.html","title":"ITypeNat","content":"ITypeNat \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html","title":"NatTypeError<'a>","content":"NatTypeError<'a> \n \nNatTypeError<'a>.( .ctor ) \n( .ctor ) \nNatTypeError<'a>.Match \nMatch \nNatTypeError<'a>.MultImpl \nMultImpl \nNatTypeError<'a>.Pred \nPred \nNatTypeError<'a>.Succ \nSucc \nNatTypeError<'a>.( /^ ) \n( /^ ) \nNatTypeError<'a>.( =^ ) \n( =^ ) \nNatTypeError<'a>.( <=^ ) \n( <=^ ) \nNatTypeError<'a>.( <^ ) \n( <^ ) \nNatTypeError<'a>.( -^ ) \n( -^ ) \nNatTypeError<'a>.( %^ ) \n( %^ ) \nNatTypeError<'a>.( +^ ) \n( +^ ) \nNatTypeError<'a>.IsZero \nIsZero"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html#( .ctor )","title":"NatTypeError<'a>.( .ctor )","content":"NatTypeError<'a>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html#Match","title":"NatTypeError<'a>.Match","content":"NatTypeError<'a>.Match \nMatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html#MultImpl","title":"NatTypeError<'a>.MultImpl","content":"NatTypeError<'a>.MultImpl \nMultImpl \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html#Pred","title":"NatTypeError<'a>.Pred","content":"NatTypeError<'a>.Pred \nPred \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html#Succ","title":"NatTypeError<'a>.Succ","content":"NatTypeError<'a>.Succ \nSucc \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html#( /^ )","title":"NatTypeError<'a>.( /^ )","content":"NatTypeError<'a>.( /^ ) \n( /^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html#( =^ )","title":"NatTypeError<'a>.( =^ )","content":"NatTypeError<'a>.( =^ ) \n( =^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html#( <=^ )","title":"NatTypeError<'a>.( <=^ )","content":"NatTypeError<'a>.( <=^ ) \n( <=^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html#( <^ )","title":"NatTypeError<'a>.( <^ )","content":"NatTypeError<'a>.( <^ ) \n( <^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html#( -^ )","title":"NatTypeError<'a>.( -^ )","content":"NatTypeError<'a>.( -^ ) \n( -^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html#( %^ )","title":"NatTypeError<'a>.( %^ )","content":"NatTypeError<'a>.( %^ ) \n( %^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html#( +^ )","title":"NatTypeError<'a>.( +^ )","content":"NatTypeError<'a>.( +^ ) \n( +^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerror-1.html#IsZero","title":"NatTypeError<'a>.IsZero","content":"NatTypeError<'a>.IsZero \nIsZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerrorlifter.html","title":"NatTypeErrorLifter","content":"NatTypeErrorLifter \n \nNatTypeErrorLifter.Lift \nLift"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-nattypeerrorlifter.html#Lift","title":"NatTypeErrorLifter.Lift","content":"NatTypeErrorLifter.Lift \nLift \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-overflowerror.html","title":"OverflowError","content":"OverflowError \n \nOverflowError.( .ctor ) \n( .ctor )"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-overflowerror.html#( .ctor )","title":"OverflowError.( .ctor )","content":"OverflowError.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html","title":"S<'n>","content":"S<'n> \n \nS<'n>.Match \nMatch \nS<'n>.MultImpl \nMultImpl \nS<'n>.Pred \nPred \nS<'n>.RuntimeValue \nRuntimeValue \nS<'n>.Singleton \nSingleton \nS<'n>.Succ \nSucc \nS<'n>.( /^ ) \n( /^ ) \nS<'n>.( =^ ) \n( =^ ) \nS<'n>.( <=^ ) \n( <=^ ) \nS<'n>.( <^ ) \n( <^ ) \nS<'n>.( -^ ) \n( -^ ) \nS<'n>.( %^ ) \n( %^ ) \nS<'n>.( +^ ) \n( +^ ) \nS<'n>.IsZero \nIsZero \nS<'n>.S \nS"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#Match","title":"S<'n>.Match","content":"S<'n>.Match \nMatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#MultImpl","title":"S<'n>.MultImpl","content":"S<'n>.MultImpl \nMultImpl \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#Pred","title":"S<'n>.Pred","content":"S<'n>.Pred \nPred \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#RuntimeValue","title":"S<'n>.RuntimeValue","content":"S<'n>.RuntimeValue \nRuntimeValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#Singleton","title":"S<'n>.Singleton","content":"S<'n>.Singleton \nSingleton \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#Succ","title":"S<'n>.Succ","content":"S<'n>.Succ \nSucc \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#( /^ )","title":"S<'n>.( /^ )","content":"S<'n>.( /^ ) \n( /^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#( =^ )","title":"S<'n>.( =^ )","content":"S<'n>.( =^ ) \n( =^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#( <=^ )","title":"S<'n>.( <=^ )","content":"S<'n>.( <=^ ) \n( <=^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#( <^ )","title":"S<'n>.( <^ )","content":"S<'n>.( <^ ) \n( <^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#( -^ )","title":"S<'n>.( -^ )","content":"S<'n>.( -^ ) \n( -^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#( %^ )","title":"S<'n>.( %^ )","content":"S<'n>.( %^ ) \n( %^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#( +^ )","title":"S<'n>.( +^ )","content":"S<'n>.( +^ ) \n( +^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#IsZero","title":"S<'n>.IsZero","content":"S<'n>.IsZero \nIsZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-s-1.html#S","title":"S<'n>.S","content":"S<'n>.S \nS \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-true.html","title":"True","content":"True \n \nTrue.IfThenElse \nIfThenElse \nTrue.Not \nNot \nTrue.RuntimeValue \nRuntimeValue \nTrue.Singleton \nSingleton \nTrue.( &&^ ) \n( &&^ ) \nTrue.( &&^ ) \n( &&^ ) \nTrue.( &&^ ) \n( &&^ ) \nTrue.( ||^ ) \n( ||^ ) \nTrue.( =^ ) \n( =^ ) \nTrue.True \nTrue"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-true.html#IfThenElse","title":"True.IfThenElse","content":"True.IfThenElse \nIfThenElse \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-true.html#Not","title":"True.Not","content":"True.Not \nNot \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-true.html#RuntimeValue","title":"True.RuntimeValue","content":"True.RuntimeValue \nRuntimeValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-true.html#Singleton","title":"True.Singleton","content":"True.Singleton \nSingleton \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-true.html#( &&^ )","title":"True.( &&^ )","content":"True.( &&^ ) \n( &&^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-true.html#( &&^ )","title":"True.( &&^ )","content":"True.( &&^ ) \n( &&^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-true.html#( &&^ )","title":"True.( &&^ )","content":"True.( &&^ ) \n( &&^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-true.html#( ||^ )","title":"True.( ||^ )","content":"True.( ||^ ) \n( ||^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-true.html#( =^ )","title":"True.( =^ )","content":"True.( =^ ) \n( =^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-true.html#True","title":"True.True","content":"True.True \nTrue \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-trywithimpl.html","title":"TryWithImpl","content":"TryWithImpl \n \nTryWithImpl.Invoke \nInvoke \nTryWithImpl.TryWith \nTryWith \nTryWithImpl.TryWith \nTryWith"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-trywithimpl.html#Invoke","title":"TryWithImpl.Invoke","content":"TryWithImpl.Invoke \nInvoke \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-trywithimpl.html#TryWith","title":"TryWithImpl.TryWith","content":"TryWithImpl.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-trywithimpl.html#TryWith","title":"TryWithImpl.TryWith","content":"TryWithImpl.TryWith \nTryWith \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typeerror-1.html","title":"TypeError<'a>","content":"TypeError<'a> \n\n Base class for type-level errors.\n\n For every type (kind) of type-level literals, the corresponding type-error class should be created\n and it should provide all the methods the literals have to offer.\n\n TypeError should not implement `ITypeLiteral` but should provide `Singleton` and `RuntimeValue`.\n This is important for making type-level error-handling work correctly.\n\n TypeError should implement the same `IErrorLiftable<TypeErrorLifter>` as the corresponding kind do.\n For example, if `TypeFoo` implements `IErrorLiftable<FooTypeErrorLifter>`, `FooTypeError` should also implement it.\n So, the implementation will look like below:\n\n     type FooTypeError<'a> =\n       inherit TypeError<'a>\n       interface IErrorLiftable<FooTypeErrorLifter>\n       (* members related to Foo *)\n\n     and AggregatedFooTypeError<'a>() =\n       inherit FooTypeError<AggregatedFooTypeError<'a>>()\n    \n     and FooTypeErrorLifter =\n       static member inline Lift (_: 'Error) = Unchecked.defaultof<AggregatedFooTypeError<'Error>>\n\n     type ITypeFoo =\n       inherit ITypeLiteral\n       inherit IErrorLiftable<FooTypeErrorLifter>\n \nTypeError<'a>.( .ctor ) \n( .ctor ) \nTypeError<'a>.RuntimeValue \nRuntimeValue \nTypeError<'a>.Singleton \nSingleton"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typeerror-1.html#( .ctor )","title":"TypeError<'a>.( .ctor )","content":"TypeError<'a>.( .ctor ) \n( .ctor ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typeerror-1.html#RuntimeValue","title":"TypeError<'a>.RuntimeValue","content":"TypeError<'a>.RuntimeValue \nRuntimeValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-typeerror-1.html#Singleton","title":"TypeError<'a>.Singleton","content":"TypeError<'a>.Singleton \nSingleton \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html","title":"Z","content":"Z \n \nZ.Match \nMatch \nZ.MultImpl \nMultImpl \nZ.Pred \nPred \nZ.RuntimeValue \nRuntimeValue \nZ.Singleton \nSingleton \nZ.Succ \nSucc \nZ.( /^ ) \n( /^ ) \nZ.( /^ ) \n( /^ ) \nZ.( =^ ) \n( =^ ) \nZ.( <=^ ) \n( <=^ ) \nZ.( <^ ) \n( <^ ) \nZ.( -^ ) \n( -^ ) \nZ.( %^ ) \n( %^ ) \nZ.( %^ ) \n( %^ ) \nZ.( +^ ) \n( +^ ) \nZ.IsZero \nIsZero \nZ.Z \nZ"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#Match","title":"Z.Match","content":"Z.Match \nMatch \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#MultImpl","title":"Z.MultImpl","content":"Z.MultImpl \nMultImpl \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#Pred","title":"Z.Pred","content":"Z.Pred \nPred \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#RuntimeValue","title":"Z.RuntimeValue","content":"Z.RuntimeValue \nRuntimeValue \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#Singleton","title":"Z.Singleton","content":"Z.Singleton \nSingleton \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#Succ","title":"Z.Succ","content":"Z.Succ \nSucc \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#( /^ )","title":"Z.( /^ )","content":"Z.( /^ ) \n( /^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#( /^ )","title":"Z.( /^ )","content":"Z.( /^ ) \n( /^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#( =^ )","title":"Z.( =^ )","content":"Z.( =^ ) \n( =^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#( <=^ )","title":"Z.( <=^ )","content":"Z.( <=^ ) \n( <=^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#( <^ )","title":"Z.( <^ )","content":"Z.( <^ ) \n( <^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#( -^ )","title":"Z.( -^ )","content":"Z.( -^ ) \n( -^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#( %^ )","title":"Z.( %^ )","content":"Z.( %^ ) \n( %^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#( %^ )","title":"Z.( %^ )","content":"Z.( %^ ) \n( %^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#( +^ )","title":"Z.( +^ )","content":"Z.( +^ ) \n( +^ ) \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#IsZero","title":"Z.IsZero","content":"Z.IsZero \nIsZero \n"},{"uri":"/FSharpPlusreference/fsharpplus-typelevel-z.html#Z","title":"Z.Z","content":"Z.Z \nZ \n"},{"uri":"/FSharpPlustype-any.html","title":"Any\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nAny\n===\n\nThis is a wrapper type for booleans, with a specific set of monoidal operations.\nThe contained bools would become true only if one of (any) operands are true.\n\nRelated Types\n------------\n\n - [All](type-all.html): Similar wrapper, but using the 'all' criteria.\n\n\nAbstractions\n------------\n\n -  [Semigroup](abstraction-semigroup.html)\n -  [Monoid](abstraction-monoid.html)\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\nlet res1 = Any true ++ zero ++ Any false\n// val res1 : Any = Any true\n\nlet even x = x % 2 = 0\n\nlet res2 = [2;4;6;7;8] |> map (even >> Any) |> sum\n// val res2 : Any = Any true"},{"uri":"/FSharpPlustype-nonempty.html","title":"NonEmptyList<'T>\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nNonEmptyList<'T>\n================\n\nA type-safe list that contains at least one element.\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\n(**\n### Constructing NonEmptyList\n*)\n// you can construct a NonEmptyList by using ofSeq\nlet list123' = NonEmptyList.create 1 [ 2; 3 ]\n// or more idiomatically\nlet list123 = nel { 1 ; 2; 3 } // will work in F# version 4.7\n\nlet listOne = NonEmptyList.singleton 1\n// cons\nlet list2 = NonEmptyList.cons 100 list123\n// append two NonEmptyLists\nlet list3 = plus list2 (NonEmptyList.singleton 200)\n// this can be written as (since list2 is a NonEmptyList):\nlet list3' = plus list2 (result 200)\n// in order to get back to a regular list you can then use toList:\nlet list4 = toList list3'\n\n(**\n### Operations on NonEmptyList\n*)\n\nlet lengthOfList3 = length list3\n\nlet headOf3 = list3.Head\nlet headOf3' = head list3\n\nlet tailOf3 = list3.Tail"},{"uri":"/FSharpPlusabstraction-semigroup.html","title":"Semigroup\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nSemigroup\n=========\nIn mathematics, a semigroup is an algebraic structure consisting of a set together with an associative binary operation. A semigroup generalizes a monoid in that there might not exist an identity element. It also (originally) generalized a group (a monoid with all inverses) to a type where every element did not have to have an inverse, thus the name semigroup.\n___\nMinimal complete definition\n---------------------------\n * ``(+)``/``(++)``\n*)\n(**\n    static member (+) (x:'Semigroup, y:'Semigroup) :'Semigroup\n*)\n(**\nRules\n-----\n*)\n(**\n    (x + y) + z = x + (y + z)\n*)\n(**\nRelated Abstractions\n--------------------\n - [Monoid](abstraction-monoid.html): A monoid is a Semigroup with an additional ``zero`` operation\n \n - Alt/MonadPlus: Applicatives/Monads that are also Semigroups/Monoids\n\nConcrete implementations\n------------------------\nFrom .Net/F#\n \n -  ``list<'T>``\n -  ``option<'T>``\n -  ``array<'T>``\n -  ``string``\n -  ``StringBuilder``\n -  ``unit``\n -  ``Set<'T>``\n -  ``Map<'T,'U>``\n -  ``TimeSpan`` \n -  ``Tuple<*>``\n -  ``'T1* ... *'Tn``\n -  ``Task<'T>``\n -  ``'T->'Semigroup``\n -  ``Async<'T>``\n -  ``Expr<'T>``\n -  ``Lazy<'T>``\n -  ``Dictionary<'T,'U>``\n -  ``IDictionary<'T,'U>``\n -  ``IReadOnlyDictionary<'T,'U>``\n -  ``ResizeArray<'T>``\n -  ``seq<'T>``\n -  ``IEnumerator<'T>``\n \nFrom F#+\n \n -  [``NonEmptyList<'S>``](type-nonempty.html)\n -  [``NonEmptySet<'T>``](type-nonempty-set.html)\n -  [``NonEmptyMap<'Key, 'T>``](type-nonempty-map.html)\n -  [``ZipList<'S>``](type-ziplist.html)\n -  [``Dual<'T>``](type-dual.html)\n -  [``Endo<'T>``](type-endo.html)\n -  [``All``](type-all.html)\n -  [``Any``](type-any.html)\n -  [``Const<'C,'T>``](type-const.html)\n -  [``First<'T>``](type-first.html)\n -  [``Last<'T>``](type-last.html)\n -  [``DList<'T>``](type-dlist.html)\n -  [``Vector<'T,'Dimension>``](type-vector.html)\n -  [``Matrix<'T,'Rows,'Columns>``](type-matrix.html)\n \n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n*)"},{"uri":"/FSharpPlustype-nonempty-map.html","title":"NonEmptyMap<'Key, 'Value>\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nNonEmptyMap<'Key, 'Value>\n================\n\nA type-safe map that contains at least one element.\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\n(**\n### Constructing NonEmptyMap\n*)\n// you can construct a NonEmptyMap by using NonEmptyMap.Create\nlet map1 = NonEmptyMap.Create((\"a\", 1), (\"b\", 2))\n\nlet map2 = NonEmptyMap.singleton \"c\" 3\n\n// in order to get back to a regular map you can then use NonEmptyMap.toMap:\nlet map1' = NonEmptyMap.toMap map1\n\n\n(**\n### Operations on NonEmptyMap\n*)\n\nlet map3 = map1 |> NonEmptyMap.add \"d\" 4\n\nlet map4 = NonEmptyMap.union map2 map3\n\nmap4 |> NonEmptyMap.tryFind \"c\" |> printfn \"%A\"\n\n"},{"uri":"/FSharpPlusabstraction-misc.html","title":"Other abstractions\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nOther abstractions\n==================\n\nHere are some other abstractions, not present in the diagram.\n\n(see the examples)\n\n Examples\n--------\n*)\n\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen System\nopen FSharpPlus\nopen FSharpPlus.Data\n\n\n// Indexable\n\nlet namesWithNdx = mapi (fun k v -> \"(\" + string k + \")\" + v ) (Map.ofSeq ['f',\"Fred\";'p',\"Paul\"])\nlet namesAction = iteri (printfn \"(%A)%s\") (Map.ofSeq ['f',\"Fred\";'p',\"Paul\"])\nlet res119 = foldi (fun s i t -> t * s - i) 10 [3;4]\nlet res113 = foldi (fun s i t -> t * s - i) 2 [|3;4;5|]\nlet resSomeId20 = traversei (fun k t -> Some (10 + t)) (Tuple 10)\n\n\n// ZipFunctor\n\nlet (x, y) = zip (async { return 1 }) (async { return '2' }) |> Async.RunSynchronously\n\n\n// Collection\n\nlet a = skip 3 [1..10]\nlet b = chunkBy fst [1, \"a\"; 1, \"b\"; 2, \"c\"; 1, \"d\"]\n\n\n// Reducibles\n\nlet c = nel {1; 2; 3}\nlet d = reduce (+) c\n\nlet resultList = nel {Error \"1\"; Error \"2\"; Ok 3; Ok 4; Error \"5\"}\nlet firstOk = choice resultList\n\n\n// Invariant Functor\ntype StringConverter<'t> = StringConverter of (string -> 't) * ('t -> string) with\n    static member Invmap (StringConverter (f, g), f',g') = StringConverter (f' << f, g << g')\n\nlet ofString (StringConverter (f, _)) = f\nlet toString (StringConverter (_, f)) = f\n\nlet floatConv = StringConverter (float<string>, string<float>)\n\nlet floatParsed  = ofString floatConv \"1.8\"\nlet floatEncoded = toString floatConv 1.5\n\nlet intConv = invmap int<float> float<int> floatConv\n\nlet oneParsed  = ofString intConv \"1\"\nlet tenEncoded = toString intConv 10"},{"uri":"/FSharpPluslicense.html","title":"license","content":"Apache License\nVersion 2.0, January 2004\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and\ndistribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright\nowner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities\nthat control, are controlled by, or are under common control with that entity.\nFor the purposes of this definition, \"control\" means (i) the power, direct or\nindirect, to cause the direction or management of such entity, whether by\ncontract or otherwise, or (ii) ownership of fifty percent (50%) or more of the\noutstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising\npermissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including\nbut not limited to software source code, documentation source, and configuration\nfiles.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or\ntranslation of a Source form, including but not limited to compiled object code,\ngenerated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made\navailable under the License, as indicated by a copyright notice that is included\nin or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that\nis based on (or derived from) the Work and for which the editorial revisions,\nannotations, elaborations, or other modifications represent, as a whole, an\noriginal work of authorship. For the purposes of this License, Derivative Works\nshall not include works that remain separable from, or merely link (or bind by\nname) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version\nof the Work and any modifications or additions to that Work or Derivative Works\nthereof, that is intentionally submitted to Licensor for inclusion in the Work\nby the copyright owner or by an individual or Legal Entity authorized to submit\non behalf of the copyright owner. For the purposes of this definition,\n\"submitted\" means any form of electronic, verbal, or written communication sent\nto the Licensor or its representatives, including but not limited to\ncommunication on electronic mailing lists, source code control systems, and\nissue tracking systems that are managed by, or on behalf of, the Licensor for\nthe purpose of discussing and improving the Work, but excluding communication\nthat is conspicuously marked or otherwise designated in writing by the copyright\nowner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf\nof whom a Contribution has been received by Licensor and subsequently\nincorporated within the Work.\n\n2. Grant of Copyright License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable copyright license to reproduce, prepare Derivative Works of,\npublicly display, publicly perform, sublicense, and distribute the Work and such\nDerivative Works in Source or Object form.\n\n3. Grant of Patent License.\n\nSubject to the terms and conditions of this License, each Contributor hereby\ngrants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free,\nirrevocable (except as stated in this section) patent license to make, have\nmade, use, offer to sell, sell, import, and otherwise transfer the Work, where\nsuch license applies only to those patent claims licensable by such Contributor\nthat are necessarily infringed by their Contribution(s) alone or by combination\nof their Contribution(s) with the Work to which such Contribution(s) was\nsubmitted. If You institute patent litigation against any entity (including a\ncross-claim or counterclaim in a lawsuit) alleging that the Work or a\nContribution incorporated within the Work constitutes direct or contributory\npatent infringement, then any patent licenses granted to You under this License\nfor that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution.\n\nYou may reproduce and distribute copies of the Work or Derivative Works thereof\nin any medium, with or without modifications, and in Source or Object form,\nprovided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of\nthis License; and\nYou must cause any modified files to carry prominent notices stating that You\nchanged the files; and\nYou must retain, in the Source form of any Derivative Works that You distribute,\nall copyright, patent, trademark, and attribution notices from the Source form\nof the Work, excluding those notices that do not pertain to any part of the\nDerivative Works; and\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any\nDerivative Works that You distribute must include a readable copy of the\nattribution notices contained within such NOTICE file, excluding those notices\nthat do not pertain to any part of the Derivative Works, in at least one of the\nfollowing places: within a NOTICE text file distributed as part of the\nDerivative Works; within the Source form or documentation, if provided along\nwith the Derivative Works; or, within a display generated by the Derivative\nWorks, if and wherever such third-party notices normally appear. The contents of\nthe NOTICE file are for informational purposes only and do not modify the\nLicense. You may add Your own attribution notices within Derivative Works that\nYou distribute, alongside or as an addendum to the NOTICE text from the Work,\nprovided that such additional attribution notices cannot be construed as\nmodifying the License.\nYou may add Your own copyright statement to Your modifications and may provide\nadditional or different license terms and conditions for use, reproduction, or\ndistribution of Your modifications, or for any such Derivative Works as a whole,\nprovided Your use, reproduction, and distribution of the Work otherwise complies\nwith the conditions stated in this License.\n\n5. Submission of Contributions.\n\nUnless You explicitly state otherwise, any Contribution intentionally submitted\nfor inclusion in the Work by You to the Licensor shall be under the terms and\nconditions of this License, without any additional terms or conditions.\nNotwithstanding the above, nothing herein shall supersede or modify the terms of\nany separate license agreement you may have executed with Licensor regarding\nsuch Contributions.\n\n6. Trademarks.\n\nThis License does not grant permission to use the trade names, trademarks,\nservice marks, or product names of the Licensor, except as required for\nreasonable and customary use in describing the origin of the Work and\nreproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty.\n\nUnless required by applicable law or agreed to in writing, Licensor provides the\nWork (and each Contributor provides its Contributions) on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied,\nincluding, without limitation, any warranties or conditions of TITLE,\nNON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are\nsolely responsible for determining the appropriateness of using or\nredistributing the Work and assume any risks associated with Your exercise of\npermissions under this License.\n\n8. Limitation of Liability.\n\nIn no event and under no legal theory, whether in tort (including negligence),\ncontract, or otherwise, unless required by applicable law (such as deliberate\nand grossly negligent acts) or agreed to in writing, shall any Contributor be\nliable to You for damages, including any direct, indirect, special, incidental,\nor consequential damages of any character arising as a result of this License or\nout of the use or inability to use the Work (including but not limited to\ndamages for loss of goodwill, work stoppage, computer failure or malfunction, or\nany and all other commercial damages or losses), even if such Contributor has\nbeen advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability.\n\nWhile redistributing the Work or Derivative Works thereof, You may choose to\noffer, and charge a fee for, acceptance of support, warranty, indemnity, or\nother liability obligations and/or rights consistent with this License. However,\nin accepting such obligations, You may act only on Your own behalf and on Your\nsole responsibility, not on behalf of any other Contributor, and only if You\nagree to indemnify, defend, and hold each Contributor harmless for any liability\nincurred by, or claims asserted against, such Contributor by reason of your\naccepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS\n\nAPPENDIX: How to apply the Apache License to your work\n\nTo apply the Apache License to your work, attach the following boilerplate\nnotice, with the fields enclosed by brackets \"[]\" replaced with your own\nidentifying information. (Don't include the brackets!) The text should be\nenclosed in the appropriate comment syntax for the file format. We also\nrecommend that a file or class name and description of purpose be included on\nthe same \"printed page\" as the copyright notice for easier identification within\nthird-party archives.\n\n   Copyright 2012-2018 Gustavo P. Leon (and contributors https://github.com/gusty/FSharpPlus/graphs/contributors)\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"},{"uri":"/FSharpPlustype-state.html","title":"State<'S,'T>\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nState<'S,'T>\n============\n\nThe intention when using the State monad is to keep state in a purely functional manner without violating referential transparency of functions.\n\nRelated Types\n------------\n\n - [Reader](type-reader.html): Similar but read-only.\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n(**\nFrom [Haskell Wiki on State monad](https://wiki.haskell.org/State_Monad)\n*)\n\nlet rec playGame =\n    function\n    | []-> monad {\n            let! (_, score) = State.get\n            return score\n        }\n    | x::xs-> monad {\n            let! (on, score) = State.get\n            match x with\n            | 'a' when on -> do! State.put (on, score + 1)\n            | 'b' when on -> do! State.put (on, score - 1)\n            | 'c'         -> do! State.put (not on, score)\n            | _           -> do! State.put (on, score)\n            return! playGame xs\n        }\n\nlet startState = (false, 0)\nlet moves = toList \"abcaaacbbcabbab\"\nState.eval (playGame moves) startState"},{"uri":"/FSharpPlustype-cont.html","title":"Cont<'R,'U>\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nCont<'R,'U>\n===========\n\nThe `Cont` computation type represents computations which can be interrupted and resumed.\n\nSome of these examples are adapted from [fabriceleal/Continuations on github](https://github.com/fabriceleal/Continuations/blob/master/Continuations/Program.fs).\n\nYou can read up on the style on [Markh Needhams blog post](http://www.markhneedham.com/blog/2009/06/22/f-continuation-passing-style/) or \nby reading [Real World Functional Programming by Tomas Petricek with Jon Skeet](https://livebook.manning.com/book/real-world-functional-programming/chapter-10/156) on the subject.\n\nExamples\n--------\n\nIn order to get an idea about this style, let us contrast some of the examples and how they look in when using F#+ or without help.  \n\n*)\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\nlet assertEqual expected actual = \n    if expected <> actual then\n        failwithf \"%A != %A\" expected actual\n\n(**\n### Example g k\n\n*)\n\nlet g n = n + 1\nlet f n = g(n + 1) + 1\n\nmodule ``EXAMPLE g k`` =\n    let g_k n k = k(n + 1)\n    let f_k n k = g_k(n + 1) (fun x -> k(x + 1))\n    f_k 1 (fun x -> assertEqual (f 1) x)\n    f_k 2 (fun x -> assertEqual (f 2) x)\n\n\nmodule ``EXAMPLE g k in FSharpPlus`` =\n    let g_k n : Cont<int,int> = monad { return (n + 1) }\n    let f_k n = monad {\n      let! x= g_k(n + 1) \n      return x+1\n    }\n    let n = 2\n    let res = Cont.run (f_k n) id\n    assertEqual (f n) res\n\n\n(**\n### Example Max\n\n*)\n\n// Max, regular-style\nlet max x y =\n    if x > y then x else y\n\nmodule ``EXAMPLE max`` =\n\n    // Max, CPS-style\n    let max_k x y k =\n        if x > y then k x else k y\n    // More CPS Styl-ish\n    max_k 1 2 (fun x -> assertEqual (max 1 2) x)\n\nmodule ``EXAMPLE max in FSharpPlus`` =\n    let max_k x y = monad {\n        return if x > y then x else y }\n    let x = Cont.run (max_k 1 2) id\n    assertEqual (max 1 2) x\n\n(**\n### Example factorial\n\n*)\n\n\n// regular factorial\nlet rec factorial n =\n    if n = 0 then\n        1\n    else\n        n * factorial (n-1)\n\nmodule ``EXAMPLE factorial`` =\n    let rec factorial_k n k =\n        if n = 0 then\n            k 1\n        else\n            factorial_k (n-1) (fun x -> k(x * n))\n\n    let fact_n = 5\n    factorial_k fact_n (fun x -> assertEqual (factorial fact_n) x)\n\nmodule ``EXAMPLE factorial in FSharpPlus`` =\n    let rec factorial_k n = monad {\n        if n = 0 then\n            return 1\n        else\n            let! x=factorial_k (n-1)\n            return x * n\n      }\n    let fact_n = 5\n    let x = Cont.run (factorial_k fact_n) id\n    assertEqual (factorial fact_n) x\n\n(**\n### Example sum\n\n*)\n\n// sum\nlet rec sum x =\n    if x = 1 then\n        1\n    else\n        sum(x - 1) + x\n\nmodule ``EXAMPLE sum`` =\n\n    let rec sum_k x k =\n        if x = 1 then\n            k 1\n        else\n            sum_k(x - 1) (fun y -> k(x + y))\n\n    let sum_n = 5\n    sum_k sum_n (fun t ->  assertEqual (sum sum_n) t)\nmodule ``EXAMPLE sum in FSharpPlus`` =\n\n    let rec sum_k x = monad {\n        if x = 1 then\n            return 1\n        else\n            let! y=sum_k(x - 1)\n            return x + y\n      }\n\n    let sum_n = 5\n    let t = Cont.run (sum_k sum_n) id\n    assertEqual (sum sum_n) t\n\n(**\n### Example Fibonacci number\n\n*)\n\n// fibo\nlet rec fibo n =\n    if n = 0 then\n        1\n    else if n = 1 then\n        1\n        else\n            fibo (n - 1) + fibo (n - 2)\n\nmodule ``EXAMPLE fibo`` =\n    let rec fibo_k n k =\n        if n = 0 then\n            k 1\n        else if n = 1 then \n            k 1\n            else\n                let k_new1 = (fun x1 -> \n                    let k_new2 = (fun x2 -> k(x1 + x2))\n                    fibo_k (n - 2) k_new2\n                )\n                fibo_k (n - 1) k_new1\n\n    let fibo_n = 9\n    fibo_k fibo_n (fun x -> assertEqual (fibo fibo_n) x)\nmodule ``EXAMPLE fibo in FSharpPlus`` =\n    let rec fibo_k n =\n      monad {\n        if n = 0 then\n            return 1\n        else if n = 1 then \n            return 1\n            else\n                let! x1 = fibo_k (n - 1)\n                let! x2 = fibo_k (n - 2)\n                return x1+x2\n      }\n    let fibo_n = 9\n    let x = Cont.run (fibo_k fibo_n) id\n    assertEqual (fibo fibo_n) x\n\n(**\n### Example nth\n\n*)\n\n\n// nth\nlet rec nth n (ls : 'a list) =\n    if ls.IsEmpty then\n        None\n    else if n = 0 then\n        Some(ls.Head)\n    else\n        nth (n - 1) ls.Tail\n\nmodule ``EXAMPLE nth`` =\n\n    let rec nth_k n (ls : 'a list) k =\n        if ls.IsEmpty then\n            k(None)\n        else if n = 0 then\n            k(Some(ls.Head))\n        else\n            nth_k (n - 1) ls.Tail k\n    let ls, i1, i2 = [1;2;3;4;5;6], 3, 15\n\n    // becomes:\n    nth_k i1 ls (fun x->assertEqual (nth i1 ls) x)\n\n    nth_k i2 ls (fun x->assertEqual (nth i2 ls) x)\n\n\n#nowarn \"0064\"\nmodule ``EXAMPLE nth in FSharpPlus`` =\n\n    let rec nth_k n (ls : 'a list) = monad {\n        if ls.IsEmpty then\n            return (None)\n        else if n = 0 then\n            return (Some(ls.Head))\n        else\n            let! r=nth_k (n - 1) ls.Tail\n            return r\n      }\n    let ls, i1, i2 = [1;2;3;4;5;6], 3, 15\n\n    // becomes:\n    let x = Cont.run (nth_k i1 ls) id\n    assertEqual (nth i1 ls) x\n\n    let x2 = Cont.run (nth_k i2 ls) id\n    assertEqual (nth i2 ls) x2\n\n(**\n### Example count nodes in a tree\n\n*)\n\ntype Tree =\n    | Node of Tree * Tree\n    | Leaf\n// node_count\nlet rec node_count = function\n                    | Node(lt, rt) -> 1 + node_count(lt)  + node_count(rt)\n                    | Leaf -> 0\n\nmodule ``EXAMPLE count_nodes`` =\n    let rec node_count_k tree k = match tree with\n                                    | Node(ltree, rtree) ->\n                                        let new_k1 = (fun ltree_count -> \n                                            let new_k2 = (fun rtree_count -> \n                                                k(1 + ltree_count + rtree_count)\n                                            )\n                                            node_count_k rtree new_k2\n                                        )\n                                        node_count_k ltree new_k1\n                                    | Leaf -> k 0\n\n    let t = Node(Node(Leaf, Leaf), Node(Leaf, Node(Leaf, Node(Leaf, Leaf))))\n    node_count_k t (fun count -> assertEqual (node_count t)  count)\n\nmodule ``EXAMPLE count_nodes in FSharpPlus`` =\n    let rec node_count_k tree = \n                                monad {\n                                    match tree with\n                                    | Node(lt, rt) -> \n                                        let! x_lt=node_count_k(lt)\n                                        let! x_rt=node_count_k(rt)\n                                        return 1 + x_lt + x_rt\n                                    | Leaf -> return 0\n                                }\n    let t = Node(Node(Leaf, Leaf), Node(Leaf, Node(Leaf, Node(Leaf, Leaf))))\n    let count = Cont.run (node_count_k t) id\n    assertEqual (node_count t)  count"},{"uri":"/FSharpPlustype-parallelarray.html","title":"ParallelArray<'T>\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nParallelArray<'T>\n=================\n\nThis type is basically a wrapper over Arrays, which:\n\n - Have a ZipList like applicative implementation.\n - Have parallel processing semantics by default.\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\nlet arr1 = [| 1..100000|]\nlet arr2 = [|10..100000|]\n\nlet arr1_plus_arr2  = (+) <!> parray arr1 <*> parray arr2\n\nopen FSharpPlus.Math.Applicative\n\nlet arr1_plus_arr2' = parray arr1 .+. parray arr2\nlet arrCombined     = 10 *. parray arr1 .+. parray arr2 .- 5\nlet asMonoid        = Infinite \"Hello \" </plus/> parray [|\"City\"; \"World\"; \"Sun\"|]"},{"uri":"/FSharpPlustype-listt.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlusabstraction-comonad.html","title":"Comonad\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nComonad\n=======\n\nComonads are the categorical dual of monads.\n\n___\n\n\n\nMinimal complete definition\n---------------------------\n\n\n * ``extract s``\n\n * ``extend g s`` / ``(=>>) s g`` \n\n*)\n(**\n    static member Extract (s:'Comonad<'T>) : 'T\n    static member (=>>)   (s:'Comonad<'T>, f:'Comonad<'T> -> 'U) : Comonad<'U>\n*)\n(**\n\nOther operations\n----------------\n\n * ``duplicate x``\n*)\n(**\n    static member Duplicate (x : 'Comonad<'T>) : 'Comonad<'Comonad<'T>>\n*)\n(**\n\n\n\nRules\n-----\n*)\n(**\n    extend extract       = id\n    extract << extend f  = f\n    extend f << extend g = extend (f << extend g)\n*)\n(**\n\n\nRelated Abstractions\n--------------------\n\n - [Monad](abstraction-monad.html): Comonads are the categorical dual of monads.\n\n\nConcrete implementations\n------------------------\n\nFrom .Net/F#\n \n -  ``Async<'T>``    \n -  ``Lazy<'T>``     \n -  ``Id<'T>``       \n -  ``('W * 'T)``\n -  ``'Monoid -> 'T``\n \n \nFrom F#+\n\n -  [``Reader<'R,'T>``](type-reader.html)\n -  [``Writer<'Monoid,'T>``](type-writer.html)\n\n \n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n\n\nExamples\n--------\n\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\n// A non-empty list\nlet lst   = {Head = 1; Tail = [2;3;4;5]}\n\n// Get the head\nlet elem1 = extract   lst\n\n// Get ALL tails\nlet tails = duplicate lst\n\n// This should return the original list\nlet lst'  = extend extract lst\n\n\n\nlet ct1 = duplicate [1;2;3;4] // val it : List<List<int>> = [[1; 2; 3; 4]; [2; 3; 4]; [3; 4]; [4]]\nlet ct2 = duplicate (\"a\", 10) // val it : string * (string * int) = (\"a\", (\"a\", 10))\nlet ct3 = duplicate (fun (x:string) -> System.Int32.Parse x)\nlet r80100 = ct3 \"80\" \"100\"\n\nlet ct1' = extend id [1;2;3;4]\nlet ct2' = extend id (\"a\", 10)\nlet ct3' = extend id (fun (x:string) -> System.Int32.Parse x)\n\nlet ct1'' = (=>>) [1;2;3;4] id\nlet ct2'' = (=>>) (\"a\", 10) id\nlet ct3'' = (=>>) (fun (x:string) -> System.Int32.Parse x) id"},{"uri":"/FSharpPlusrelease-notes.html","title":"release-notes","content":"#### 1.1.3  - July 19 2020\n* Add map2/lift2 for all monad transformers\n* Add Tuple2 and Tuple3 extensions\n* Add non-generic <!> operator for Validation, mainly intended to be used for applicative validation in Fable\n\n#### 1.1.1  - May 10 2020\n* Fix: issue with generic intercalate function\n* Fix: traverse for seq of asyncs\n\n#### 1.1.0  - April 14 2020\n* Fix: issue with equality for DLists in Fable\n* Add Nullable module and map and bind overloads for Nullable\n* Add <= and >= Applicative Math operators\n\n#### 1.1.0-RC4  - March 31 2020\n* Fix: issue with Fable consumption of the library\n* Bitraversable abstraction\n* Fix: compatibility issue with 1.0 in a separate branch (from which it will be released)\n* Generic lift2 function made extensible and usable from F#5 preview's applicative CEs\n* Polymorphic itemX and mapItemX function working in Fable\n* More Traverse/Sequence overloads for extensions\n* Add Dictionary/Lazy extensions and some additionals for ResizeArray\n* Convert NonEmptyList builder empty list error in a compile-time error\n* ZipList as Alternative\n* ZipList without Equality\n* Conversion functions for NonEmptyList, replacing Unchecked module from previous RC\n* Fix: zero and empty for DList\n* Fix: defaults for zero function\n* Fix: ofSeq/ofList for IEnumerables\n* Rename LeftZero for Traversable/Alternative, fixed some issues and add some instances\n\n#### 1.1.0-RC3  - March 5 2020\n* Retarget Fable compilation to Extensions, some types from Data and abstractions Comonad, Invariant and Bind\n* Lens new functions: choosed and non\n* Fix: _item (from Lens)\n* Generic choice function made extensible and already working with semigroups\n* More operations on NonEmptyList and nel builder\n* Added missing operations for Computation Expressions to some types\n* Fix: signature for curry, uncurry and State.modify\n* Fix: traverse operation when derived from sequence operation\n* Short-circuit mechanism for Traversable and Alternatives\n* More extension functions: Result.bindError, Choice.bindChoice2Of2 and Array.apply\n* Fix and rename optional function to opt\n* Rename liftA2 to lift2\n* More ZipFunctor instances and better Unzip internals\n\n#### 1.1.0-RC2  - January 25 2020\n* Some tweaks to Free (internals)\n* Add functions gets and modify for stateful computations\n* Better type inference for lift\n* Some functions deprecated in Validation and Extensions\n* Fix: swap type parameteres of Bifunctor and Bifoldable for Choice / Result\n* Default Monoid for bool (xor)\n* Some minor bug fixes\n* Better signatures and xml descriptions\n\n#### 1.1.0-RC1  - January 13 2020\n* More Fable support\n* Free Monad\n* Functor's Coproduct\n* Bifoldable abstraction: http://fsprojects.github.io/FSharpPlus/abstraction-bifoldable.html\n* deprecating `Validation.biFoldBack`\n* Some Choice and Result functions\n* tap function\n* Rename IReadOnlyList.add to trySetItem\n* Improved lift for Monad Transformers\n\n#### 1.1.0-CI00272  - September 14 2019\n* Initial Fable support for Extensions\n* Add generic bind, try/findIndex and try/findSliceIndex functions\n* Traverse and TraverseIndexed for Map<_,_>\n* Lens: fix foldOf and add maximumOf/minimumOf\n\n#### 1.1.0-CI00271  - August 15 2019\n* Add intersect functions for Map/Dictionaries\n* Add polyvariadic memoizationN, curryN/uncurryN functions\n* Add polyvariadic parsing functions (scanf family)\n* Add Dict.containsKey, IReadOnlyDictionary.containsKey\n* More lens for Map and Set\n* Extend String and Task modules\n* Task as ZipFunctor and Applicative\n* Improve performace for union on dictionaries and maps\n* Add unary negation operator for applicative maths\n* Fix: add missing CE members to Monad Transformers\n* Fix: infinite seq of asyncs can now be traversed\n* Fix: generic sum function works with any monoid\n* Fix 'use' for strict builders\n\n#### 1.1.0-CI00252  - October 8 2018\n* Add Invariant Abstraction\n* Some convenient conversion functions between Option and Result\n* OfSeq for IReadOnlyDictionary\n* OfList for all same instances as OfSeq\n* Add some ReadOnly Collections related functions\n\n#### 1.1.0-CI00245  - September 22 2018\n* Fix some type inference problems\n* More Xml docs and type annotations\n\n#### 1.1.0-CI00240  - September 15 2018\n* Lens with less constraints (speed up compile time)\n* More generic Foldable functions\n* More extensions and abstractions with IReadOnlyDictionary\n\n#### 1.1.0-CI00230  - August 30 2018\n* Option as ZipFunctor\n* More Async extensions\n* More clean signatures supported\n* Removed tuple size limitations\n* Add generic functions 'maximum' and 'minimum' for Foldable\n* Fix: generic 'scan' signature\n* Fix: bug in '<|>' for Choice\n* Optimized Foldable/Collection generic functions by adding specific overloads\n\n#### 1.1.0-CI00208  - June 15 2018\n* Async as ZipFunctor\n* More Async extensions\n\n#### 1.1.0-CI00204  - June 5 2018\n* Fix culture neutrality of TryParse functions\n* More integration with ReadOnly Collections\n* More extensions for Map, IDictionary and ReadOnly collections\n* Map and Dictionary as ZipFunctor\n* Result and Choice as Semigroup and Alt\n* Exceptions and AggregateExceptions as Semigroup\n\n#### 1.0.0  - April 27 2018\n* Public 1.0.0 release that includes a better architected API and numerous bug fixes\n\n#### 1.0.0-RC3  - April 13 2018\n* Re-introduce Choice based monad transformers with ChoiceT\n* Generic split function is now bigeneric\n* Bug fix in OptionT execution\n\n#### 1.0.0-RC2  - March 31 2018\n* A hoist function was added to some Monad Transformers\n* Bug Fixes\n\n#### 1.0.0-RC1  - March 26 2018\n* Accumulative Validations\n* DList<'T> implementation changed\n* C# Extension Methods removed\n* Require operators instead of named methods: \n\t* (>>=) instead of Bind\n\t* (=>>) instead of Extend\n\t* (<|>) instead of Append\n* Custom operations:\t\n \t* sortBy renamed to orderBy\n \t* first and nth removed\n \t* top operator added\n* Unify Second with Map\n* Defaults improved\n* Identity<'T> is now in FSharpPlus.Data\n\n#### 1.0.0-CI00148  - February 17 2018\n* More flexibility in Computation Expressions\n* Dictionary extensions\n* Bug fixes\n\n#### 1.0.0-CI00145  - February 6 2018\n* Wrappers compiled as structs\n* New tryItem operation for Indexable types\n* Better default methods\n* Bug fixes\n\n#### 1.0.0-CI00136  - January 28 2018\n* Rename ErrorT to ResultT\n* Removed Haskell Compatibility\n\n#### 1.0.0-CI00134  - January 25 2018\n* IEnumerator functions\n* Applicative Math: new syntax, more operators\n* Function sequenceA renamed to sequence\n* More types: DList, Multiplication monoid\n* Changes in either function (args swapped)\n* Namespaces renamed\n* Lens functions renamed\n* Removed function toString\n\n#### 1.0.0-CI00099  - December 31 2017\n* Some Delayed Monad Transformers\n* Bug fixes\n\n#### 1.0.0-CI00092  - December 26 2017\n* New execution model for Computation Expressions\n* Use F# new Result Type to model failures\n* Functions minValue and maxValue are now generic constants\n* Many String and other extensions\n\n#### 1.0.0-CI00091  - November 30 2017\n* Targeting Netstandard 2.0\n* (0, +) as default monoid for numerics\n* Rename: \n\t* Empty, Append and Concat to MEmpty, MAppend and MConcat\n\t* MZero and MPlus to Empty and Append.\n\t* mempty and mappend to zero and plus\n\t* mconcat and mfold to Seq.sum and sum\n* Generic constants (empty, zero, app, ...)\n* Compose for applicative functors\n* Unify RMap with Map and LMap with Contramap\n\n#### 1.0.0-CI00089  - March 9 2017\n* Functions create, singleton and traverse (Traversable) for NonEmptyList\n* Reader<'R, 'T> and Writer<'Monad<'T * 'Monoid>> as Comonads\n* IDictionary<'Key,'Value> as Functor and Monoid\n* Standard signature for Join\n* Enhancements in Traversable, including bug fixed and more infinite seqs cases\n* Adapt code to be usable (no regressions) and able to be compiled from F# 4.1\n* Extensive documentation, including tutorials and a classepedia (abstractions) diagram (WIP)\n\n#### 1.0.0-CI00078  - January 21 2017\n* Builders support MonadPlus and FX computations\n* Bin path for sample files corrected\n* Added Delay implementation for Cont\n* Added Invokables for builders: TryWith, TryFinally and Using\n* Fix overloads for Task\n* Improve functor's map resolution in presence of interfaces\n* Generalize Unzip to any functor\n\n#### 1.0.0-CI00063  - December 26 2016\n* Initial release using ProjectScaffold"},{"uri":"/FSharpPlusabstraction-bitraversable.html","title":"Bitraversable\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nBitraversable\n=============\n\nBitraversable identifies bifunctorial data structures whose elements can be traversed in order, performing Applicative actions at each element, and collecting a result structure with the same shape.\n\nAs opposed to Traversable data structures, which have one variety of element on which an action can be performed, Bitraversable data structures have two such varieties of elements.\n\n___\n\n\n\nMinimal complete definition\n---------------------------\n\n * ``bitraverse f g x`` | ``bisequence x`` and ``bimap f g x``\n*)\n(**\n    static member Bitraverse (t: 'Bitraversable<'T1,'U1>, f: 'T1->'Functor<'T2>, g: 'U1->'Functor<'U2>) : 'Functor<'Bitraversable<'T2,'U2>>\n    static member Bisequence (t: 'Bitraversable<'Functor<'T>,'Functor<'U>>) : 'Functor<'Bitraversable<'T,'U>>\n*)\n(**\n\n\n\nRules\n-----\n*)\n(**\n    t << bitraverse f g = bitraverse (t << f) (t << g)\n    bitraverse Identity Identity = Identity\n    bitraverse (Compose << map g1 << f1) = Compose << fmap (bitraverse g1 g21) << bitraverse f1 f2\n*)\n(**\n\n\nRelated Abstractions\n--------------------\n\n - [Functor](abstraction-functor.html): A bitraversable is generic on the Bitraversable type parameter and the (Applicative) Functor inner type parameter.\n - [Applicative](abstraction-applicative.html): An applicative is a functor whose ``map`` operation can be splitted in ``return`` and ``(<*>)`` operations. \n - [Bifoldable](abstraction-bifoldable.html) : All bitraversables are bifoldables.\n\n\nConcrete implementations\n------------------------\n\nFrom .Net/F#\n\n-  ``'T * 'U``\n-  ``Result<'T,'U>``\n-  ``Choice<'T,'U>``\n\n\nFrom F#+\n\n -  [``Const<'C,'T>``](type-const.html)\n -  [``Validation<'Error,'T>``](type-validation.html)\n\n\n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n\nExamples\n--------\n*)\n\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\n\n\nlet asyncSquareRoot x =\n    if x < 0 then \n        Error   (async { printfn \"Calc error message\"; return \"Negative Value\"}) \n        else Ok (async { printfn \"Calc sqrt of %A\" x ; return sqrt x})\n\nlet res42 = asyncSquareRoot 1764 |> bisequence |> Async.RunSynchronously"},{"uri":"/FSharpPluslens.html","title":"Lens\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\n(**\nLens\n====\n\nLens is an abstraction over function that allow to read and update parts of immutable data.\n\nThe abstraction name comes from the analogy of focusing on a specific part of the data structure.\n\nAnother analogy could be with pointers, but in this case data is treated as immutable which means that instead of modifying it returns a new copy.\n\nIn this [quick tour](tutorial.html#Lens) you can find some basic examples of operating with Lenses.\n\nTo allow lensing over your record types, lens (as functions) have to be written by hand for each field.\n\nAs a convention, all lens identifiers will start with an underscore `_`.\n\nHere's an example usage of lenses with business objects:\n\n\n*)\nopen System\n// In order to use the Lens module of F#+ we import the following:\nopen FSharpPlus.Lens\n\n// From Mauricio Scheffer: https://gist.github.com/mausch/4260932\ntype Person = {\n    Name: string\n    DateOfBirth: DateTime\n}\nmodule Person=\n    let inline _name f { Name = a; DateOfBirth = b } = f a <&> fun a' -> { Name = a'; DateOfBirth = b }\n type Book = {\n    Title: string\n    Author: Person\n}\nmodule Book =\n    let inline _author f { Author = a; Title = b } = f a <&> fun a' -> { Author = a'; Title = b }\n    let inline _authorName b = _author << Person._name <| b\nlet rayuela =\n    { Book.Title = \"Rayuela\"\n      Author = { Person.Name = \"Julio Cortázar\"\n                 DateOfBirth = DateTime (1914, 8, 26) } }\n// read book author name:\nlet authorName1 = view Book._authorName rayuela\n//  you can also write the read operation as:\nlet authorName2 = rayuela ^. Book._authorName\n\n\n(**\n\nNote: \n\nThe operator `<&>` is not available in F#+ v1.0 but since it's a flipped map, you can use `</flip map/>` instead.\n\nHowever it's recommended to upgrade F#+ since you'll get better compile times with `<&>`.\n\nPrism\n=====\n\nAlso called a Partial Lens, they focus in parts of the data that could be there or not.\n\nSee the following example using the built-in `_Some` prism.\n\n*)\n\ntype Team   = {name: string; victories: int}\nlet inline _name      f {name = a; victories = b} = f a <&> fun a' -> {name = a'; victories = b }\nlet inline _victories f {name = a; victories = b} = f b <&> fun b' -> {name = a ; victories = b'}\n\ntype Player = {team: Team; score: int}\nlet inline _team  f {team = a; score = b} = f a <&> fun a' -> {team = a'; score = b }\nlet inline _score f {team = a; score = b} = f b <&> fun b' -> {team = a ; score = b'}\n\ntype Result = {winner: Player option; started: bool}\nlet inline _winner   f {winner = a; started = b} = f a <&> fun a' -> {winner = a'; started = b }\nlet inline _started  f {winner = a; started = b} = f b <&> fun b' -> {winner = a ; started = b'}\n\ntype Match<'t>  = {players: 't; finished: bool}\nlet inline _players  f {players = a; finished = b} = f a <&> fun a' -> {players = a'; finished = b }\nlet inline _finished f {players = a; finished = b} = f b <&> fun b' -> {players = a ; finished = b'}\n\n// Lens composed with Prism -> Prism\nlet inline _winner_team x = (_players << _winner << _Some << _team) x\n\n// initial state\nlet match0 =\n    {\n        players = \n            {team = {name = \"The A Team\"; victories = 0}; score = 0},\n            {team = {name = \"The B Team\"; victories = 0}; score = 0}\n        finished = false\n    }\n\n\n// Team 1 scores\nlet match1 = over (_players << _1 << _score) ((+) 1) match0\n\n// Team 2 scores\nlet match2 = over (_players << _2 << _score) ((+) 1) match1\n\n// Produce Match<Result> from Match<Player * Player> \n// This is possible with these Lenses since they support polymorphic updates.\nlet matchResult0 = setl _players {winner = None; started = true} match2\n\n// See if there is a winner by using a prism\nlet _noWinner = preview _winner_team matchResult0\n\n// Team 1 scores\nlet match3 = over (_players << _1 << _score) ((+) 1) match2\n\n// End of the match\nlet match4 = setl _finished true match3\nlet match5 = over (_players << _1 << _team << _victories) ((+) 1) match4\nlet matchResult1 = over _players (fun (x, _) -> {winner = Some x; started = true}) match5\n\n// And the winner is ...\nlet winner = preview _winner_team matchResult1\n\n\n\n\n\n\n\n(**\nTraversal\n=========\n\n*)\n\n\n\nlet t1 = [|\"Something\"; \"\"; \"Something Else\"; \"\"|] |> setl (_all \"\") (\"Nothing\")\n// val t1 : string [] = [|\"Something\"; \"Nothing\"; \"Something Else\"; \"Nothing\"|]\n\n// we can preview it\nlet t2 = [|\"Something\"; \"Nothing\"; \"Something Else\"; \"Nothing\"|] |> preview (_all \"Something\")\n// val t2 : string option = Some \"Something\"\n\n// view all elements in a list\nlet t3 = [|\"Something\"; \"Nothing\"; \"Something Else\"; \"Nothing\"|] |> toListOf (_all \"Something\")\n// val t3 : string list = [\"Something\"]\n\n// also view it, since string is a monoid\nlet t4 = [|\"Something\"; \"Nothing\"; \"Something Else\"; \"Nothing\"|] |> view  (_all \"Something\")\n// val t4 : string = \"Something\"\n\n// Lens composed with a Traversal -> Traversal\nlet t5 = [((), \"Something\"); ((),\"\"); ((), \"Something Else\"); ((),\"\")] |> preview  (_all ((),\"Something\") << _2)\n// val t5 : Option<string> = Some \"Something\"\n\n\n\n\n(**\nFold\n====\n\n*)\nopen FSharpPlus.Lens\nopen FSharpPlus // This module contain other functions relevant for the examples (length, traverse)\nopen FSharpPlus.Data // Mult\n\nlet f1 = over both length (\"hello\",\"world\")\n// val f1 : int * int = (5, 5)\n\nlet f2 = (\"hello\",\"world\")^.both\n// val f2 : string = \"helloworld\"\n\nlet f3 = anyOf both ((=)'x') ('x','y')\n// val f3 : bool = true\n\nlet f4 = (1,2)^..both\n// val f4 : int list = [1; 2]\n\nlet f5 = over items length [\"hello\";\"world\"]\n// val f5 : int list = [5; 5]\n\nlet f6 = [\"hello\";\"world\"]^.items\n// val f6 : string = \"helloworld\"\n\nlet f7 = anyOf items ((=)'x') ['x';'y']\n// val f7 : bool = true\n\nlet f8 = [1;2]^..items\n// val f8 : int list = [1; 2]\n\nlet f9 = foldMapOf (traverse << both << _Some) Mult [(Some 21, Some 21)]\n// val f9 : Mult<int> = Mult 441\n\nlet f10 = foldOf (traverse << both << _Some) [(Some 21, Some 21)]\n// val f10 : int = 42\n\nlet f11 = allOf both (fun x-> x >= 3) (4,5)\n// val f11 : bool = true\n\n(**\nIso\n===\n\n*)\n\n\nlet toOption (isSome, v) = if isSome then Some v else None\nlet fromOption = function Some (x:'t) -> (true, x) | None -> (false, Unchecked.defaultof<'t>)\nlet inline isoTupleOption x = x |> iso toOption fromOption\n\n\nlet i1 = view isoTupleOption (System.Int32.TryParse \"42\")\n// val i1 : int option = Some 42\n\nlet i2 = view (from' isoTupleOption) (Some 42)\n// val i2 : bool * int = (true, 42)\n\n// Iso composed with a Lens -> Lens\nlet i3 = view (_1 << isoTupleOption) (System.Int32.TryParse \"42\", ())\n// val i3 : int option = Some 42\n\n\n(**\nMaximum and minimum\n===================\n\n*)\n\nlet fv3 = maximumOf (traverse << both << _Some) [(Some 1, Some 2);(Some 3,Some 4)]\n// val fv3 : int option = Some 4\n\nlet fv4 = minimumOf (traverse << both << _Some) [(Some 1, Some 2);(Some 3,Some 4)]\n// val fv4 : int option = Some 1"},{"uri":"/FSharpPlusindex.html","title":"FSharpPlus\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nFSharpPlus\n======================\nF#+ is a base library that aims to take F# to the next level of functional\nprogramming. \n\n*What if we imagine F# as more than it is?*\n\nF#+ builds upon FSharp, using generic programming techniques to help\nyou avoid boiler plate code.  However, by naming conventions and signatures\nit can be seen to 'enhance' rather than 'replace' existing patterns as much\nas possible.\n\nThe additions can be summarised as:\n\n * [Extensions](extensions.html) to core types, such as [`String.toLower`](reference/fsharpplus-string.html)\n\n * [Generic Functions and Operators](generic-doc.html) like `map`, which can be extended to support other types\n\n * Generic and customizable [Computation Expressions](computation-expressions.html),\n   like `monad`\n\n * A generic [Math Module](numerics.html)\n\n * [Abstractions](abstractions.html) that capture common FP patterns, such as\n   the standard monads Cont, Reader, Writer, State and their Monad Transformers\n\n * Some new types that work well with the abstractions, such as NonEmptyList,\n   DList and Validation\n\n * A polymorphic [Lenses/Optics](tutorial.html#Lens) to easily read and update\n   parts of immutable data\n\n * Generic methods that help you with [parsing](parsing.html)\n\nNote, however, that F#+ does not go into solving a specific thing for a specific\ntechnology, such as JSON parsing.\n\nSome functions are available as [extension methods](extension-methods.html)\nso are callable from C#. Note that this is not complete, or currently considered high priority.\n\nGetting started is easy since you can start with enjoying some of the extensions\nand generic functions, but you will find other parts of F#+ unfold before you\nand become useful the deeper in you get.\n\nExample 1\n---------\n\nThis example demonstrates using an extension function defined in this library.\n\n*)\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\nopen FSharpPlus\n\nlet x = String.replace \"old\" \"new\" \"Good old days\"\n// val x : string = \"Good new days\"\n\n(**\n\nExample 2\n---------\n\nThis example demonstrates using a generic function defined in this library.\n\n*)\n\nmap string [|2;3;4;5|]\n// val it : string [] = [|\"2\"; \"3\"; \"4\"; \"5\"|]\n\nmap ((+) 9) (Some 3)\n// val it : int option = Some 12\n\nopen FSharpPlus.Data\n\nmap string (NonEmptyList.create 2 [3;4;5])\n// val it : NonEmptyList<string> = {Head = \"2\"; Tail = [\"3\"; \"4\"; \"5\"];}\n\n(**\n\nFor a more hands on run through F#+ we recommend following the tutorial:\n\n * [Tutorial](tutorial.html) contains a further explanation of this library.\n\n\nReference Documentation\n-----------------------\n\n * [Types](types.html) contains detailed information about all the types provided in this library.\n\n * [API Reference](reference/index.html) contains automatically generated documentation for all types, modules\n   and functions in the library. This includes additional brief samples on using most of the\n   functions.\n\nSamples\n-----------------------\n\nThis documentation is automatically generated from `*.fsx` files in [the content folder][content]. \nIt can be useful to clone a local copy to review.\n\nThe [API reference](reference/index.html) is automatically generated from\nMarkdown comments in the library implementation.\n \nAlso of note is the [Sample folder][samples]\nwhich contains sample scripts showing how to use F#+ in your code.\n\nContributing and copyright\n--------------------------\n\nThe project is hosted on [GitHub][gh] where you can [report issues][issues], fork \nthe project and submit pull requests.\n\nIf you're adding a new public API, please also consider adding [documentation][content].\nYou might also want to read the [library design notes][design] to understand how it works.\n\nThe library is available under Apache License, Version 2.0, which allows modification and \nredistribution for both commercial and non-commercial purposes. For more information see the \n[License file][license] in the GitHub repository. \n\n  [content]: https://github.com/fsprojects/FSharpPlus/tree/master/docsrc/content\n  [samples]: https://github.com/fsprojects/FSharpPlus/tree/master/src/FSharpPlus.Docs/Samples\n  [gh]: https://github.com/fsprojects/FSharpPlus\n  [issues]: https://github.com/fsprojects/FSharpPlus/issues\n  [readme]: https://github.com/fsprojects/FSharpPlus/blob/master/README.md\n  [license]: https://github.com/fsprojects/FSharpPlus/blob/master/LICENSE.txt\n  [design]: https://github.com/fsprojects/FSharpPlus/blob/master/DESIGN_GUIDELINES.md\n*)"},{"uri":"/FSharpPlusabstraction-category.html","title":"Category\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nCategory\n========\n\nA category has an id and a composition operation.\n\n___\n\n\n\nMinimal complete definition\n---------------------------\n\n\n * ``catId``\n\n * ``catComp f g`` / ``(<<<)`` f g\n\n*)\n(**\n    static member get_Id() : 'Category<'T,'T>\n    static member (<<<) (f:Category<'U,'V>, g:'Category<'T,'U>) : 'Category<'T,'V>\n*)\n(**\n\n\n\nOther operations\n----------------\n\n * ``(>>>)``\n*)\n(**\n    static member (>>>) (g:'Category<'T,'U>, f:Category<'U,'V>) : 'Category<'T,'V>\n*)\n(**\n\n\n\nRules\n-----\n*)\n(**\n    catId <<< f = f <<< catId = f\n*)\n(**\n\n\nConcrete implementations\n------------------------\n\nFrom .Net/F#\n \n -  ``'T->'U``\n -  ``Func<'T,'U>``\n\n \nFrom F#+\n\n -  [``Kleisli<'T, 'Monad<'U>>``](type-kleisli.html)\n\n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n*)"},{"uri":"/FSharpPlustype-optiont.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlustype-choicet.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlustype-writert.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlusabstraction-monoid.html","title":"Monoid\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nMonoid\n======\nTypes with an associative binary operation that has an identity.\n___\nMinimal complete definition\n---------------------------\n * `zero``\n * ``(+) x y``/``(++) x y``\n*)\n(**\n    static member get_Zero () :'Monoid\n    static member (+) (x:'Monoid, y:'Monoid) :'Monoid\n*)\n(**\nOther operations\n----------------\n * ``Seq.sum``\n*)\n(**\n    static member Sum (x:Seq<'Monoid>) :'Monoid\n*)\n(**\nRules\n-----\n*)\n(**\n\tzero + x = x\n    x + zero = x\n    (x + y) + z = x + (y + z)\n    Seq.sum = Seq.fold (+) zero\n    sum = fold (+) zero (generic to all foldables)\n*)\n(**\nRelated Abstractions\n--------------------\n - [Semigroup](abstraction-semigroup.html): A monoid is a Semigroup with an additional ``zero`` operation\n \n - [Alternative / MonadPlus](abstraction-alternative.html): Applicatives/Monads that are also Monoids. Though their monoidal definition could be different.\n\n\nConcrete implementations\n------------------------\nFrom .Net/F#\n \n -  ``list<'T>``\n -  ``option<'T>``\n -  ``array<'T>``\n -  ``string``\n -  ``StringBuilder``\n -  ``unit``\n -  ``Set<'T>``\n -  ``Map<'T,'Monoid>``\n -  ``TimeSpan`` \n -  ``Tuple<'Monoid1* ... *'MonoidN>``\n -  ``'Monoid1* ... *'MonoidN``\n -  ``Task<'T>``\n -  ``'T->'Monoid``\n -  ``Async<'T>``\n -  ``Expr<'T>``\n -  ``Lazy<'T>``\n -  ``Dictionary<'T,'Monoid>``\n -  ``IDictionary<'T,'Monoid>``\n -  ``IReadOnlyDictionary<'T,'Monoid>``\n -  ``ResizeArray<'T>``\n -  ``seq<'T>``\n -  ``IEnumerator<'T>``\n \nFrom F#+\n \n -  [``ZipList<'T>``](type-ziplist.html)\n -  [``Dual<'T>``](type-dual.html)\n -  [``Endo<'T>``](type-endo.html)\n -  [``All``](type-all.html)\n -  [``Any``](type-any.html)\n -  [``Const<'T,'U>``](type-const.html)\n -  [``First<'T>``](type-first.html)\n -  [``Last<'T>``](type-last.html)\n -  [``DList<'T>``](type-dlist.html)\n -  [``Vector<'T,'Dimension>``](type-vector.html)\n -  [``Matrix<'T,'Rows,'Columns>``](type-matrix.html)\n\n \n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n\nExamples\n--------\n*)\n\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Math.Generic\nopen FSharpPlus.Data\n\n\n/// A monoid that represents results of comparisons\ntype Ordering = LT|EQ|GT with\n    static member        Zero = EQ\n    static member        (+) (x:Ordering, y) = \n        match x, y with\n        | LT, _ -> LT\n        | EQ, a -> a\n        | GT, _ -> GT\n\nlet inline compare' x y =\n    match compare x y with\n    | a when a > 0 -> GT\n    | a when a < 0 -> LT\n    | _            -> EQ\n\nlet resGreater = compare' 7 6\n\n/// A monoid of all numbers from 0 to 4\ntype Mod5 = Mod5 of uint32 with\n    static member inline get_Zero() = Mod5 0u\n    static member inline (+) (Mod5 x, Mod5 y) = Mod5 ( (x + y) % 5u)\nlet Mod5 x = Mod5 (x % 5u)\n\n\n// Results of Monoid operations\nlet emptyLst:list<int> = zero\nlet zeroUint:Mod5   = zero\nlet res1 = zero ++ Mod5 11u\nlet res2  = sum <| map Mod5 [4u; 2u; 1u]\nlet res3  = sum [zero; Mod5 2G; Mod5 6G]\nlet res8n4 = [zero; [8;4]]\nlet res15 = Mult 15 ++ zero\nlet resTrue = sum [zero; Any true]\nlet resFalse = sum (map All [true;false])\nlet resHi = zero ++ \"Hi\"\nlet resGT = zero ++  GT\nlet resLT = sum [zero; LT ; EQ ;GT]\nlet res9823 = sum (map Dual [zero;\"3\";\"2\";\"8\";\"9\"])\nlet resBA = Dual \"A\" ++ Dual \"B\" \nlet resEl00:list<int>*float = zero\nlet resS3P20     = (1G, Mult 5.0) ++  (2, Mult 4G)\nlet res230       = (zero,zero) ++ ([2],[3.0])\nlet res243       = ([2;4],[3]) ++ zero\nlet res23        = zero ++ ([2],\"3\")\nlet resLtDualGt  =  (LT,Dual GT) ++ zero\nlet res230hiSum2 = (zero, zero, 2) ++ ([2], ([3.0], \"hi\"), zero)\nlet res230hiS4P3 = (zero, zero   ) ++ ([2], ([3.0], \"hi\", 4, Mult (6 % 2)))\nlet tuple5 :string*(Any*string)*(All*All*All)*int*string = zero"},{"uri":"/FSharpPlustype-readert.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlustype-first.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlusextension-methods.html","title":"Extension Methods\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\nopen FSharpPlus\n\n(**\nExtension Methods\n=================\n\n*)\n\n(**\n\nSome methods are also exposed as extensions. This makes possible some uses from C#\n\nHere are some examples:\n\n*)\n\nopen FSharpPlus.Extensions\n\nlet opt  = Option.Sequence [Some 1; Some 2]\nlet asn = Async.Sequence [| async {return 1}; async {return 2} |]"},{"uri":"/FSharpPlusabstraction-bifoldable.html","title":"Bifoldable\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nBifoldable\n=======\n\nIntuitively a bifoldable is a type with 2 arguments, each of them being foldable.\n\n___\n\nA bifoldable (short for binary foldable) or foldable of two variables is a container of up to two elements whose components can be folded to a single value.\n\nUnlike bimap which preserves the container type, bifoldable will extract and fold the value.\n\n\nMinimal complete definition\n---------------------------\n\n\n * ``bifoldMap f g x``\n*)\n(**\n    static member BifoldMap (x:'Bifoldable<'T,'V>, f:'T->'U, g:'V->'U) :'U\n*)\n(**\n\n* ``bifold f g z x``\n*)\n(**\n    static member Bifold (x:'Bifoldable<'T,'V>, f:'T->'Monoid, g:'V->'Monoid, z: 'Monoid) :'Monoid\n*)\n(**\n\n* ``bifoldBack f g x z``\n*)\n(**\n    static member BifoldBack (x:'Bifoldable<'T,'V>, f:'T->'Monoid, g:'V->'Monoid, z: 'Monoid) :'Monoid\n*)\n(**\n\n\nOther operations\n----------------\n\n * ``bisum x``\n*)\n(**\n    static member Bisum (x:Bifunctor<'T,'T>) :'T\n*)\n\n(**\n\n\n\n\nRules\n-----\n*)\n(**\n    bisum x = bifoldMap id id x\n    bifoldMap f g x = bifoldBack (f >> (++)) (g >> (++)) x zero\n    bifoldBack f g x z = Endo.run (bifoldMap (f >> Endo) (g >> Endo) x) z\n*)\n(**\n\n\nRelated Abstractions\n--------------------\n\n - [Foldable](abstraction-foldable.html): All bifoldable contain up to two elements that are foldable to a single common type.\n - [Monoid](abstraction-monoid.html): For containers where the two elements are not disjoint, the same relation that foldable has to monoid applies.\n\nConcrete implementations\n------------------------\n\nFrom .Net/F#\n \n -  ``'T * 'U``\n -  ``Result<'T,'U>``\n -  ``Choice<'T,'U>``\n\n \nFrom F#+\n\n -  [``Const<'C,'T>``](type-const.html)\n -  [``Validation<'err,'a>``](type-validation.html)\n\n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n\nExamples\n--------\n*)\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Control\n\nlet listMapSeqLength = List.map Seq.length\nlet listMapTimes2 = List.map ((*) 2)\n\nlet c1 : Choice<int list,string list> = Choice1Of2 [1..2]\nlet c2 : Choice<int list,string list> = Choice2Of2 [\"a\";\"bbbb\"]\n\nbifoldBack (listMapSeqLength >> (++)) (listMapTimes2 >> (++)) c1 [0] // = [2;4;0]\nbifoldBack (listMapSeqLength >> (++)) (listMapTimes2 >> (++)) c2 [0] // = [1;4;0]\nbifoldMap listMapSeqLength listMapTimes2 c1 // = [2;4]\nbifoldMap listMapSeqLength listMapTimes2 c2 // = [1;4]\n\nlet t = (\"b\",\"c\")\nbifoldBack (++) (++) t \"a\" // = \"bca\"\nbifold (++) (++) \"a\" t // = \"abc\"\n\n// implementing on custom type:\ntype MyEither<'a,'b> = \n    | MyLeft of 'a \n    | MyRight of 'b\n    static member inline BifoldMap (x: MyEither<_,_>, f, g) =\n      match x with\n      | MyLeft a -> f a\n      | MyRight a -> g a\n\n    static member BifoldBack (x: MyEither<_,_>, f, g, z) =\n        match x with\n        | MyLeft a -> f a z\n        | MyRight a -> g a z\n\nbisum (MyEither.MyLeft \"a\") // = \"a\"\nbisum (1,2) // = 3\n\n\nlet inline law1 x =\n  bisum x = bifoldMap id id x\n\nlaw1 (1,1) // = true\nlaw1 (Ok [1;2;3]) // = true\nlaw1 (Error [1;2;3]) // = true\nlaw1 (Choice1Of2 [1;2;3]) // = true\nlaw1 (Choice2Of2 [1;2;3]) // = true\nlaw1 (MyLeft [1;2;3]) // = true\nlaw1 (MyRight [1;2;3]) // = true\n\n\nlet inline law2 x f g =\n  bifoldMap f g x = bifoldBack (f >> (++)) (g >> (++)) x zero\n\nlaw2 (1,1) ((+) 1) ((+) 2) // = true\nlaw2 (Ok [1;2;3]) ((++) [1]) ((++) [2]) // = true\nlaw2 (\"a\",\"b\") ((+) \"bbbb\") ((+) \"aaaa\") // = true\n\nopen FSharpPlus.Data\nlet inline law3 x f g z =\n  bifoldBack f g x z = Endo.run (bifoldMap (f >> Endo) (g >> Endo) x) z\n\nlaw3 (1,1) (++) (++) 5 // = true\nlaw3 (\"a\",\"b\") (++) (++) \"abcd\" // = true\nlaw3 (Ok [1;2;3]) (++) (++) [0;1;2;3;4] // = true"},{"uri":"/FSharpPlusabstraction-monad.html","title":"Monad\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nMonad\n=====\n\nDefines the basic operations over a monad, a concept from a branch of mathematics known as category theory. From the perspective of an F# programmer, however, it is best to think of a monad as an abstract datatype of actions. F#+ generic computation expressions provide a convenient syntax for writing monadic expressions.\n\n___\n\n\n\nMinimal complete definition\n---------------------------\n\n\n * ``return x``/``result x``\n * ``(>>=) x f``\n*)\n(**\n    static member Return (x: 'T) : 'Monad<'T>\n    static member (>>=) (x: Monad<'T>, f: 'T->Monad<'U>) : Monad<'U>\n*)\n(**\n\nNote: ``return`` can't be used outside computation expressions, use ``result`` instead.\n\nOther operations\n----------------\n\n * ``join``\n*)\n(**\n    static member Join (x:'Monad<'Monad<'T>>) :'Monad<'T>\n*)\n(**\n\n\n\nRules\n-----\n*)\n(**\n    return a >>= k = k a\n    m >>= return = m\n    m >>= (fun x -> k x >>= h) = (m >>= k) >>= h\n*)\n(**\n\n\nRelated Abstractions\n--------------------\n\n - [Functor](abstraction-functor.html): Monads are automatically functors.\n \n - [Applicative](abstraction-applicative.html) : Monads are automatically applicatives.\n\n\nConcrete implementations\n------------------------\n\nFrom F#\n \n -  ``seq<'T>``\n -  ``list<'T>``\n -  ``array<'T>``\n -  ``option<'T>`` \n -  ``Lazy<'T>``\n -  ``Async<'T>``\n -  ``Result<'T,'U>`` \n -  ``Choice<'T,'U>``\n -  ``'Monoid * 'T``\n -  ``Task<'T>``\n -  ``'R->'T``\n -  ``ResizeArray<'T>``\n\n \nFrom F#+\n\n -  [``Identity<'T>``](type-identity.html)\n -  [``Cont<'R,'T>``](type-cont.html)\n -  [``ContT<'R,'T>``](type-contt.html)\n -  [``Reader<'R,'T>``](type-reader.html)\n -  [``ReaderT<'R,'Monad<'T>>``](type-readert.html)\n -  [``Writer<'Monoid,'T>``](type-writer.html)\n -  [``WriterT<'Monad<'T * 'Monoid>>``](type-writert.html)\n -  [``State<'S,'T * 'S>``](type-state.html)\n -  [``StateT<'S,'Monad<'T * 'S>>``](type-statet.html)\n -  [``OptionT<'Monad<option<'T>>``](type-optiont.html)\n -  [``SeqT<'Monad<seq<'T>>``](type-seqt.html)\n -  [``ListT<'Monad<list<'T>>``](type-listt.html)\n -  [``ResultT<'Monad<Result<'T,'TError>>``](type-resultt.html)\n -  [``ChoiceT<'Monad<Choice<'T,'TError>>``](type-choicet.html)\n -  [``Free<'Functor<'T>,'T>``](type-free.html)\n -  [``NonEmptyList<'T>``](type-nonempty.html)\n -  [``DList<'T>``](type-dlist.html)\n \n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n\n\nExamples\n--------\n\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\n\n// Monads allow us to use our generic computation expressions\n\n// This will return the list [11;21;12;22] which is both lists combined in different ways with the (+) operation\nlet lst11n21n12n22 =\n    monad {\n        let! x1 = [1;   2]\n        let! x2 = [10; 20]\n        return ((+) x1 x2) }\n\n// This is the same example but with a non-empty list\nlet neLst11n21n12n22 = \n    monad {\n        let! x1 = { NonEmptyList.Head =  1; Tail =  [2] }\n        let! x2 = { NonEmptyList.Head = 10; Tail = [20] }\n        return ((+) x1 x2)}\n\n// And now an example with options\nlet some14 =\n    monad {\n        let! x1 = Some 4\n        let! x2 = tryParse \"10\"\n        return ((+) x1 x2) }\n\n\n\n// MONAD TRANSFORMERS\n// ==================\n//\n// Monads do not compose directly, we need to use Monad Transformers\n\n(**\n```f#\nlet fn : ResultT<Reader<int,Result<_,string>>> = \n    monad {\n       let! x1 = lift ask\n       let! x2 = \n           if x1 > 0 then result 1\n           else ResultT (result (Error \"Negative value\"))\n       return x1 + x2\n    }\n\nlet x = (fn |> ResultT.run |> Reader.run) 10\n// Result<int,string> = Ok 11\nlet y = (fn |> ResultT.run |> Reader.run) -1\n// Result<int,string> = Error \"Negative value\"\n```\n*)\n\n\n// The following example comes from Haskell\n// async is used instead of IO\n\nopen System\n\n// First let's define some functions we'll use later\nlet getLine    = async { return Console.ReadLine () }\nlet putStrLn x = async { printfn \"%s\" x }\nlet isValid s =\n    String.length s >= 8\n        && String.exists Char.IsLetter s\n        && String.exists Char.IsNumber s\n        && String.exists Char.IsPunctuation s\n\nlet decodeError = function\n    | -1 -> \"Password not valid\"\n    | _  -> \"Unknown\"\n\n\n// Now the following functions compose the Error monad with the Async one.\n\nlet getValidPassword : ResultT<_> =\n    monad {\n        let! s = liftAsync getLine\n        if isValid s then return s\n        else return! throw -1}\n    </catch/>\n        (fun s -> throw (\"The error was: \" + decodeError s))\n\nlet askPassword = monad {\n    do! lift <| putStrLn \"Insert your new password:\"\n    let! value = getValidPassword\n    //do! lift <| putStrLn \"Storing in database...\"\n    return value}\n\n//try -> Async.RunSynchronously (ResultT.run askPassword)\n\n\n// After getting used to monadic CEs it's natural\n// to feel the need to combine monads\n// (from https://stackoverflow.com/a/37900264 )\n\nmodule CombineWriterWithResult =\n    \n    let divide5By = function\n        | 0.0 -> Error \"Divide by zero\"\n        | x   -> Ok (5.0 / x)\n\n    let eitherConv logSuccessF logFailF f v =\n        ResultT <|\n            match f v with\n            | Ok a -> Writer(Ok a, [\"Success: \" + logSuccessF a])\n            | Error b -> Writer(Error b, [\"ERROR: \"   + logFailF b])\n\n    let ew = monad {\n        let! x = eitherConv (sprintf \"%f\") (sprintf \"%s\") divide5By 6.0\n        let! y = eitherConv (sprintf \"%f\") (sprintf \"%s\") divide5By 3.0\n        let! z = eitherConv (sprintf \"%f\") (sprintf \"%s\") divide5By 0.0\n        return (x, y, z) }\n\n    let (_, log) = ew |> ResultT.run |> Writer.run\n\n\n// You can also stack monad transformers.\n\n// A monad transformer and a monad is itself a monad, so you can pass that into another monad transformer.\n// For example, below we are stacking them like:\n// type Example = ReaderT<DateTime, ResultT<Writer<string list, Result<string * string * string, string>>>>)\n\n// Catch and throw is generic over all monad transformers in F#+ so catch works in this example\n// because there is a Result in the stack. We use it here to consolidate Result's 'TError.\n\nmodule CombineReaderWithWriterWithResult =\n\n    let divide5By : float -> Result<float, string> = function\n        | 0.0 -> Error \"Divide by zero\"\n        | x   -> Ok (5.0 / x)\n\n    let otherDivide5By : float -> Result<float, unit>  = function\n        | 0.0 -> Error ()\n        | x   -> Ok (5.0 / x)\n\n    let eitherConv f v =\n        ReaderT <| fun (now : System.DateTime) ->\n        ResultT <|\n            match f v with\n            | Ok a    -> Writer(Ok a,    [sprintf \"Success at %s: %A\" (now.ToString \"o\") a])\n            | Error b -> Writer(Error b, [sprintf \"ERROR at %s: %A\"   (now.ToString \"o\") b])\n\n    let divide = monad {\n        let! w = eitherConv divide5By       6.0\n        let! x = eitherConv divide5By       3.0\n        let! y = eitherConv divide5By       0.0\n        let! z = eitherConv otherDivide5By  0.0 </catch/> (throw << (fun _ -> \"Unknown error\"))\n\n        return (w, x, y, z) }\n\n    let run expr = ReaderT.run expr >> ResultT.run >> Writer.run\n\n    let (_, log) = run divide DateTime.UtcNow\n\n\n// Many popular F# libraries are in fact an instantiation of a specific monad combination.\n// The following example demonstrate how to code a mini-Suave lib in a few lines\n\nmodule Suave =\n    // setup something that reminds us of what Suave can work with\n    // this is an overly simplified model of Suave in order to show how OptionT can be used \n    // in conjunction with generic Kleisli composition (fish) operator\n    type WebPart<'a> = 'a -> OptionT<Async<'a option>>\n    let inline succeed x = async.Return (Some x)\n\n    module WebPart =\n        /// Comment from <a href=\"https://github.com/SuaveIO/suave/blob/v2.4.3/src/Suave/WebPart.fsi#L39-L42\">WebPart.fsi</a>\n        /// Entry-point for composing the applicative routes of the http application,\n        /// by iterating the options, applying the context, arg, to the predicate\n        /// from the list of options, until there's a match/a Some(x) which can be\n        /// run.\n        let choose (options: WebPart<'a> list) = fun x -> choice (List.map ((|>) x) options)\n\n    module Http =\n        type HttpResponse = { status: int; content: string }\n        type HttpRequest  = { url: Uri; ``method``: string }\n        type HttpContext  = { request: HttpRequest; response: HttpResponse }\n\n    module Successful =\n        open Http\n        let private withStatusCode statusCode s =\n            OptionT << fun ctx -> { ctx with response = { ctx.response with status = statusCode; content = s }} |> succeed\n        let OK s = withStatusCode 200 s\n        let BAD_REQUEST s = withStatusCode 400 s\n\n    module Filters =\n        open Http\n        let ``method`` (m: string) =\n            OptionT << fun (x: HttpContext) -> async.Return (if (m = x.request.``method``) then Some x else None)\n        let GET  (x : HttpContext) = ``method`` \"GET\" x\n        let POST (x : HttpContext) = ``method`` \"POST\" x\n  \n        let path s =\n            OptionT << fun (x: HttpContext) -> async.Return (if (s = x.request.url.AbsolutePath) then Some x else None)\n\n    // Stub implementations: here you can plug Fleece or another similar Json library\n    let toJson o : string  = failwith \"Not implemented\"\n    let ofJson (s: string) = failwith \"Not implemented\"\n\n    module Request =\n        let tryGet _s (_r: Http.HttpRequest) = Ok \"FORM VALUE\"\n\n    let authenticated (f: Http.HttpContext -> int -> OptionT<Async<'a option>>) =\n        // we assume that authenticated executes f only if auth, otherwise returns 401\n        // we fake it as:\n        fun (ctx: Http.HttpContext) -> f ctx -1\n\n    // Usage:\n    open Successful\n    open Filters\n    type Note = { id: int; text: string }\n    type NoteList = { notes: Note list; offset: int; chunk: int; total: int }\n    type IDb =\n        abstract member getUserNotes: int -> Async<NoteList>\n        abstract member addUserNote: int -> string -> Async<Note>\n    type OverviewViewModel = { myNotes: Note list }\n    let app (db: IDb) =\n        let overview =\n            GET >=> (authenticated <| fun ctx userId ->\n                monad {\n                  let! res = lift (db.getUserNotes userId)\n                  let ovm = toJson { myNotes = res.notes }\n                  return! OK ovm ctx\n                })\n        let register =\n            POST >=> (authenticated <| fun ctx userId ->\n                monad {\n                  match ctx.request |> Request.tryGet \"text\" with \n                  | Ok text ->\n                      let! newNote = lift (db.addUserNote userId text)\n                      let rvm = toJson newNote\n                      return! OK rvm ctx\n                  | Error msg -> \n                      return! BAD_REQUEST msg ctx\n                })\n        WebPart.choose [ path \"/\" >=> (OK \"/\")\n                         path \"/note\" >=> register\n                         path \"/notes\" >=> overview ]"},{"uri":"/FSharpPluscomputation-expressions.html","title":"Computations Expressions\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nComputations Expressions\n========================\n\nThis library allows to use some common computation expressions without writing any boiler plate code.\n\nThere is a single computation expression: ``monad`` but it comes in 4 flavours:\n\n - Delayed or strict\n\n   Delayed computations require that the type implements a Delay method.\n   F# comes with async and seq computation expressions, both are delayed.\n\n - It can have embedded side-effects or act as a monadplus\n\n   A monadplus can return (or yield) many times, so for example all expressions in a loop can be returned, whereas in the other model those expressions are of type unit, since a side effect is expected.\n\n   Async workflows is an example of a side-effect computation expression and seq expressions are an example of monadplus.\n\n   Side effect workflows don't have any additional requirement over the type (apart from the monad operations), but monadplus requires the additional [get_Empty and (<|>)](abstraction-alternative.html) methods.\n\n  The generic computation expression ``monad`` is a side-effect one, but it can be turned into a monadplus by accessing the ``.plus`` property. \n  Note that ``monad.fx`` is an alias for ``monad``: fx is used as an abbreviation for side-effects.\n\n  These computations are lazy by default, but they can be made strict by adding ``.strict`` or using a ``'``, ie ``monad.plus'``.\n\nIn other words:\n\n - ``monad.fx`` is the same as ``monad``: Lazy monadic builder. Use when you want to use side-effects instead of the additive behavior of monad plus.\n - ``monad.fx'`` is the strict version of ``monad``\n - ``monad.plus`` Lazy additive monadic builder. Use when you expect one or more results.\n - ``monad.plus'`` is the strict version of ``monad.plus``\n\nExamples\n========\n\nYou may run this script step-by-step.\n\n\n*)\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\nopen FSharpPlus\n\nlet lazyValue = monad {\n    let! a = lazy (printfn \"I'm lazy\"; 2)\n    let! b = lazy (printfn \"I'm lazy too\"; 10)\n    return a + b}\n\n// val lazyValue : System.Lazy<int> = Value is not created.\n\nlet res12 = lazyValue.Value\n\n\nlet maybeWithSideFx = monad' { \n    let! a = Some 3\n    let b = ref 0\n    while !b < 10 do \n        let! n = Some ()\n        incr b\n    if a = 3 then printfn \"got 3\"\n    else printfn \"got something else (will never print this)\"\n    return a }\n\n// val maybeWithSideFx : int option = Some 3\n\n\n\nlet lst = [None; None; Some 2; Some 4; Some 10; None]\n\nlet maybeManyTimes = monad.plus' {\n    let defaultValue = 42\n    let mutable i = 0\n    return! None\n    while i < 5 do\n        printfn \"looping %i\" i\n        i <- i + 1\n        return! lst.[i]\n    printfn \"halfway\"\n    return! None\n    printfn \"near the end\"\n    return defaultValue }\n\n// val maybeManyTimes : int option = Some 2\n\n\nlet (asnNumber: Async<_>) = monad.fx {\n    let mutable m = ResizeArray ()\n    try\n        for i = 1 to 10 do\n            m.Add i\n        return m.[-1]\n    with e ->\n        return -3 }\n\n\nlet (lstNumber: list<_>) = monad.plus' {\n    try\n        for i = 1 to 10 do\n            return i\n    with e ->\n        return -3 }\n\n\n(*\nFor more information about computation expressions you can read the paper : The F# Computation Expression Zoo\nhttp://tomasp.net/academic/papers/computation-zoo/computation-zoo.pdf\n*)"},{"uri":"/FSharpPlustutorial.html","title":"Introducing FSharpPlus\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nIntroducing FSharpPlus\n======================\n\n - Download binaries from [Nuget](https://www.nuget.org/packages/FSharpPlus/), use the latest CI version.\n\n - Open an F# script file or the F# interactive, reference the library and open the namespace\n\n*)\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\nopen FSharpPlus\n\n(**\n Ignore warnings about F# metadata if any.\n\n\nNow we'll start with a quick overview of the features presented in F#+.\n\n### Generic functions \n\nThey are automatically available when opening the FSharpPlus namespace\n\nhere's an example with <code>map</code> ([fmap](https://wiki.haskell.org/Functor) for Haskellers, [Select](http://www.dotnetperls.com/select) for C-sharpers):\n\n*)\n\nmap string [|2;3;4;5|]\n// val it : string [] = [|\"2\"; \"3\"; \"4\"; \"5\"|]\n\nmap ((+) 9) (Some 3)\n// val it : int option = Some 12\n\nopen FSharpPlus.Data\n\nmap string (NonEmptyList.create 2 [3;4;5])\n// val it : NonEmptyList<string> = {Head = \"2\"; Tail = [\"3\"; \"4\"; \"5\"];}\n\n(**\nThey're also available for your own types as long as they contain the appropriated method with the expected signature\n*)\n\n\ntype Tree<'t> =\n    | Tree of 't * Tree<'t> * Tree<'t>\n    | Leaf of 't\n    static member Map (x:Tree<'a>, f) = \n        let rec loop f = function\n            | Leaf x -> Leaf (f x)\n            | Tree (x, t1, t2) -> Tree (f x, loop f t1, loop f t2)\n        loop f x\n\nmap ((*) 10) (Tree(6, Tree(2, Leaf 1, Leaf 3), Leaf 9))\n// val it : Tree<int> = Tree (60,Tree (20,Leaf 10,Leaf 30),Leaf 90)\n\n(**\nGeneric functions may be seen as an exotic thing in F# that only saves a few key strokes (<code>map</code> instead of <code>List.map</code> or <code>Array.map</code>) still they allow you to reach a higher abstraction level, using ad-hoc polymorphism.\n\nBut more interesting is the use of operators. You can't prefix them with the module they belong to, well you can but then it's no longer an operator. As an example many F# libraries define the bind operator <code>(>>=)</code> but it's not generic so if you use two different types which are both monads you will need to prefix it e.g. <code>State.(>>=)</code> and <code>Reader.(>>=)</code> which defeats the purpose of having an operator.\n\nHere you have a ready-to-use generic bind operator: ``>>=``\n*)\n\nlet x = [\"hello\";\" \";\"world\"] >>= (fun x -> Seq.toList x)\n// val x : char list = ['h'; 'e'; 'l'; 'l'; 'o'; ' '; 'w'; 'o'; 'r'; 'l'; 'd']\n\n\nlet tryParseInt : string -> int option = tryParse\nlet tryDivide x n = if n = 0 then None else Some (x / n)\n\nlet y = Some \"20\" >>= tryParseInt >>= tryDivide 100\n// val y : int option = Some 5\n\n(**\nYou have also the Kleisli composition (fish) operator:  ``>=>``\n\nWhich is becoming popular in F# after the [Railway Oriented Programming](https://www.google.ch/#q=railway+oriented+programming) tutorial series\n*)\n\nlet parseAndDivide100By = tryParseInt >=> tryDivide 100\n\nlet parsedAndDivide100By20 = parseAndDivide100By \"20\"   // Some 5\nlet parsedAndDivide100By0' = parseAndDivide100By \"zero\" // None\nlet parsedAndDivide100By0  = parseAndDivide100By \"0\"    // None\n\nlet parseElement n = List.tryItem n >=> tryParseInt\nlet parsedElement  = parseElement 2 [\"0\"; \"1\";\"2\"]\n\n(**\nBut don't forget the above used operators are generic, so we can change the type of our functions and we get a different functionality for free:\n*)\n\n(*** hide ***)\nmodule E2 =\n\nlet tryParseInt x : Choice<int, string> = \n    match tryParse x with \n    | Some x -> Choice1Of2 x\n    | None   -> Choice2Of2 (\"Failed to parse \" + x)\n        \n\nlet tryDivide x n = \n    if n = 0 then Choice2Of2 \"Can't divide by zero\"\n    else Choice1Of2 (x / n)\n\n(**\nThe test code remains unchanged, but we get a more interesting functionality\n*)\n\nlet parseAndDivide100By = tryParseInt >=> tryDivide 100\n\nlet parsedAndDivide100By20 = parseAndDivide100By \"20\"   // Choice1Of2 5\nlet parsedAndDivide100By0' = parseAndDivide100By \"zero\" // Choice2Of2 \"Failed to parse zero\"\nlet parsedAndDivide100By0  = parseAndDivide100By \"0\"    // Choice2Of2 \"Can't divide by zero\"\n\n\n(**\n\nAlso when working with combinators, the generic applicative functor (space invaders) operator is very handy: ``<*>``\n*)\n\nlet sumAllOptions = Some (+) <*> Some 2 <*> Some 10     // val sumAllOptions : int option = Some 12\n\nlet sumAllElemets = [(+)] <*> [10; 100] <*> [1; 2; 3]   // int list = [11; 12; 13; 101; 102; 103]\n\n(**\n\nFor more details and features, see [generic operators and functions](generic-doc.html)\n\nHere are all [generic operators and functions](reference\\fsharpplus-operators.html)\n\nAnd [here's a short explanation](applicative-functors.html) of Functor, Applicative and Monad abstractions with code samples.\n\n\n\n### Lens\n\n\n\nfrom https://github.com/ekmett/lens/wiki/Examples\n\n\nFirst, open F#+ Lens\n*)\n\nopen FSharpPlus.Lens\n\n(** Now, you can read from lenses (``_2`` is a lens for the second component of a tuple) *)\n\nlet r1 = (\"hello\",\"world\")^._2\n// val it : string = \"world\"\n\n(** and you can write to lenses. *)\nlet r2 = setl _2 42 (\"hello\",\"world\")\n// val it : string * int = (\"hello\", 42)\n\n(**  Composing lenses for reading (or writing) goes in the order an imperative programmer would expect, and just uses ``(<<)``. *)\nlet r3 = (\"hello\",(\"world\",\"!!!\"))^.(_2 << _1)\n// val it : string = \"world\"\n\nlet r4 = setl (_2 << _1) 42 (\"hello\",(\"world\",\"!!!\"))\n// val it : string * (int * string) = (\"hello\", (42, \"!!!\"))\n\n(**  You can make a Getter out of a pure function with ``to'``. *)\nlet r5 = \"hello\"^.to' length\n// val it : int = 5\n\n(**  You can easily compose a Getter with a Lens just using ``(<<)``. No explicit coercion is necessary. *)\nlet r6 = (\"hello\",(\"world\",\"!!!\"))^. (_2 << _2 << to' length)\n// val it : int = 3\n\n(**  As we saw above, you can write to lenses and these writes can change the type of the container. ``(.->)`` is an infix alias for ``set``. *)\nlet r7 = _1 .-> \"hello\" <| ((),\"world\")\n// val it : string * string = (\"hello\", \"world\")\n\n(**  It can be used in conjunction with ``(|>)`` for familiar von Neumann style assignment syntax: *)\nlet r8 = ((), \"world\") |> _1 .-> \"hello\"\n// val it : string * string = (\"hello\", \"world\")\n\n(**  Conversely view, can be used as an prefix alias for ``(^.)``. *)\nlet r9 = view _2 (10,20)\n// val it : int = 20\n\n(**\n\nFor more details:\n\nHere's a full tour of [lens and all other optics](lens.html)\n\nHave a look at all [lens functions](reference\\fsharpplus-lens.html)\n*)"},{"uri":"/FSharpPlustype-ziplist.html","title":"ZipList<'T>\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nZipList<'T>\n===========\n\nThis is a wrapper over seq<'T> which changes its applicative semantic to point-wise processing.\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\nlet seq1 = seq { 1..100000}\nlet seq2 = seq {10..100000}\n\nlet seq1_plus_seq2  = (+) <!> ZipList seq1 <*> ZipList seq2\n\nopen FSharpPlus.Math.Applicative\n\nlet seq1_plus_seq2' = ZipList seq1 .+. ZipList seq2\nlet arrCombined     = 10 *. ZipList seq1 .+. ZipList seq2 .- 5\nlet asMonoid        = result \"Hello \" </plus/> ZipList [\"City\"; \"World\"; \"Sun\"]\n\n// try ZipList.run {the results}"},{"uri":"/FSharpPlustype-dual.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlustype-vector.html","title":"Vector<'NumType,'Dimension>\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nVector<'NumType,'Dimension>\n===========================\n\nThis is a fixed size vector of a (typically) numeric type.\n\nRelated Tyes\n------------\n\n - [Matrix](type-matrix.html): Similar but for matrices\n \n\n\n\nAbstractions\n------------\n\n -  [Semigroup](abstraction-semigroup.html)\n -  [Monoid](abstraction-monoid.html)\n -  [Functor](abstraction-functor.html)\n -  [ZipFunctor](abstraction-misc.html)\n -  [Applicative](abstraction-applicative.html)\n -  [Foldable](abstraction-foldable.html)\n -  [Reducible](abstraction-misc.html)\n\n\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\n\nlet vector3d_1 = vector (1, 2, 3)\nlet vector3d_2 = vector (10, 20, 30)\n\n\n// Add two vectors\n\nlet vector3d_sum = vector3d_1 + vector3d_2\n\n\n// Add a scalar\n\nlet vector3d_3 = vector (1, 2, 3) + result 5\n\n\n// Another way\n\nopen FSharpPlus.Math.Generic\n\nlet vector3d_4 = vector (1, 2, 3) + 5G"},{"uri":"/FSharpPlustype-free.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlusparsing.html","title":"Parsing\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\nopen System\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\nopen FSharpPlus\n(**\n# Parsing\n\nF#+ provides several helper methods in order to simplify building parsers and parsing like tasks. \n*)\n\n(**\n## Parse\n\nParse allows you to use `parse` generic method for standard types and types that implement a static Parse method with the correct signature.\n\n\n### Minimal definition\n\n*)\n\n(**\n```f#\nstatic member Parse (x:'r) :'T\n```\nor\n\n```f#\nstatic member Parse (x:'r, c:CultureInfo) :'T\n```\n\n*)\n\n(**\n## TryParse\n\nTryParse allows you to use `tryParse` generic method for standard types and types that implement a static TryParse method with the correct signature.\n\n### Minimal definition\n\nIn order to use `tryParse` together with a type the type needs to implement a TryParse like static method.\n\n*)\n\n(**\nYou can use F# style TryParse:\n```f#\nstatic member TryParse(value:'r) : 'T option\n```\nor C# style TryParse:\n```f#\nstatic member TryParse (x:'r, [<Out>] result: 'T byref) :bool\n```\nexpressed in C# that would be:\n```c#\npublic static bool TryParse (string x, out T result) \n```\n\nA neat thing when you have types that implement the above definition is that it's simple to define active patterns:\n*)\n\nlet (|Port|_|) : _-> UInt16 option = tryParse\nlet (|IPAddress|_|) :_->System.Net.IPAddress option = tryParse\n\n(**\n## sscanf, trySscanf and friends\n\nIn F# you have some nice utility functions for creating printf style string writer function. In F#+ we find the inverse: sscanf and trySscanf.\n\nFor instance if you want to parse based on known format of a url:\n*)\n\nlet route1 x = trySscanf \"/api/resource/%d\" x\nlet parsed : int option = route1 \"/api/resource/1\""},{"uri":"/FSharpPlustype-endo.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlustype-reader.html","title":"Reader<'R,'T>\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nReader<'R,'T>\n=============\n\nThe Reader monad is good for computations which read values from a shared environment.\n\nRelated Types\n------------\n\n - [State](type-state.html): Similar, but it allows you to modify the environment.\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\nopen System\nopen FSharpPlus\nopen FSharpPlus.Data\n(**\nSample from [The Reader monad on Haskell Wiki](https://wiki.haskell.org/All_About_Monads#The_Reader_monad)\n*)\n/// This the abstract syntax representation of a template\ntype Template =\n    /// Text\n    | T of string\n    /// Variable\n    | V of Template\n    /// Quote\n    | Q of Template\n    /// Include\n    | I of Template*(Definition list)\n    /// Compound\n    | C of Template list\nand Definition = | D of Template*Template\n\n/// Our environment consists of an association list of named templates and\n/// an association list of named variable values.\ntype Environment = {templates: Map<string,Template>\n                    variables: Map<string,string>}\n\n/// lookup a variable from the environment\nlet lookupVar (name:string) (env:Environment) : string option = tryItem name env.variables\n\n/// lookup a template from the environment\nlet lookupTemplate (name:string) (env:Environment) : Template option = tryItem name env.templates\n\n/// add a list of resolved definitions to the environment\nlet addDefs (defs:(string*string) list) env = { env with variables = plus (Map.ofList defs) env.variables}\n\n/// resolve a template into a string\nlet rec resolve : Template -> Reader<Environment,string>  = function \n                       | T s -> result s\n                       | V t -> monad {\n                                   let! varName = resolve t\n                                   let! env = ask\n                                   let varValue = lookupVar varName env\n                                   return option id \"\" varValue }\n                        | Q t -> monad {\n                                   let! tmplName = resolve t\n                                   let! env = ask\n                                   let body = lookupTemplate tmplName env\n                                   return option string \"\" body }\n                        | I (t,ds) -> monad {\n                                    let! tmplName = resolve t\n                                    let! env = ask\n                                    let body = lookupTemplate tmplName env\n                                    match body with\n                                    | Some t' ->\n                                                let! defs = List.traverse resolveDef ds\n                                                return! local (addDefs defs) (resolve t')\n                                    | None -> return \"\"\n                                    }\n                        | C ts   -> monad {\n                                      let! resolved = List.traverse resolve ts\n                                      return String.Concat<string> resolved\n                                    }\nand\n   /// resolve a Definition and produce a (name,value) pair\n   resolveDef: Definition -> Reader<Environment,string*string> = \n                                      function \n                                      | D (t,d) -> monad {\n                                        let! name = resolve t\n                                        let! value = resolve d\n                                        return (name,value) }"},{"uri":"/FSharpPlusgeneric-doc.html","title":"Generic operators and functions\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\nopen FSharpPlus\n\n(**\nGeneric operators and functions\n===============================\n\nAfter reviewing [extension functions](extensions.html) it's natural to want to\nuse generic functions that can work across different types.\n\nF#+ implements generic functions that efficiently call out to specific\nimplementations. This handles existing .Net and F# types, and you can use them\non your own and third-party types by implementing expected method names\nand signatures.\n\nRead about the specific operators:\n\n * Docs on [Operators - Common Combinators](operators-common.html)\n * Other docs exist for each [abstraction](abstractions.html)\n * API Doc for [Generic functions and operators](reference/operators.html)\n\nThey're particularly useful in that the specific function called will\ndepend on the input arguments and return type. However, this means you\nsometimes need to explicitly specify the type if this information is\nnot available (actually it's a good debug technique to temporarily add\nthe types explicitly when the compiler tells you that the types are wrong).\n\nFor example:\n*)\n\n// Convert the number 42 to bytes... \n// ... here the type is known (42 is an int, the return value is byte[])\nlet a = 42 |> toBytes;;  \n//val a : byte [] = [|42uy; 0uy; 0uy; 0uy|]\n\n// However, this can't compile since the return type is not inferrable\n// let b = [|42uy; 0uy; 0uy; 0uy|] |> ofBytes;;  \n\n// The error will be something like:\n// \n//  let b = [|42uy; 0uy; 0uy; 0uy|] |> ofBytes;;\n//  -----------------------------------^^^^^^^\n//\n// error FS0071: Type constraint mismatch when applying the default type 'obj'\n// for a type inference variable. No overloads match for method 'OfBytes'.\n// The available overloads are shown below. Consider adding further type constraints\n\n// [followed by many possible implementations...]\n\n// So, in this case, we have to give the return type:\nlet b :int = [|42uy; 0uy; 0uy; 0uy|] |> ofBytes;;\n// val b : int = 42\n\n// ...or, the more usual case, you use in context where type can be inferred,\n// like this example:\n1 + ([|42uy; 0uy; 0uy; 0uy|] |> ofBytes);;\n//val it : int = 43\n\n(**\nHow do generic functions work?\n==============================\n\nF# does not support overloaded functions, but it does support overloaded\nmethods on types (classes) - including static methods. F#+ takes\nadvantage of this by definining generic functions that call out to\nan internal class (referred to as an \"Invokable\") where various overloaded \nstatic methods are defined.\n\nAn Invokable is written such that the most specific, and hence, optimised\noverload is resolved for existing .Net and F# types, and that a more general\nimplementation is used otherwise.\n\nWhat does this all mean?\n\nIt means care is taken to use the most optimised implementation, and you can\nimplement your own instances of generic functions if you implement the required\nmethods.\n\nExamples\n========\n\nHere are some examples of the generic ``map`` operation over existing .NET and F# types:\n\n*)\n\n\nmap string [|2;3;4;5|]\n// val it : string [] = [|\"2\"; \"3\"; \"4\"; \"5\"|]\n\nmap ((+) 9) (Some 3)\n// val it : int option = Some 12\n\nlet res12 = map ((+) 9) (async {return 3})\n// val it : Async<int> = Microsoft.FSharp.Control.FSharpAsync`1[System.Int32]\nextract res12\n// val it : int = 12\n\n(**\nHere are some examples with types defined in this library:\n*)\n\nopen FSharpPlus.Data\n\nmap string (NonEmptyList.create 2 [3;4;5])\n// val it : NonEmptyList<string> = {Head = \"2\"; Tail = [\"3\"; \"4\"; \"5\"];}\n\nlet stateFul42 = map string (State (fun x -> (42, x)))\nState.run stateFul42 \"state\"\n// val stateFul42 : State<string,string> = State <fun:map@12-9>\n// val it : string * string = (\"42\", \"state\")\n\n(**\nNow let's define our own type with its own map definition\n*)\n\ntype Tree<'t> =\n    | Tree of 't * Tree<'t> * Tree<'t>\n    | Leaf of 't\n    static member Map (x:Tree<'a>, f) = \n        let rec loop f = function\n            | Leaf x -> Leaf (f x)\n            | Tree (x, t1, t2) -> Tree (f x, loop f t1, loop f t2)\n        loop f x\n\nmap ((*) 10) (Tree(6, Tree(2, Leaf 1, Leaf 3), Leaf 9))\n// val it : Tree<int> = Tree (60,Tree (20,Leaf 10,Leaf 30),Leaf 90)\n\n(**\n\nFor a type defined in an external library it will work when it contains a static member matching the expected name and signature.\n\nHere's an example of the generic function ``fromBigInt`` targeting a type defined in the MathNet library\n*)\n#r \"../../packages/docs/MathNet.Numerics/lib/net40/MathNet.Numerics.dll\"\n#r \"../../packages/docs/MathNet.Numerics.FSharp/lib/net45/MathNet.Numerics.FSharp.dll\"\n\nlet x : MathNet.Numerics.BigRational = fromBigInt 10I"},{"uri":"/FSharpPlustype-identity.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlusabstraction-applicative.html","title":"Applicative\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nApplicative\n===========\nA functor with application, providing operations to embed pure expressions (``return``), and sequence computations and combine their results (``<*>``).\n___\nMinimal complete definition\n---------------------------\n * ``return x``/``result x`` \n * ``(<*>) f x``\n*)\n(**\n    static member Return (x:'T) : 'Applicative<'T>\n    static member (<*>) (f: 'Applicative<'T->'U>, x: 'Applicative<'T>) : 'Applicative<'U>\n*)\n(**\nNote: ``return`` can't be used outside computation expressions, use ``result`` instead.\n\n\nOther operations\n----------------\n\n* ``lift2``\n*)\n(**\n   static member Lift2 (f: 'T1->'T2->'T, x1: 'Applicative<'T1>, x2: 'Applicative<'T2>) : 'Applicative<'T>\n*)\n(**\n\n\nRules\n-----\n*)\n(**\n    result id <*> v = v\n    result (<<) <*> u <*> v <*> w = u <*> (v <*> w)\n    result f <*> result x = result (f x)\n    u <*> result y = result ((|>) y) <*> u\n*)\n(**\nRelated Abstractions\n--------------------\n - [Functor](abstraction-functor.html): An applicative is a functor whose ``map`` operation can be splitted in ``return`` and ``(<*>)`` operations,\n \n - [Monad](abstraction-monad.html) : Monads are functors with an additional ``Join`` operation,\nConcrete implementations\n------------------------\nFrom F#\n \n -  ``seq<'T>``\n -  ``list<'T>``\n -  ``array<'T>``\n -  ``'T [,]``\n -  ``'T [,,]``\n -  ``'T [,,,]``\n -  ``option<'T>`` \n -  ``IObservable<'T>``\n -  ``Lazy<'T>``\n -  ``Async<'T>``\n -  ``Result<'T,'U>`` \n -  ``Choice<'T,'U>``\n -  ``KeyValuePair<'Key,'T>``\n -  ``'Monoid * 'T``\n -  ``Task<'T>``\n -  ``'R->'T``\n -  ``Expr<'T>``\n -  ``ResizeArray<'T>``\n \nFrom F#+\n\n -  [``Identity<'T>``](type-identity.html)\n -  [``Cont<'R,'T>``](type-cont.html)\n -  [``ContT<'R,'T>``](type-contt.html)\n -  [``Reader<'R,'T>``](type-reader.html)\n -  [``ReaderT<'R,'Monad<'T>>``](type-readert.html)\n -  [``Writer<'Monoid,'T>``](type-writer.html)\n -  [``WriterT<'Monad<'T * 'Monoid>>``](type-writert.html)\n -  [``State<'S,'T * 'S>``](type-state.html)\n -  [``StateT<'S,'Monad<'T * 'S>>``](type-statet.html)\n -  [``OptionT<'Monad<option<'T>>``](type-optiont.html)\n -  [``SeqT<'Monad<seq<'T>>``](type-seqt.html)\n -  [``ListT<'Monad<list<'T>>``](type-listt.html)\n -  [``ResultT<'Monad<Result<'T,'TError>>``](type-resultt.html)\n -  [``ChoiceT<'Monad<Choice<'T,'TError>>``](type-choicet.html)\n -  [``Free<'Functor<'T>,'T>``](type-free.html)\n -  [``NonEmptyList<'T>``](type-nonempty.html)\n -  [``Validation<'Error,'T>``](type-validation.html)\n -  [``ZipList<'T>``](type-ziplist.html)\n -  [``ParallelArray<'T>``](type-parallelarray.html)\n -  [``Const<'C,'T>``](type-const.html)\n -  [``Compose<'ApplicativeF<'ApplicativeG<'T>>>``](type-compose.html)\n -  [``DList<'T>``](type-dlist.html)\n -  [``Vector<'T,'Dimension>``](type-vector.html)\n -  [``Matrix<'T,'Rows,'Columns>``](type-matrix.html)\n \nRestricted:\n -  ``string``\n -  ``StringBuilder``\n -  ``Set<'T>``\n -  ``IEnumerator<'T>``\n\n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\n// Apply +4 to a list\nlet lst5n6  = map ((+) 4) [ 1;2 ]\n\n// Apply +4 to an array\nlet arr5n6  = map ((+) 4) [|1;2|]\n\n// I could have written this\nlet arr5n6' = (+) <!> [|4|] <*> [|1;2|]\n\n// Add two options\nlet opt120  = (+) <!> Some 20 <*> tryParse \"100\"\n\n\n// Applicatives need Return (result)\n\n// Test return\nlet resSome22 : option<_> = result 22\nlet resSing22 : list<_>   = result 22\nlet resLazy22 : Lazy<_>   = result 22\nlet (quot5 : Microsoft.FSharp.Quotations.Expr<int>) = result 5\n\n// Example\ntype Person = { name: string; age: int } with static member create n a = {name = n; age = a}\n\nlet person1 = Person.create <!> tryHead [\"gus\"] <*> tryParse \"42\"\nlet person2 = Person.create <!> tryHead [\"gus\"] <*> tryParse \"fourty two\"\nlet person3 = Person.create <!> tryHead [\"gus\"] <*> (tryHead [\"42\"] >>= tryParse)\n\n\n// Other ways to write applicative expressions\n\n\n// Function lift2 helps in many cases\n\nlet person1' = (tryHead [\"gus\"], tryParse \"42\")               ||> lift2 Person.create \nlet person2' = (tryHead [\"gus\"], tryParse \"fourty two\")       ||> lift2 Person.create \nlet person3' = (tryHead [\"gus\"], tryHead [\"42\"] >>= tryParse) ||> lift2 Person.create \n\n\n// Using Idiom brackets from http://www.haskell.org/haskellwiki/Idiom_brackets\n\nopen FSharpPlus.Builders\n\nlet res3n4   = iI ((+) 2) [1;2] Ii\nlet res3n4'  = iI (+) (result 2) [1;2] Ii\nlet res18n24 = iI (+) (ZipList(seq [8;4])) (ZipList(seq [10;20])) Ii\n\nlet tryDiv x y = if y = 0 then None else Some (x </div/> y)\nlet resSome3   = join (iI tryDiv (Some 6) (Some 2) Ii)\nlet resSome3'  =       iI tryDiv (Some 6) (Some 2) Ji\n\nlet tryDivBy y = if y = 0 then None else Some (fun x -> x </div/> y)\nlet resSome2  = join (result tryDivBy  <*> Some 4) <*> Some 8\nlet resSome2' = join (   iI tryDivBy (Some 4) Ii) <*> Some 8\n\nlet resSome2'' = iI tryDivBy (Some 4) J (Some 8) Ii\nlet resNone    = iI tryDivBy (Some 0) J (Some 8) Ii\nlet res16n17   = iI (+) (iI (+) (result 4) [2; 3] Ii) [10] Ii\n\nlet opt121  = iI (+) (Some 21) (tryParse \"100\") Ii\nlet opt122  = iI tryDiv (tryParse \"488\") (trySqrt 16) Ji\n\n\n// Using applicative math operators\n\nopen FSharpPlus.Math.Applicative\n\nlet opt121'  = Some 21 .+. tryParse \"100\"\nlet optTrue  = 30 >. tryParse \"29\"\nlet optFalse = tryParse \"30\" .< 29\nlet m1m2m3 = -.[1;2;3]\n\n\n\n\n// Composing applicatives\n\nlet res4 = (+) <!> Compose [Some 3] <*> Compose [Some 1]\n\nlet getName s = async { return tryHead s }\nlet getAge  s = async { return tryParse s }\n\nlet person4 = Person.create <!> Compose (getName [\"gus\"]) <*> Compose (getAge \"42\")\n\n\n\n\n\n\n// A Monad is automatically an Applicative\n\ntype MyList<'s> = MyList of 's seq with\n    static member Return (x:'a)     = MyList (Seq.singleton x)\n    static member (>>=)  (MyList x: MyList<'T>, f) = MyList (Seq.collect (f >> (fun (MyList x) -> x)) x)\n\nlet mappedMyList : MyList<_> = (MyList [(+) 1;(+) 2;(+) 3]) <*> (MyList [1;2;3])"},{"uri":"/FSharpPlustype-matrix.html","title":"Matrix<'NumType,'Rows,'Cols>\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nMatrix<'NumType,'Rows,'Cols>\n========================================\n\nThis is a fixed size matrix of a (typically) numeric type.\n\nRelated Tyes\n------------\n\n - [Vector](type-vector.html): Similar but for vectors\n \n\n\n\nAbstractions\n------------\n\n -  [Semigroup](abstraction-semigroup.html)\n -  [Monoid](abstraction-monoid.html)\n -  [Functor](abstraction-functor.html)\n -  [Applicative](abstraction-applicative.html)\n\n\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\nlet matrix3x4_1 =\n    matrix (\n      (1, 0, 0, 0),\n      (0, 1, 0, 0),\n      (0, 0, 0, 0)\n    )\n\nlet matrix3x4_2 =\n    matrix (\n      (10, 0, 100, 0),\n      (30, 1, 100, 0),\n      (60, 0, 100, 0)\n    )\n\n\n// Add two matrices\n\nlet matrix3x4_sum = matrix3x4_1 + matrix3x4_2\n\n\n// Add a scalar\n\nlet matrix3x4_3 = matrix3x4_1 + result 5\n\n\n// Another way\n\nopen FSharpPlus.Math.Generic\n\nlet vector3d_4 = matrix3x4_1 + 5G"},{"uri":"/FSharpPlustype-mult.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlustype-const.html","title":"Const<'T,'U>\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nConst<'T,'U>\n============\n\nThe Const functor, defined as Const&lt;&#39;T, &#39;U&gt; where &#39;U is a phantom type. Useful for: Lens getters Its applicative instance plays a fundamental role in Lens.\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Lens\nopen FSharpPlus.Data\n// note for instance the definition of view (from the Lens part of F#+):\nlet view (optic: ('a -> Const<_,'b>) -> _ -> Const<_,'t>) (source: 's) : 'a = Const.run (optic Const source)"},{"uri":"/FSharpPlustypes.html","title":"Types\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\n\nTypes\n=====\n\nClick on the type name for a full description:\n\n \n * [All](type-all.html)\n * [Any](type-any.html)\n * [ChoiceT](type-choicet.html)\n * [Compose](type-compose.html)\n * [Const](type-const.html)\n * [Cont](type-cont.html)\n * [ContT](type-contt.html)\n * [Coproduct](type-coproduct.html)\n * [DList](type-dlist.html)\n * [Dual](type-dual.html)\n * [Endo](type-endo.html)\n * [First](type-first.html)\n * [Free](type-free.html)\n * [Identity](type-identity.html)\n * [Kleisli](type-kleisli.html)\n * [Last](type-last.html)\n * [ListT](type-listt.html)\n * [Mult](type-mult.html)\n * [NonEmptyList](type-nonempty.html)\n * [OptionT](type-optiont.html)\n * [ParallelArray](type-parallelarray.html)\n * [Reader](type-reader.html)\n * [ReaderT](type-readert.html)\n * [ResultT](type-resultt.html)\n * [SeqT](type-seqt.html)\n * [State](type-state.html)\n * [StateT](type-statet.html)\n * [Validation](type-validation.html)\n * [Writer](type-writer.html)\n * [WriterT](type-writert.html)\n * [ZipList](type-ziplist.html)\n*)"},{"uri":"/FSharpPlustype-nonempty-set.html","title":"NonEmptySet<'T>\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nNonEmptySet<'T>\n================\n\nA type-safe set that contains at least one element.\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\n(**\n### Constructing NonEmptySet\n*)\n// you can construct a NonEmptySet by using NonEmptySet.Create\nlet set123 = NonEmptySet.Create(1, 2, 3)\n\nlet set4 = NonEmptySet.singleton 4\nlet set4' : NonEmptySet<int> = result 4\n\n// union two NonEmptySets\nlet set1234 = NonEmptySet.union set123 set4\n\n// in order to get back to a regular set you can then use NonEmptySet.toSet:\nlet set1234' = NonEmptySet.toSet set1234\n\n\n(**\n### Operations on NonEmptySet\n*)\n\nlet set12345 = set1234 |> NonEmptySet.add 5\n\nlet set12345' = NonEmptySet.unionMany (NonEmptyList.create set123 [set4; result 5])\n\nprintfn \"%b\" (NonEmptySet.isSubset set1234 set12345)\n\n"},{"uri":"/FSharpPlustype-statet.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlustype-resultt.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlusoperators-common.html","title":"Operators - Common Combinators\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\nopen FSharpPlus\n\n(**\n# Operators - Common Combinators\n\nThese generic functions and operators are used commonly and are not part\nof any other abstraction.\n\nYou can find these in the API docs: [Operators.fs](reference/operators.html)\n\n## flip\n\nCreates a new function with first two arguments flipped.\n\n\n## konst\n\nCreate a function that always returns the given argument.\nThis is known as a 'constant' function.\n\nThis is commonly useful where a function is required as a parameter\nfor flexibility, but isn't required in a specific instance.\n\nexample:\n*)\nlet a = [1;2;3] |> filter (konst true);; \n// val a : int list = [1; 2; 3]\n\n(**\n## curry, uncurry, curryN, uncurryN\n\nCurrying is the process of taking a function expecting a tuple, and returning a\nfunction with the same number of arguments as the tuple size.\n\nUncurrying is the reverse process.\n\nThere is `curry` and `uncurry` that work on two arguments each, while `curryN`\nand `uncurryN` work on any number.\n\nexample:\n*)\nlet addThreeNums (x, y, z) = x + y + z;;\n// val addThreeNums : x:int * y:int * z:int -> int\n\nlet b = curryN addThreeNums 1 2 3;;\n// val it : int = 6\n\n(**\n## Functions as operators - </ />\n\nA pair of operators `</` and `/>` are defined to allow any function to be used as\nan operator. It will flip the args of your function so that it makes sense when\nthe first argument is coming from the left-hand-side.\n\nexample:\n*)\nlet biggerThan a b = a > b;;\n// val biggerThan : a:'a -> b:'a -> bool when 'a : comparison\n\nlet c = 10 </biggerThan/> 3;;\n// val c : bool = true\n\n(**\n## tap\n\nTap executes a side-effect function, then returns the original input value.\nConsider this as 'tapping into' a chain of functions.\n\nexample:\n*)\n// a pipeline of functions, with a tap in the middle\nlet names = [\"John\"; \"Smith\"]\nnames |> map String.toUpper |> tap (printfn \"%A\") |> map String.toLower;;\n\n// prints this:\n// [\"JOHN\"; \"SMITH\"]\n\n// but returns this:\n// val it : string list = [\"john\"; \"smith\"]\n\n(**\n## either\n\nExtracts the value inside a Result from either side - whether Ok or Error.\n\nIt takes a pair of functions:\n\n * fOk - a function applied to the source if it contains an Ok value\n * fError - a function applied to the source if it contains an Error value\n\n...and the source:\n\n * source - the source value containing an Ok or Error\n\n*)\nlet myResult = Ok \"I am ok!\";;\n// val myResult : Result<string,'a>\n\nlet myOther = Error -1;;\n// val myOther : Result<'a,int>\n\nlet d = either id id myResult;;\n// val d : string = \"I am ok!\"\n\nlet e = either id id myOther;;\n// val e : int = -1\n\n(**\nDon't confuse the `either` function with `result` which lifts a value into a\nFunctor, just like `return` when in a computation expression.\n\n\n## option\n\nTakes a function, a default value and a option value. If the option value is None, the function returns the default value.\nOtherwise, it applies the function to the value inside Some and returns the result.\n*)\nlet inline option f n = function Some x -> f x | None -> n\n\n(**\n\n## tuple2, tuple3, ...tuple8\n\nFunctions that generate a tuple. The number indicates the number of arguments\nthat are defined, and the corresponding size of tuple.\n\n*)\nlet inline tuple2 a b             = a,b\nlet inline tuple3 a b c           = a,b,c\nlet inline tuple4 a b c d         = a,b,c,d\nlet inline tuple5 a b c d e       = a,b,c,d,e\nlet inline tuple6 a b c d e f     = a,b,c,d,e,f\nlet inline tuple7 a b c d e f g   = a,b,c,d,e,f,g\nlet inline tuple8 a b c d e f g h = a,b,c,d,e,f,g,h\n\n\n(**\n## Explicit\n\nExplicit allows you to use `explicit` generic method for standard types and types that implement the static explicit type cast signature.\n\n### Minimal definition\n\nIn order to use the `explicit` generic method together with a type it needs to implement the following:\n*)\n\n(**\n```f#\nstatic member op_Explicit (x:'r) :'T\n```\nor in C#\n```c#\npublic static explicit operator T(R s)\n```\n\nThis is useful when dealing with C# libraries that make heavy use of explicit conversions.\n*)\n\n(**\n## Implicit\n\nImplicit allows you to use `implicit` generic method for standard types and types that implement the static implicit type cast signature.\n\n### Minimal definition\n\nIn order to use the `implicit` generic method together with a type it needs to implement the following:\n*)\n\n(**\n```f#\nstatic member op_Implicit (x:'r) :'T\n```\nor in C#\n```c#\npublic static implicit operator T(R s)\n```\n\nThis is useful when dealing with C# libraries that make heavy use of implicit conversions.\n*)"},{"uri":"/FSharpPlustype-kleisli.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlusabstraction-profunctor.html","title":"Profunctor\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nProfunctor\n==========\n\nA bifunctor that is a contravariant in the first argument and covariant in the second.\n\n___\n\n\n\nMinimal complete definition\n---------------------------\n\n\n * ``dimap f g x``\n*)\n(**\n    static member Dimap (x:'Profunctor<'T,'V>, f:'U->'T, g:'V->'W) :'Profunctor<'U,'W>\n*)\n(**\n\n\nOther operations\n----------------\n\n * ``lmap f x``\n*)\n(**\n    static member Contramap (x:Profunctor<'T,'V>, f:'U->'T) :'Profunctor<'U,'V>\n*)\n(**\n\n * ``rmap g x``\n*)\n(**\n    static member Map (x:Profunctor<'T,'V>, f:'V->'W) :'Profunctor<'T,'W>\n*)\n(**\n\n\n\n\nRules\n-----\n*)\n(**\n    dimap id id = id\n    dimap (h' << h) (f << f') = dimap h f << dimap h' f'\n*)\n(**\n\n\nRelated Abstractions\n--------------------\n\n - [Functor](abstraction-functor.html): All profunctors are also functors over the second parameter.\n\n\nConcrete implementations\n------------------------\n\nFrom .Net/F#\n \n -  ``('T -> 'U)``\n -  ``Func<'T,'U>``\n\nFrom F#+\n\n -  [``Kleisli<'T, 'Monad<'U>>``](type-kleisli.html)\n\n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n\nExamples\n--------\n*)\n\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen System\nopen FSharpPlus\nopen FSharpPlus.Data\nopen FSharpPlus.Math.Generic\n\nmodule Predicate = let run (p: Predicate<_>) x = p.Invoke (x)\n\nlet isEven       = Predicate (fun x -> x % 2 = 0)\n\nlet resStrFalse  = dimap int string (Predicate.run isEven) 99.0\n\n\nlet lx x = Char.GetNumericValue x + 100.\nlet rx x = string (x + 100)\nlet kl = Kleisli (fun (y:float) -> [int y; int y * 2 ; int y * 3])\n\nlet resl = lmap lx kl\nlet r105n210n315 = Kleisli.run resl '5'\nlet resr = rmap rx kl\nlet r105n110n115 = Kleisli.run resr 5.0\nlet resd = dimap lx rx kl\nlet r205n310n415 = Kleisli.run resd '5'"},{"uri":"/FSharpPlustype-all.html","title":"All\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nAll\n===\n\nThis is a wrapper type for booleans, with a specific set of monoidal operations.\nThe contained bools would become true only if both (all) operands are true.\n\nRelated Types\n------------\n\n - [Any](type-any.html): Similar wrapper, but using the 'any' criteria.\n\n\nAbstractions\n------------\n\n -  [Semigroup](abstraction-semigroup.html)\n -  [Monoid](abstraction-monoid.html)\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\nlet res1 = All true ++ zero ++ All false\n// val res1 : All = All false\n\nlet even x = x % 2 = 0\n\nlet res2 = [2;4;6;7;8] |> map (even >> All) |> sum\n// val res2 : All = All false"},{"uri":"/FSharpPlustype-last.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlustype-coproduct.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlusabstractions.html","title":"Abstractions\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\n\nAbstractions\n============\n\nThe following diagram illustrates some common FP abstractions that can be represented with this library and the relationships between them.\n\nClick on the abstraction name for a full description:\n\n<object style=\"width: 100%\" data=\"//www.plantuml.com/plantuml/svg/{plantUMLDiag}\" type=\"image/svg+xml\"></object>\n \n\nSome more abstractions [here](abstraction-misc.html).\n\n*)"},{"uri":"/FSharpPlustype-contt.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlusapplicative-functors.html","title":"Functors and Applicatives\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nFunctors and Applicatives\n=========================\n\n*)\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\nopen FSharpPlus\n\n(**\n\nYou may run this script step-by-step\nThe order of execution has to be respected since there are redefinitions of functions and operators\n\n\nFunctors\n========\n\nThe intuitive definition is that a Functor is something you can map over.\n\nSo they all have a ``map`` operation which is their minimal definition.\n\nMost containers are functors\n*)\n\nlet r01 = List.map   (fun x -> string (x + 10)) [ 1;2;3 ]\nlet r02 = Array.map  (fun x -> string (x + 10)) [|1;2;3|]\nlet r03 = Option.map (fun x -> string (x + 10)) (Some 5)\n\n(**\nYou can think of the Option functor as a particular case of a List that can be either empty or with just 1 element.\n\nWe could have used the generic function ``map`` from this library which works on any functor.\n\n*)\n\nlet r01' = map (fun x -> string (x + 10)) [ 1;2;3 ]\nlet r02' = map (fun x -> string (x + 10)) [|1;2;3|]\nlet r03' = map (fun x -> string (x + 10)) (Some 5)\n\n(** Now let's define a simple type and make it a functor by adding a ``Map`` static method *)\n\ntype Id<'t> = Id of 't with\n    static member Map (Id x, f) = Id (f x)\n\nlet r04 = map (fun x -> string (x + 10)) (Id 5)\n\n(**\nMost computations are also functors\n\nHere's an example with Async functions\n*)\n\nlet async5 = async.Return 5\nlet r05  = map (fun x -> string (x + 10)) async5\nlet r05' = Async.RunSynchronously r05\n\n\n(** But even plain functions are functors *)\n\nlet r06  = map (fun x -> string (x + 10)) ((+) 2)\nlet r06' = r06 3\n\n(**\nFor functions ``map`` is equivalent to ``(<<)`` this means that mapping over a function is the same as composing the functions with the mapper\n\nA List functor can be thought of as a function which takes an integer index to return a value: ``f: Naturals -> 't``\nSo, you can think of ``map`` on a List functor as composing a function:\n\n**)\nlet listFunc = function 0 -> 1 | 1 -> 2 | 2 -> 3 // [1;2;3]\nlet r01'' = map (fun x -> string (x + 10)) listFunc\n\n(**\nWhat about tuples?\n**)\n\nmodule TupleFst = let map f (a,b) = (f a, b)\nmodule TupleSnd = let map f (a,b) = (a, f b)\n\nlet r07 = TupleFst.map (fun x -> string (x + 10)) (5, \"something else\")\nlet r08 = TupleSnd.map (fun x -> string (x + 10)) (\"something else\", 5)\n\n(**\nSo there is more than one way to define a functor with tuples.\nThe same applies to the Discriminated Union of 2 types.\n*)\n\n// DUs\nmodule ChoiceFst = let map f = function Choice1Of2 x -> Choice1Of2 (f x) | Choice2Of2 x -> Choice2Of2 x\nmodule ChoiceSnd = let map f = function Choice2Of2 x -> Choice2Of2 (f x) | Choice1Of2 x -> Choice1Of2 x\n\nlet choiceValue1:Choice<int,string> = Choice1Of2 5\nlet choiceValue2:Choice<int,string> = Choice2Of2 \"Can't divide by zero.\"\n\nlet r09  = ChoiceFst.map (fun x -> string (x + 10)) choiceValue1\nlet r09' = ChoiceFst.map (fun x -> string (x + 10)) choiceValue2\n\nlet r10  = ChoiceSnd.map (fun x -> \"The error was: \" + x) choiceValue1\nlet r10' = ChoiceSnd.map (fun x -> \"The error was: \" + x) choiceValue2\n\n\n(** Tree as a functor *)\n\ntype Tree<'a> =\n    | Tree of 'a * Tree<'a> * Tree<'a>\n    | Leaf of 'a\n\nmodule Tree = let rec map f = function \n                | Leaf x        -> Leaf (f x) \n                | Tree(x,t1,t2) -> Tree(f x, map f t1, map f t2)\n\nlet myTree = Tree(6, Tree(2, Leaf 1, Leaf 3), Leaf 9)\n\nlet r11 = Tree.map (fun x -> string (x + 10)) myTree\n\n(**\nQ: is String a Functor?\n*)\n\nlet r12 = String.map (fun c -> System.Char.ToUpper(c)) \"Hello world\"\n\n(**\nA: Kind of, but we can't change the wrapped type. We're stick to ('a->'a) -> C<'a> -> C<'a> \n   if we assume 'a = char and C<'a> = String\n\n\nFinally there are some laws:\n\n - ``map id = id``\n - ``map (f >> g) = map f >> map g``\n\n\n\nLimitations:\n\nWe can define ``map2`` then ``map3``  then ..  ``mapN`` ?\n\n*)\n\ntype Option<'T> with\n    static member map2 f x y = \n        match x, y with\n        | Some x, Some y -> Some (f x y)\n        | _              -> None\n\n    static member map3 f x y z = \n        match x, y, z with\n        | Some x, Some y, Some z -> Some (f x y z)\n        | _                      -> None\n\nlet r13 = Option.map2 (+) (Some 2) (Some 3)\n\nlet r14 = List.map2 (+) [1;2;3] [10;11;12]\n\nlet add3 a b c = a + b + c\n\nlet r15 = Option.map3 add3 (Some 2) (Some 2) (Some 1)\n\n(**\n\nQuestion: Is it possible to generalize to mapN?\n\n\nApplicative Functors\n====================\n\nWhat if we split ``map`` in 2 steps?\n\n*)\n\n// map ('a -> 'b) -> C<'a> -> C<'b>\n//     \\--------/    \\---/    \\---/\n//         (a)        (b)      (c)\n//\n// 1)    ('a -> 'b)        ->  C<'a -> 'b>\n//       \\--------/            \\---------/\n//           (a)                      \n//               \n// 2)  C<'a -> 'b> -> C<'a>  ->   C<'b>\n//     \\---------/    \\---/       \\---/\n//                     (b)         (c)\n//\n//\n// step1   ('a -> 'b)        ->  \"C<'a -> 'b>\"      Put the function into a context C\n// step2 \"C<'a -> 'b>\" C<'a> ->   C<'b>             Apply the function in a context C to a value in a context C\n\n(** Here's an example with Options *)\n\nlet step1 f = Some f\nlet step2 a b = \n    match a, b with\n    | Some f, Some x -> Some (f x)\n    | _              -> None\n\nlet r16 = step1 (fun x -> string (x + 10))\nlet r17 = step2 r16 (Some 5)\n\n    \n(** So now instead of writing: *)\n\nlet r18  = Option.map (fun x -> string (x + 10)) (Some 5)\n\n(** we write *)\n\nlet r18' = step2 (step1 (fun x -> string (x + 10))) (Some 5)\n\n    \n(** and instead of ``map2`` like this: *)\nlet r19   = Option.map2 (+) (Some 2) (Some 3)\n\n(** we write *)\nlet r19i  = step2 (step1 (+)) (Some 2)\n(** .. and finally *)\nlet r19' = step2 r19i (Some 3)\n(** by applying ``step2`` again. We can apply ``step2`` again if the result is still a function in a container, just like partial application.\n\n\nlets give names to ``step1`` and ``step2``: ``pure`` and ``<*>`` *)\n\nmodule OptionAsApplicative =\n    let pure' x = Some x\n    let (<*>) a b = \n        match a, b with\n        | Some f, Some x -> Some (f x)\n        | _              -> None\n\nopen OptionAsApplicative\n\nlet r18''  = Option.map (fun x -> string (x + 10)) (Some 5)\n\nlet r18''' = Some (fun x -> string (x + 10)) <*> Some 5\n// analog to:\nlet r18'''' =     (fun x -> string (x + 10))          5\n\n\n(** Now with ``map3`` (and further with mapN) *)\n\nlet r20 = Option.map3 add3 (Some 2) (Some 2) (Some 1)\n\nlet r20'  = Some add3 <*> Some 2 <*> Some 2 <*> Some 1\n// analog to:\nlet r20''  =     add3          2          2          1\n\n\n(** but even without ``add3`` we can write ``1 + 2 + 2`` which is ``1 + (2 + 2)`` and the same as: *)\n\nlet r20'''  = (+) 1 ((+) 2 2)\n\n(** with options becomes: *)\nlet r20'''' = Some (+) <*> Some 1 <*> (Some (+) <*> Some 2 <*> Some 2)\n(** constrast it with *)\nlet r20'''''  =    (+)          1     (     (+)          2          2)\n\n(** we know ``apply`` is ``(<|)`` in F# *)\n\nlet r21     =      (+) <|       1 <|  (     (+) <|       2 <|       2)\nlet r21'    = Some (+) <*> Some 1 <*> (Some (+) <*> Some 2 <*> Some 2)\n\n(**\nSo at this point the name \"Applicative Functor\" should make sense\n    \nQ: Isn't it easier to do just ``Some ( (+) 1 ((+) 2 2) )`` ?\n   We get the same result in the end.\nA: Yes, in this particular case it's the same but what if instead of ``Some 1`` we have ``None``\n*)\n\nlet r22   = Some (+) <*> None <*> (Some (+) <*> Some 2 <*> Some 2)\n\n(**   \nThat's because we're applying functions inside a context.\n\nIt looks the same as applying outside but in fact some effects occurs behind the scenes.\n\nTo have a better idea let's move out of Option:\n*)\n\n[<AutoOpen>]\nmodule Async =\n    let pure' x = async.Return x\n    let (<*>) f x = async.Bind(f, fun x1 -> async.Bind(x, fun x2 -> pure'(x1 x2)))\n\n    \nlet r23   = async {return (+)} <*> async {return 2} <*> async {return 3}\n\nlet r23'  = pure' (+) <*> pure' 2 <*> pure' 3\n\n(** try ``Async.RunSynchronously r23'`` *)\n\nlet getLine = async { \n        let x = System.Console.ReadLine() \n        return  System.Int32.Parse x\n    }\n\nlet r24  = pure' (+) <*> getLine <*> getLine\n\n(** try ``Async.RunSynchronously r24`` *)\n\n\nmodule ListAsApplicative =\n    let pure' x = [x]        \n    let (<*>)  f x = List.collect (fun x1 -> List.collect (fun x2 -> [x1 x2]) x) f\n\n    (* here are two other possible implementations of (<*>) for List\n    let (<*>) f x = f |> List.map (fun f -> x |> List.map (fun x -> f x)) |> List.concat\n    let (<*>) f x= \n        seq {\n                for f in f do\n                for x in x do\n                yield f x} |> Seq.toList *)\n\nopen ListAsApplicative\n\nlet r25 =  List.map (fun x -> string (x + 10)) [1;2;3]\n\nlet r25'  =       [fun x -> string (x + 10)] <*> [1..3]\nlet r25'' = pure' (fun x -> string (x + 10)) <*> [1..3]\n\n\nlet r26 = [string; fun x -> string (x + 10)] <*> [1;2;3]\n\n(** So, for lists ``map2`` is equivalent to write: *)\n\nlet r27 = [(+)] <*> [1;2] <*> [10;20;30]\n\nlet r28 = [(+);(-)] <*> [1;2] <*> [10;20;30]\n\n\n    \nmodule SeqAsApplicative =\n    let pure' x = Seq.initInfinite (fun _ -> x)\n    let (<*>) f x = Seq.zip f x |> Seq.map (fun (f,x) -> f x)\n\nopen SeqAsApplicative\n\n\nlet r29 =  Seq.map (fun x -> string (x + 10))    (seq [1;2;3])          |> Seq.toList\nlet r29' =   pure' (fun x -> string (x + 10)) <*> seq [1;2;3]           |> Seq.toList\n    \nlet r30 = seq [(+);(-)] <*> seq [1;2] <*> seq [10;20;30]                |> Seq.toList  // compare it with r28\n\n\n(** An exotic case where there is no ``pure``. *)\n\nmodule MapAsApplicative = \n    let (<*>) (f:Map<'k,_>) x =\n        Map (seq {\n            for KeyValue(k, vf) in f do\n                match Map.tryFind k x with\n                | Some vx -> yield k, vf vx\n                | _       -> () })\n\n\nopen MapAsApplicative\n\nlet r31 = Map ['a',(+);'b',(-)] <*> Map ['a',1;'b',2] <*> Map ['a',10;'b',20;'c',30] \n\nlet r32 = Map ['c',(+);'b',(-)] <*> Map ['a',1;'b',2] <*> Map ['a',10;'b',20;'c',30] \n\n(**\n\nMonads\n======\n\n*)\n\nopen OptionAsApplicative    \n    \nlet a = Some 3\nlet b = Some 2\nlet c = Some 1\n\nlet half x = x / 2        \n\nlet f a b c =\n    let x = a + b\n    let y = half c\n    x + y\n\nlet f' a b c =\n    let x = Some (+)  <*> a <*> b\n    let y = Some half <*> c\n    Some (+) <*> x <*> y\n    \nlet r33 = f' (Some 1) (Some 2) (Some 3)\n\nlet r33' = f' None (Some 2) (Some 3)\n    \n(** OK, but if I want to use a function like: *)\nlet exactHalf x =\n    if x % 2 = 0 then Some (x / 2)\n    else None\n\n(** It doesn't fit *)\n\n// let f'' a b c =\n//     let x = Some (+) <*> a <*> b\n//     let y = Some exactHalf <*> c   // y will be inferred as option<option<int>>\n//     Some (+) <*> x <*> y           // so this will not compile\n\n\n(**\nThe problem is, we were working with ordinary functions.\nWhen we lift these function into C, we get functions wrapped in contexts.\nWith Applicatives we can use either a function in a context which is ready to use or an ordinary function, which we can lift easily with ``pure``.\n\nBut ``exactHalf`` is a different thing: its signature is ``int -> Option<int>``.\nThis function goes from a pure value to a value in a context, so either:\n\n1) we use it directly but we first need to extract the argument from the context.\n\n2) we use it in an Applicative, we will get a value in a context in another context, so we will need to flatten both contexts.\n\nMonad provides solutions to both alternatives\n*)\n\n// bind : C<'a> -> ('a->C<'b>) -> C<'b>\n// join : C<C<'a>> -> C<'a>\n\nmodule OptionAsMonad =\n    let join  x   = Option.bind id x\n    let (>>=) x f = Option.bind f x\n    // in monads pure' is called return, unit or result, but it's essentially the same function.\n    let return' x = Some x\n        \nopen OptionAsMonad        \n\n\n\nlet f'' a b c =\n    let x = Some (+) <*> a <*> b\n    let y = Some exactHalf <*> c |> join\n    Some (+) <*> x <*> y\n    \n\nlet f''' a b c =\n    let x = Some (+) <*> a <*> b\n    let y = c >>= exactHalf\n    Some (+) <*> x <*> y\n\n(** All monads are automatically applicatives, remember ``<*>`` for lists, it was:\n\n``let (<*>)  f x = List.collect (fun x1 -> List.collect (fun x2 -> [x1 x2]) x) f`` *)\n\n(** But ``List.collect`` is in fact ``bind``, and ``[x1 x2]`` is ``pure (x1 x2)`` *)\n\n// let (<*>) f x = f >>= (fun x1 -> x >>= (fun x2 -> pure' (x1 x2)))\n\n(**\n\nAnd this definition of ``<*>`` applies to all monads.\n\nQ: but we said all applicatives are functors, so monads should be functors as well, right?\nA: Yes, they are, and this is the general definition of ``map`` based on ``bind`` and ``result`` (aka return or pure)\n*)\n\nlet map f x = x >>= (pure' << f)\n\n(**\n\nRecommended links\n\nSame explanation but with pictures\nhttp://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html\n\nHaskell typeclasses\nhttp://www.haskell.org/haskellwiki/Typeclassopedia *)"},{"uri":"/FSharpPlusabstraction-alternative.html","title":"Alternative\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nAlternative\n===========\nApplicative Functors which also have a monoid structure.\n___\nMinimal complete definition\n---------------------------\n * ``return x``/``result x`` \n * ``(<*>) f x``\n * ``empty``\n * ``append x y``/``(<|>) x y``\n*)\n(**\n    static member Return (x:'T) : 'Alternative<'T>\n    static member (<*>) (f:'T->'U, x:Alternative<'T>) : Alternative<'U>\n    static member get_Empty () :'Alternative\n    static member (<|>) (x:'Alternative<'T>, y:'Alternative<'T>) :'Alternative<'T>\n*)\n(**\nNote: ``return`` can't be used outside computation expressions, use ``result`` instead.\nOther operations\n----------------\n * ``mfilter``\n*)\n(**\n    static member MFilter (x:seq<'Alternative>) :'Alternative\n*)\n(**\n * ``choice``\n*)\n(**\nRules\n-----\n*)\n(**\n    empty <|> x = x\n    x <|> empty = x\n    (x <|> y) <|> z = x <|> (y <|> z)\n    f <!> (x <|> y) = (f <!> x) <|> (f <!> y)\n    (f <|> g) <*> x = (f <*> x) <|> (g <*> x)\n    empty <*> f = empty\n*)\n(**\nRelated Abstractions\n--------------------\n - [Monoid](abstraction-monoid.html): An Alternative is a Monoid that is also an Applicative Functor\n - [Applicative](abstraction-applicative.html): An Alternative is a Monoid that is also an Applicative Functor\n - MonadPlus: Alternatives that are also Monads\nConcrete implementations\n------------------------\nFrom .Net/F#\n \n -  ``list<'T>``\n -  ``option<'T>``\n -  ``array<'T>``\n -  ``seq<'T>``\n \nFrom F#+\n \n -  [``ReaderT<'R, 'MonadPlus<'T>>``](type-readert.html)\n -  [``WriterT<'MonadPlus<'T * 'Monoid>>``](type-writert.html)\n -  [``StateT<'S,'MonadPlus<'T * 'S>>``](type-statet.html)\n -  [``Compose<'AlternativeF<'AlternativeG<'T>>>``](type-compose.html)\n -  [``DList<'T>``](type-dlist.html)\n -  [``ZipList<'S>``](type-ziplist.html)\n \n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n\nExamples\n--------\n*)\n\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\n\n// this gives [2; 3; 4; 5]\nlet x = [2;3] <|> [] <|> [4;5]\n\n// but I could have written\nlet y = [2;3] <|> empty <|> [4;5]\n\n// choice sample usage\nlet alternatives = [None; Some \"Result is OK\"; None ; Some \"Result is still OK\"]\nlet firstGood = choice alternatives //Some \"Result is OK\"\n\n// it did something like\nlet fstGood = None <|> Some \"Result is OK\" <|>  None <|> Some \"Result is still OK\"\n\n// mfilter usage\nlet fstMatch = mfilter ((=) 5) [1;2;3;4]    // [] -> no element found, it uses the empty value\n\n\n// MonadPlus\n\nlet getLine    = async { return System.Console.ReadLine() }\nlet putStrLn x = async { printfn \"%s\" x}\n\nlet nameAndAddress = traverse (fun x -> putStrLn x >>= fun _ -> getLine) [\"name\";\"address\"]\n\nlet a:list<int> = empty\nlet res123      = empty <|> [1;2;3]\n\nlet inline mfilter p ma = monad.plus {\n  let! a = ma\n  if p a then return a else return! empty}\n\nlet mfilterRes2 = mfilter ((=)2) (Some 2)\n\n// sample code from http://en.wikibooks.org/wiki/Haskell/MonadPlus\nlet pythags = monad {\n  let! z = [1..50]\n  let! x = [1..z]\n  let! y = [x..z]\n  do! guard (x*x + y*y = z*z)\n  return (x, y, z)}\n\n// same operation but using the monad.plus computation expression\nlet pythags' = monad.plus {\n  let! z = [1..50]\n  let! x = [1..z]\n  let! y = [x..z]\n  if (x*x + y*y = z*z) then return (x, y, z) else ()}\n\nlet allCombinations = sequence [['a'; 'b'; 'c']; ['1'; '2']]\n\n\n// An Alternative is automatically a Monoid and a Functor\n\ntype Maybe<'t> =\n    | Just of 't\n    | Nothing \n    with\n        static member Return (x:'a)     = Just x\n        static member (<*>) (f, x) = \n            match (f, x) with \n            | Just f, Just x -> Just (f x) \n            | _              -> Nothing\n        static member inline get_Empty () = Nothing\n        static member inline (<|>) (x, y) = match x with Nothing -> y | xs -> xs\n\nlet r5 = Nothing ++ Just 5 ++ Just 6 ++ zero\nlet r6 = map string (Just 6)\n\n\n// But not always the Monoidal behaviour is the same\n\nlet r3 = Some 2 ++ Some 1   // addition         => Some 3\nlet r2 = Some 2 <|> Some 1  // first success    => Some 2"},{"uri":"/FSharpPlusabstraction-foldable.html","title":"Foldable\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nFoldable\n========\n\nData structures that can be folded to a summary value.\n\n___\n\n\n\nMinimal complete definition\n---------------------------\n\n\n * ``toSeq x``\n*)\n(**\n    static member ToSeq (x:'Foldable<'T>) :seq<'T>\n*)\n(**\n\n\nOther operations\n----------------\n\n * ``foldMap``\n*)\n(**\n    FoldMap (x:'Foldable<'T>, f:'T->'Monoid)\n*)\n(**\n\n\nRules\n-----\n*)\n(**\n    foldMap (f >> g) = foldMap f >> g\n*)\n(**\n\n\nRelated Abstractions\n--------------------\n\n - [Monoid](abstraction-monoid.html)\n\n\nConcrete implementations\n------------------------\n\nFrom .Net/F#\n \n -  ``seq<'T>``\n -  ``list<'T>``\n -  ``'T []``\n -  ``option<'T>`` \n -  ``ResizeArray<'T>`` \n -  ``ReadOnlyCollection<'T>`` \n -  ``IReadOnlyCollection<'T>``\n -  ``IReadOnlyList<'T>``\n\n \nFrom F#+\n\n -  [``ZipList<'T>``](type-ziplist.html)\n -  [``NonEmptyList<'S>``](type-nonempty.html)\n -  [``DList<'T>``](type-dlist.html)\n\n\n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n\nExamples\n--------\n*)\n\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\nopen FSharpPlus.Control\n\nlet res1_Gt   = foldMap (compare 2) [1;2;3]\nlet resHelloW = foldMap (fun x -> Some (\"hello \" + x)) (Some \"world\")\n\nmodule FoldableTree =\n    type Tree<'a> =\n        | Empty \n        | Leaf of 'a \n        | Node of (Tree<'a>) * 'a * (Tree<'a>)\n\n        // add instance for Foldable class\n        static member inline FoldMap (t:Tree<_>, f) =\n            let rec loop x f =\n                match x with\n                | Empty          -> zero\n                | Leaf  n        -> f n\n                | Node (l, k, r) -> loop l f ++ f k ++ loop r f\n            loop t f\n        static member inline FoldBack (x:Tree<_>, f, z) = FoldBack.FromFoldMap f z x\n        static member inline ToSeq    (x:Tree<_>) = Tree<_>.FoldBack (x, (fun x y -> seq {yield x; yield! y}), Seq.empty)\n    \n    let myTree = Node (Node (Leaf 1, 6, Leaf 3), 2 , Leaf 9)\n    let resSum21      = foldMap id   myTree\n    let resProduct324 = foldMap Mult myTree\n    let res21         = foldBack   (+) myTree 0\n    let res21'        = fold       (+) 0 myTree    // <- Tree.Fold is not defined but it fallbacks to the default method (Tree.ToSeq)\n\nmodule FoldableTree2 =\n    type Tree<'a> =\n        | Empty \n        | Leaf of 'a \n        | Node of (Tree<'a>) * 'a * (Tree<'a>)\n\n        // add instance for Foldable abstraction (ToSeq is the minimal definition).\n        static member ToSeq x =        \n            let rec loop t = seq {\n                match t with\n                | Empty        -> ()\n                | Leaf n       -> yield n\n                | Node (l,k,r) -> yield k; yield! loop l; yield! loop r}\n            loop x\n       \n        static member inline FoldBack (x, f, z) = \n            let rec _foldMap x f =\n                match x with\n                | Empty        -> getZero()\n                | Leaf n       -> f n\n                | Node (l,k,r) -> plus (_foldMap l f) (plus (f k) (_foldMap r f))\n            Endo.run (_foldMap x (Endo << f )) z\n\n    \n    let tree = Node (Node (Leaf 1, 6, Leaf 3), 2 , Leaf 9)\n    let res21  = foldBack   (+) tree 0\n\n    // Following operations work by falling back to Tree.ToSeq which is the default\n    let res21' = fold   (+) 0   tree      \n    let resTr  = exists ((=) 3) tree\n    let resS3  = tryPick (fun x -> if x = 3 then Some x else None) tree"},{"uri":"/FSharpPlusabstraction-traversable.html","title":"Traversable\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTraversable\n===========\n\nData structures that can be traversed from left to right, performing an action on each element.\n\n___\n\n\n\nMinimal complete definition\n---------------------------\n\n\n * ``traverse f x`` | ``sequence x``\n*)\n(**\n    static member Traverse (t:'Traversable<'T>, f : 'T->'Functor<'U>) : 'Functor<'Traversable<'U>>\n    static member Sequence (t:'Traversable<'Functor<'T>>) : 'Functor<'Traversable<'T>>\n*)\n(**\n\n\n\nRules\n-----\n*)\n(**\n    t << traverse f = traverse (t << f) \n    traverse Identity = Identity\n    traverse (Compose << map g << f) = Compose << map (traverse g) << traverse f\n*)\n(**\n\n\nRelated Abstractions\n--------------------\n\n - [Functor](abstraction-functor.html): A traversable is generic on the Traversable type parameter and the (Applicative) Functor inner type parameter.\n - [Applicative](abstraction-applicative.html): An applicative is a functor whose ``map`` operation can be splitted in ``return`` and ``(<*>)`` operations. \n - [Foldable](abstraction-foldable.html) : All traversables are foldables.\n\n\nConcrete implementations\n------------------------\n\nFrom .Net/F#\n \n -  ``seq<'T>``\n -  ``list<'T>``\n -  ``array<'T>``\n -  ``option<'T>`` \n -  ``ResizeArray<'T>``\n -  ``Map<'K, 'T>``\n -  ``Result<'T, 'Error>``\n -  ``Choice<'T, 'Error>``\n\n \nFrom F#+\n\n -  [``ZipList<'T>``](type-ziplist.html)\n -  [``NonEmptyList<'T>``](type-nonempty.html)\n -  [``NonEmptyMap<'Key, 'T>``](type-nonempty-map.html)\n -  [``Validation<'Error,'T>``](type-validation.html)\n\n\n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n\nExamples\n--------\n*)\n\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\n\n\n// Some functions\nlet getLine    = async { return System.Console.ReadLine() }\nlet f x = if x < 200 then [3 - x] else []\nlet g x = if x < 200 then Some (3 - x) else None\n\n// traverse\nlet resSomeminus100 = traverse f (Some 103)\nlet resLstOfNull    = traverse f None \nlet res210          = traverse f [1;2;3]  \nlet resSome210      = traverse g [1;2;3]  \nlet resEmptyList    = traverse f [1000;2000;3000] \nlet resEListOfElist = traverse f []\n\n// sequence\nlet resSome321  = sequence [Some 3;Some 2;Some 1]\nlet resNone     = sequence [Some 3;None  ;Some 1]\nlet res654      = (sequence [ (+) 3 ; (+) 2 ; (+) 1]) 3\nlet resCombined = sequence [ [1;2;3] ; [4;5;6]  ]\nlet resLstOfArr = sequence [|[1;2;3] ; [4;5;6] |]  // <- Uses the default method.\nlet resArrOfLst = sequence [[|1;2;3|];[|4;5;6 |]]\n\n// This computation will ask for three user inputs\n// try Async.RunSynchronously get3strings\nlet get3strings = sequence [getLine;getLine;getLine]"},{"uri":"/FSharpPlustype-validation.html","title":"Validation<'Error,'T>\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nValidation<'Error,'T>\n=====================\n\nThis is similar to Result<'T,'Error> but with accumulative errors semantics, instead of short-circuit.\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen System\nopen FSharpPlus\nopen FSharpPlus.Data\n\nmodule MovieValidations=\n    type VError= | MustNotBeEmpty\n                 | MustBeAtLessThanChars of int\n                 | MustBeADate\n                 | MustBeOlderThan of int\n                 | MustBeWithingRange of decimal*decimal\n    module String=\n        let nonEmpty (x:string) : Validation<VError list,string> = \n            if String.IsNullOrEmpty x \n            then Failure [MustNotBeEmpty]\n            else Success x\n        let mustBeLessThan (i:int) (x:string) : Validation<VError list,string> = \n            if isNull x || x.Length > i\n            then Failure [MustBeAtLessThanChars i]\n            else Success x\n    module Number=\n        let mustBeWithin (from,to') (x)=\n            if from<= x && x <= to'\n            then Success x\n            else Failure [MustBeWithingRange (from,to')]\n    module DateTime=\n        let classicMovie year (d:DateTime)=\n            if d.Year < year\n            then Success d\n            else Failure [MustBeOlderThan year]\n        let date (d:DateTime)=\n            if d.Date = d\n            then Success d\n            else Failure [MustBeADate]\n    type Genre=\n        |Classic\n        |PostClassic\n        |Modern\n        |PostModern\n        |Contemporary\n    type Movie = {\n        Id: int\n        Title: String\n        ReleaseDate: DateTime\n        Description: String\n        Price: decimal\n        Genre: Genre\n    }\n    with static member Create(id,title,releaseDate,description,price,genre): Validation<VError list,Movie> =\n            fun title releaseDate description price->{ Id=id;Title=title;ReleaseDate=releaseDate;Description=description;Price=price;Genre=genre }\n            <!> String.nonEmpty title <* String.mustBeLessThan 100 title\n            <*> DateTime.classicMovie 1960 releaseDate <* DateTime.date releaseDate\n            <*> String.nonEmpty description <* String.mustBeLessThan 1000 description\n            <*> Number.mustBeWithin (0.0m, 999.99m) price\n\n    let newRelease = Movie.Create(1,\"Midsommar\",DateTime(2019,6,24),\"Midsommar is a 2019 folk horror film written...\",1m,Classic) //Failure [MustBeOlderThan 1960]\n    let oldie = Movie.Create(2,\"Modern Times\",DateTime(1936,2,5),\"Modern Times is a 1936 American comedy film...\",1m,Classic) // Success..\n    let titleToLong = Movie.Create(3, String.Concat (seq{  1..110 }), DateTime(1950,1,1),\"11\",1m,Classic) //Failure [MustBeAtLessThanChars 100]\n\nmodule Person=\n    type Name = { unName : String } \n    with static member create s={unName=s}\n    type Email = { unEmail : String } \n    with static member create s={unEmail=s}\n    type Age = { unAge : int }\n    with static member create i={unAge=i}\n\n    type Person = { name : Name\n                    email : Email\n                    age : Age }\n    with static member create name email age={name=name;email=email;age=age }\n\n\n    type Error = \n        | NameBetween1And50\n        | EmailMustContainAtChar\n        | AgeBetween0and120\n\n    // Smart constructors\n    let mkName s = \n        let l = length s\n        if (l >= 1 && l <= 50)\n        then Success <| Name.create s\n        else Failure  [ NameBetween1And50 ]\n\n    let mkEmail s = \n        if String.contains '@' s\n        then Success <| Email.create s\n        else Failure [ EmailMustContainAtChar ]\n\n    let mkAge a = \n        if (a >= 0 && a <= 120)\n        then Success <| Age.create a\n        else Failure [ AgeBetween0and120 ]\n\n    let mkPerson pName pEmail pAge =\n        Person.create\n        <!> mkName pName\n        <*> mkEmail pEmail\n        <*> mkAge pAge\n\n    // Examples\n\n    let validPerson = mkPerson \"Bob\" \"bob@gmail.com\" 25\n    // Success ({name = {unName = \"Bob\"}; email = {unEmail = \"bob@gmail.com\"}; age = {unAge = 25}})\n\n    let badName = mkPerson \"\" \"bob@gmail.com\" 25\n    // Failure [NameBetween1And50]\n\n    let badEmail = mkPerson \"Bob\" \"bademail\" 25\n    // Failure [EmailMustContainAtChar]\n\n    let badAge = mkPerson \"Bob\" \"bob@gmail.com\" 150\n    // Failure [AgeBetween0and120]\n\n    let badEverything = mkPerson \"\" \"bademail\" 150\n    // Failure [NameBetween1And50;EmailMustContainAtChar;AgeBetween0and120]\n\n    open FSharpPlus.Lens\n    let asMaybeGood = validPerson ^? Validation._Success\n    // Some ({name = {unName = \"Bob\"}; email = {unEmail = \"bob@gmail.com\"}; age = {unAge = 25}})\n    let asMaybeBad = badEverything ^? Validation._Success\n    // None\n\n    let asResultGood = validPerson ^. Validation.isoValidationResult\n    // Ok ({name = {unName = \"Bob\"}; email = {unEmail = \"bob@gmail.com\"}; age = {unAge = 25}})\n\n    let asResultBad = badEverything ^. Validation.isoValidationResult\n    // Error [NameBetween1And50;EmailMustContainAtChar;AgeBetween0and120]\n\n\nmodule Email =\n\n    // ***** Types *****\n    type AtString = AtString of string \n    type PeriodString = PeriodString of string \n    type NonEmptyString = NonEmptyString of string \n\n    type Email = Email of string \n\n    type VError = | MustNotBeEmpty\n                  | MustContainAt\n                  | MustContainPeriod\n\n    // ***** Base smart constructors *****\n    // String must contain an '@' character\n    let atString (x:string) : Validation<VError list,AtString> =\n        if String.contains '@' x then Success <| AtString x\n        else Failure [MustContainAt]\n\n    // String must contain an '.' character\n    let periodString (x:string) : Validation<VError list,PeriodString> = \n        if String.contains '.' x\n        then Success <| PeriodString x\n        else Failure [MustContainPeriod]\n\n    // String must not be empty\n    let nonEmptyString (x:string) : Validation<VError list,NonEmptyString> = \n        if not <| String.IsNullOrEmpty x \n        then Success <| NonEmptyString x\n        else Failure [MustNotBeEmpty]\n\n    // ***** Combining smart constructors *****\n    let email (x:string) : Validation<VError list, Email> = \n        result (Email x) <*\n        nonEmptyString x <*\n        atString       x <*\n        periodString   x\n\n    // ***** Example usage *****\n    let success = email \"bob@gmail.com\"\n\n    // Success (Email \"bob@gmail.com\")\n\n    let failureAt = email \"bobgmail.com\"\n    // Failure [MustContainAt]\n\n    let failurePeriod = email \"bob@gmailcom\"\n    // Failure [MustContainPeriod]\n\n\n    let failureAll = email \"\"\n    // Failure [MustNotBeEmpty;MustContainAt;MustContainPeriod]"},{"uri":"/FSharpPlustype-seqt.html","title":"TO-DO Add some docs here !\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nTO-DO Add some docs here !\n=========================\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus"},{"uri":"/FSharpPlustype-writer.html","title":"Writer<'Monoid,'T>\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nWriter<'Monoid,'T>\n==================\n\nThe Writer monad is good way to introduce a log of a computation. \nIt gives you a different way of logging that can be useful when you want to be able to inspect the logged results.\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\ntype LogEntry={msg:string}\nwith\n    static member create x = {msg = x}\n\nlet output x =  Writer.tell [LogEntry.create x]\n\nlet calc = monad {\n  do! output \"I'm going to start a heavy computation\" // start logging\n  let y = sum [1..100_000]\n  do! output (string y)\n  do! output \"The computation finished\"\n  return y // return the result of the computation\n}\n\nlet logs = Writer.exec calc\nlet (y,logs') = Writer.run calc\n\n(**\nThere are some performance implications around using a regular list, that's why you should use DList in these scenarios\n*)\n\nlet output' x =  Writer.tell <| DList.ofSeq [LogEntry.create x]\n\nlet calc' = monad {\n  do! output' \"I'm going to start a heavy computation\" // start logging\n  let y = sum [1..100_000]\n  do! output' (string y)\n  do! output' \"The computation finished\"\n  return y // return the result of the computation\n}\n\nlet logs2 = Writer.exec calc'\nlet (y',logs2') = Writer.run calc'"},{"uri":"/FSharpPlusabstraction-arrow.html","title":"Arrow\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nArrow\n=====\n\nArrow<'T, 'U> represents a process that takes as input something of type 'T and outputs something of type 'U.\n\n___\n\n\n\nMinimal complete definition\n---------------------------\n\n\n * ``arr f`` and  ``first f``\n\n*)\n(**\n    static member Arr(f: 'T -> 'U) : 'Arrow<'T, 'U>\n    static member First (f: 'Arrow<'T, 'U>) : 'Arrow<('T * 'V),('U * 'V)>\n*)\n(**\n\n\n\nOther operations\n----------------\n\n * ``second f``\n*)\n(**\n    static member Second (f: 'Arrow<'T, 'U>) : 'Arrow<('V * 'T),('V * 'U)>\n*)\n(**\n * ``(***) f g``\n*)\n(**\n    static member ``***`` (f : 'Arrow<'T1,'U1>) (g : 'Arrow<'T2,'U2>) : 'Arrow<('T1 * 'T2),('U1 * 'U2)>\n*)\n(**\n * ``(&&&) f g``\n*)\n(**\n    static member  (&&&) (f : 'Arrow<'T,'U1>) (g : 'Arrow<'T,'U2>) : 'Arrow<'T,('U1 * 'U2)>\n*)\n(**\n\n\n\nRules\n-----\n*)\n(**\n    arr id = id\n    arr (f >>> g) = arr f >>> arr g\n    first (arr f) = arr (first f)\n    first (f >>> g) = first f >>> first g\n    first f >>> arr fst = arr fst >>> f\n    first f >>> arr (id *** g) = arr (id *** g) >>> first f\n    first (first f) >>> arr assoc = arr assoc >>> first f\n\n    where assoc ((a,b),c) = (a,(b,c))\n*)\n(**\n\n\nConcrete implementations\n------------------------\n\nFrom .Net/F#\n \n -  ``'T->'U``\n -  ``Func<'T,'U>``\n\n \nFrom F#+\n\n -  [``Kleisli<'T, 'Monad<'U>>``](type-kleisli.html)\n\n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n*)"},{"uri":"/FSharpPlusextensions.html","title":"Extensions\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\n(**\nExtensions\n=======================\nExtensions are what you probably expect: helper functions for existing types.\n \nThey are defined as modules with the same name as the types they operate on\nunder the FSharpPlus namespace, so can be accessed via:\n*)\nopen FSharpPlus\n\n(**\nSome functions are common across foldable types such as `intercalate` on\nList, Array and Seq, and others are common across wrapping containers,\nsuch as `map`, `bind` and `apply` on List, Array, and Seq, but also Option and Result.\n\nConstruction:\n=============\nThe `singleton` function is already defined for Seq, Array and List, but F#+ adds it for Enumerator:\n\n * Enumerator.singleton - construct a container with the given value inside it\n\nTo construct MonadError instances (Result or Choice) you can use result/throw:\n\n * Result.result / Choice.result - construct with the given value (as Ok or Choice1Of2)\n * Result.throw / Choice.throw - construct an error from the given value (as Error or Choice2of2)\n\nIt's also possible to construct by wrapping exception producing functions:\n\n * Option.protect - returns None on exception\n * Result.protect - returns Error with exception value on exception\n * Choice.protect - returns Choice2Of2 with exception value on exception\n*)\n// throws \"ArgumentException: The input sequence was empty.\"\nlet expectedSingleItem1 : int = List.exactlyOne []\n\n// returns a Result.Error holding the exception as its value:\nlet expectedSingleItem2 : Result<int,exn> = Result.protect List.exactlyOne []\n\n// ...or like typical try prefixed functions, treat exception as None\nlet expectedSingleItem3 : Option<int> = Option.protect List.exactlyOne []\n\n// which might look like this:\nlet inline tryExactlyOne xs = Option.protect List.exactlyOne xs\n\n(**\nDeconstruction (unwrapping):\n============================\nSome extensions on Result are designed to behave like Option:\n\n * Result.get - unwraps the value when it is an 'ok, otherwise throws an exception\n * Result.defaultValue - return the 'ok value if present, otherwise the default value\n * Result.defaultWith - return the 'ok value if present, otherwise apply the given function\n   to the 'error value\n\nTo deconstruct MonadError instances (Result or Choice) use:\n\n * Result.either - unwraps the result by applying the given `ok` or `err` function as appropriate\n * Choice.either - unwraps the choice by applying the given `choice1` or `choice2` function as appropriate\n\nNote that there is also the generic `either` operator function that works\nexactly the same as `Result.either`.\n\nAlso, see the generic function [`option`](reference/fsharpplus-operators.html) that\nunwraps an Option in a similar way to `either`.\n\nOn Foldables\n============\nFoldables are the class of data structures that can be folded to a summary value.\nMost collections, or specifically 'foldable' instances implement these:\n\n * intersperse - takes an element and `intersperses' that element between the elements\n\n*)\nlet a = [\"Bob\"; \"Jane\"] |> List.intersperse \"and\"\n// vat a : string list = [\"Bob\"; \"and\"; \"Jane\"]\n\nlet b = \"WooHoo\" |> String.intersperse '-'\n// val b : string = \"W-o-o-H-o-o\"\n\n(**\n * intercalate - insert a list of elements between each element and flattens\n*)\nlet c = [[1;2]; [3;4]] |> List.intercalate [-1;-2];;\n// val c : int list = [1; 2; -1; -2; 3; 4]\n\nlet d = [\"Woo\"; \"Hoo\"] |> String.intercalate \"--o.o--\";;\n// val d : string = \"Woo--o.o--Hoo\"\n\n(**\n * zip/unzip - tuple together values inside two containers, or untuble tupled values\n\nOn Monad/Functor/Applicatives\n=============================\nTypes that implement these will (typically) have these functions defined:\n\n * map - apply a mapping function to the value inside a container\n * bind - take a contained value, and apply a function that produces another contained value\n * apply - like map but where the mapping function is also inside a container\n\nThese can also be invoked from the generic functions without module prefix as per\n[generic functions & operators](reference/fsharpplus-operators.html).\n\nFlatten:\n========\nFlatten can be used when a container has another container inside it:\n\n * Choice.flatten\n * Result.flatten\n * Option.flatten (already defined in FSharp Core)\n\nNote that on traversable types like List, Array and Seq, FSharp Core uses the\nmore common `concat` for flatten and so this naming is continued for Enumerable:\n\n * Enumerable.concat\n\nPartitioning:\n=============\nPartitioning can be done by applying a separating function that produces a Choice:\n\n * Array.partitionMap\n * List.partitionMap\n*)\nlet isEven x = (x % 2) = 0\nlet chooseEven x = if isEven x then Choice1Of2 x else Choice2Of2 x\n\nlet e = [1; 2; 3; 4] |> List.partitionMap chooseEven\n// val e : int list * int list = ([2; 4], [1; 3])\n\n(**\nConversion functions:\n=====================\nF#+ adds functions to convert between Result, Choice and Option types.\n\nThese should be self explanatory, but be aware that sometimes they are 'lossy'\nusually when converting to Option:\n*)\n(**\n// Convert a `Result` to an `Option` - effectively throws away error value\n// when present, by replacing with `None`\n```f#\nrequest |> validateRequest |> Option.ofResult\n```\n*)\n\n(**\nGoing the other way is similar, but a value needs to be filled in for None:\n*)\nlet xs = [\"some value\"]\nlet firstElementOption = xs |> List.tryHead\n\n// Convert an `Option` to a `Result` will use unit as the Error:\nfirstElementOption |> Option.toResult\n\n// ...but you can specify an error value with Option.toResultWith:\nfirstElementOption |> Option.toResultWith \"No Element\"\n\n(**\nConverting between `Choice` and `Result` is often useful:\n```f#\nlet asyncChoice = anAsyncValue |> Async.Catch |> Async.map Result.ofChoice\n```\n*)\n\n(**\nThe String type:\n================\n\n * [ String ](reference/fsharpplus-string.html)\n   * intercalate, intersperse, \n   * split, replace\n   * isSubString, startsWith, endsWith, contains\n   * toUpper, toLower\n   * trimWhiteSpaces\n   * normalize\n   * removeDiacritics\n   * padLeft, padLeftWith, padRight, padRightWith\n   * trim, trimStart, trimEnd\n   * item, tryItem\n   * rev\n   * take, skip takeWhile, skipWhile\n   * truncate, drop\n   * findIndex, tryFindIndex\n   * findSliceIndex, tryFindSliceIndex\n   * toArray, ofArray, toList, ofList, toSeq, ofSeq, toCodePoints, ofCodePoints\n   * getBytes\n\nCollections / Traversable types:\n=================================\n * [Array](reference/fsharpplus-array.html)\n   * intercalate, intersperse,\n   * split, replace,\n   * findSliceIndex, trySliceIndex,\n   * partitionMap\n * [IList](reference/fsharpplus-ilist.html)\n   * toIReadOnlyList\n * [List](reference/fsharpplus-list.html)\n   * singleton,\n   * cons,\n   * apply,\n   * tails, take, skip, drop,\n   * intercalate, intersperse, \n   * split, replace,\n   * toIReadOnlyList,\n   * findSliceIndex, tryFindSliceIndex,\n   * partitionMap\n * [Enumerator](reference/fsharpplus-enumerator.html)\n   * EmptyEnumerator\n      * Empty - create an empty enumerator\n   * ConcatEnumerator\n      * concat\n   * MapEnumerators\n      * map, mapi, map2, mapi2, map3\n   * singleton\n   * tryItem, nth\n   * choose\n   * filter\n   * unfold\n   * upto\n   * zip, zip3\n * [ Seq ](reference/fsharpplus-seq.html)\n    * bind, apply, foldback\n    * chunkBy\n    * intersperse, intercalate,\n    * split, replace\n    * drop\n    * replicate\n    * toIReadOnlyList\n    * findSliceIndex, tryFindSliceIndex\n * [ IReadOnlyCollection ](reference/fsharpplus-ireadonlycollection.html)\n     * ofArray, ofList, ofSeq\n     * map\n * [ IReadOnlyList ](reference/fsharpplus-ireadonlylist.html)\n   * ofArray, toArray\n   * trySetItem, tryItem\n * [ Map ](reference/fsharpplus-map.html)\n   * keys, values\n   * mapValues, mapValues2\n   * zip, unzip\n   * unionWith, union, intersectWith, intersect\n * [ Dict ](reference/fsharpplus-dict.html)\n   * toIReadOnlyDictionary\n   * tryGetValue\n   * containsKey\n   * keys, values\n   * map, map2\n   * zip, unzip\n   * unionWith, union, intersectWith, intersect\n * [ IReadOnlyDictionary ](reference/fsharpplus-ireadonlydictionary.html)\n   * add, \n   * tryGetValue, containsKey,\n   * keys, values,\n   * map, map2, \n   * zip, unzip, \n   * unionWith, union, intersectWith, intersect\n\nAsync and Tasks:\n================\n * [ Task ](reference/fsharpplus-task.html)\n   * map, map2\n   * apply\n   * zip\n   * join\n * [ Async ](reference/fsharpplus-async.html)\n   * map, map2\n   * zip\n   * join\n   * apply\n   * raise\n\nOption, Choice and Result types:\n================================\n * [Option](reference/fsharpplus-option.html)\n   * apply, \n   * unzip, zip,\n   * toResult, toResultWith, ofResult, \n   * protect\n * [Choice](reference/fsharpplus-choice.html)\n   * result, throw - construct a Choice\n   * bind, apply, flatten,\n   * map,\n   * catch, - deprecated\n   * bindChoice2Of2,\n   * either,\n   * protect\n * [ Result ](reference/fsharpplus-result.html)\n   * result, throw - construct a Result\n   * apply, (map, bind already defined)\n   * flatten,\n   * bindError,\n   * either,\n   * protect,\n   * get,\n   * defaultValue, defaultWith,\n   * toChoice, ofChoice,\n   * partition\n\nExtensions Methods (on existing types):\n=======================================\nThese are usable from C#\n\n * [ Extension Methods ](extension-methods.html)\n   * IEnumerable<'T'>.GetSlice\n   * List<'T>.GetSlice\n   * Task<'T>.WhenAll\n   * Async.Sequence - of seq, list or array\n   * Option.Sequence - of seq\n\n*)"},{"uri":"/FSharpPlustype-dlist.html","title":"DList\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nDList\n=========================\n\nDList is an ordered linear structure implementing the List signature (head, tail, cons), \nend-insertion (add), and O(1) append. Ordering is by insertion history.\nDList is an implementation of [John Hughes' append list](http://dl.acm.org/citation.cfm?id=8475).\n\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\n(**\n### Constructing DLists\n*)\n// you can construct a DList by using ofSeq\nlet list123 = DList.ofSeq [ 1; 2; 3 ]\n\nlet listEmpty = DList.empty\n// cons\nlet list2 = DList.cons 100 list123 \n// append two DLists\nlet list3 = DList.append list2 (DList.singleton 200)\n// this can be written as (since list2 is a DList):\nlet list3' = plus list2 (result 200)\n// in order to get back to a regular list you can then use toList:\nlet list4 = toList list3'\n\n(**\n### Operations on DList\n*)\n\nlet lengthOfList3 = DList.length list3\nlet lengthOfList3' = length list3\n\nlet headOf3 = DList.head list3 \nlet headOf3' = head list3 "},{"uri":"/FSharpPlusabstraction-functor.html","title":"Functor\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nFunctor\n=======\nThe Functor abstraction is used for types that can be mapped over.\n___\nMinimal complete definition\n---------------------------\n * ``map f x``/``(|>>) x f``/``(<<|) f x``/``(<!>) f x``\n*)\n(**\n    static member Map (x:'Functor<'T>, f:'T->'U) :'Functor<'U>\n*)\n(**\nOther operations\n----------------\n * ``unzip x``\n*)\n(**\n    static member Unzip (x:Functor<'T * 'U>) :'Functor<'T> * 'Functor<'U>\n*)\n(**\nRules\n-----\n*)\n(**\n    map id  =  id\n    map (f << g) = map f << map g\n*)\n(**\nRelated Abstractions\n--------------------\n - [Applicative](abstraction-applicative.html): An applicative is a functor whose ``map`` operation can be splitted in ``return`` and ``(<*>)`` operations,\n \n - [Monad](abstraction-monad.html) : Monads are functors with an additional ``Join`` operation,\nConcrete implementations\n------------------------\nFrom F#\n \n -  ``seq<'T>``\n -  ``list<'T>``\n -  ``array<'T>``\n -  ``'T [,]``\n -  ``'T [,,]``\n -  ``'T [,,,]``\n -  ``option<'T>`` \n -  ``IObservable<'T>``\n -  ``Lazy<'T>``\n -  ``Async<'T>``\n -  ``Result<'T,'U>``\n -  ``Choice<'T,'U>``\n -  ``KeyValuePair<'Key,'T>``\n -  ``Map<'Key,'T>``\n -  ``'Monoid * 'T``\n -  ``Task<'T>``\n -  ``'R->'T``\n -  ``Expr<'T>``\n -  ``Dictionary<'Key,'T>``\n -  ``IDictionary<'Key,'T>``\n -  ``IReadOnlyDictionary<'Key,'T>``\n -  ``ResizeArray<'T>``\n \nFrom F#+\n\n -  [``Cont<'R,'T>``](type-cont.html)\n -  [``ContT<'R,'T>``](type-contt.html)\n -  [``Reader<'R,'T>``](type-reader.html)\n -  [``ReaderT<'R,'Monad<'T>>``](type-readert.html)\n -  [``Writer<'Monoid,'T>``](type-writer.html)\n -  [``WriterT<'Monad<'T * 'Monoid>>``](type-writert.html)\n -  [``State<'S,'T * 'S>``](type-state.html)\n -  [``StateT<'S,'Monad<'T * 'S>>``](type-statet.html)\n -  [``OptionT<'Monad<option<'T>>``](type-optiont.html)\n -  [``SeqT<'Monad<seq<'T>>``](type-seqt.html)\n -  [``ListT<'Monad<list<'T>>``](type-listt.html)\n -  [``ResultT<'Monad<Result<'T,'TError>>``](type-resultt.html)\n -  [``ChoiceT<'Monad<Choice<'T,'TError>>``](type-choicet.html)\n -  [``Free<'Functor<'T>,'T>``](type-free.html)\n -  [``NonEmptyList<'T>``](type-nonempty.html)\n -  [``NonEmptySet<'T>``](type-nonempty-set.html)\n -  [``NonEmptyMap<'Key, 'T>``](type-nonempty-map.html)\n -  [``Validation<'Error,'T>``](type-validation.html)\n -  [``ZipList<'T>``](type-ziplist.html)\n -  [``ParallelArray<'T>``](type-parallelarray.html)\n -  [``Const<'C,'T>``](type-const.html)\n -  [``Compose<'AlternativeF<'AlternativeG<'T>>>``](type-compose.html)\n -  [``DList<'T>``](type-dlist.html)\n -  [``Kleisli<'T, 'Monad<'U>>``](type-kleisli.html)\n -  [``Coproduct<'FunctorL<'T>,'FunctorR<'T>>``](type-coproduct.html)\n -  [``Vector<'T,'Dimension>``](type-vector.html)\n -  [``Matrix<'T,'Rows,'Columns>``](type-matrix.html)\n\nRestricted:\n -  ``string``\n -  ``StringBuilder``\n -  ``Set<'T>``\n -  ``IEnumerator<'T>``\n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n\nExamples\n--------\n*)\n\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Math.Generic\n\nlet getLine    = async { return System.Console.ReadLine() }\nlet putStrLn x = async { printfn \"%s\" x}\nlet print    x = async { printfn \"%A\" x}\n\n// Test IO\nlet action = monad {\n    do! putStrLn  \"What is your first name?\"\n    let! fn = getLine\n    do! putStrLn  (\"Thanks, \" + fn) \n    do! putStrLn  (\"What is your last name?\")\n    let! ln = getLine\n    let  fullname = fn + \" \" + ln\n    do! putStrLn  (\"Your full name is: \" + fullname)\n    return fullname }\n\n\n// Test Functors\nlet times2,minus3 = (*) 2, (-)/> 3\nlet resSome1      = map minus3 (Some 4G)\nlet noValue       = map minus3 None\nlet lstTimes2     = map times2 [1;2;3;4]\nlet fTimes2minus3 = map minus3 times2\nlet res39         = fTimes2minus3 21G\nlet getChars      = map (fun (x:string) -> x.ToCharArray() |> Seq.toList ) action\nlet quot7         = map ((+)2) <@ 5 @>\n\n\n// try -> runIO getChars ;;\n\n// Define a type Tree\ntype Tree<'a> =\n    | Tree of 'a * Tree<'a> * Tree<'a>\n    | Leaf of 'a\n    static member map f (t:Tree<'a>  )  =\n        match t with\n        | Leaf x -> Leaf (f x)\n        | Tree(x,t1,t2) -> Tree(f x, Tree.map f t1, Tree.map f t2)\n\n// add instance for Functor class\n    static member Map (x:Tree<_>, f) = Tree.map f x\n\nlet myTree = Tree(6, Tree(2, Leaf 1, Leaf 3), Leaf 9)\nlet mappedTree = map fTimes2minus3 myTree\n\n\n\n// An Applicative is automatically a Functor\n\ntype ZipList<'s> = ZipList of 's seq with\n    static member Return (x:'a)     = ZipList (Seq.initInfinite (konst x))\n    static member (<*>) (ZipList (f:seq<'a->'b>), ZipList x) = ZipList (Seq.zip f x |> Seq.map (fun (f, x) -> f x)) : ZipList<'b>\n\nlet mappedZipList = map string (ZipList [1;2;3])\n\n\n// A Monad is automatically a Functor\n\ntype MyList<'s> = MyList of 's seq with\n    static member Return (x:'a)     = MyList x\n    static member (>>=)  (MyList x: MyList<'T>, f) = MyList (Seq.collect (f >> (fun (MyList x) -> x)) x)\n\nlet mappedMyList = map string (MyList [1;2;3])"},{"uri":"/FSharpPlusabstraction-bifunctor.html","title":"Bifunctor\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nBifunctor\n=======\n\nIntuitively a bifunctor is a functor with 2 arguments which are covariant.\n\n___\n\nA bifunctor (short for binary functor) or functor of two variables is simply a functor whose domain is the product of two types.\n\n\nMinimal complete definition\n---------------------------\n\n\n * ``bimap f g x``\n*)\n(**\n    static member Bimap (x:'Bifunctor<'T,'V>, f:'T->'U, g:'V->'W) :'Bifunctor<'U,'W>\n*)\n(**\n\n\nOther operations\n----------------\n\n * ``first f x``\n*)\n(**\n    static member First (x:Bifunctor<'T,'V>, f:'T->'U) :'Bifunctor<'U,'V>\n*)\n(**\n\n * ``second g x``\n*)\n(**\n    static member Map (x:Bifunctor<'T,'V>, f:'V->'W) :'Bifunctor<'T,'W>\n*)\n(**\n\n\n\n\nRules\n-----\n*)\n(**\n    bimap f g = first f << second g\n*)\n(**\n\n\nRelated Abstractions\n--------------------\n\n - [Functor](abstraction-functor.html): All bifunctors are also functors over the second parameter.\n\n\nConcrete implementations of Bifunctor<'T1,'T2>\n-----------------------------------------------\n\nFrom .Net/F#\n \n -  ``'T1 * 'T2``\n -  ``Result<'T2,'T1>``\n -  ``Choice<'T2,'T1>``\n -  ``KeyValuePair<'T1,'T2>``\n\n \nFrom F#+\n\n -  [``Const<'C,'T>``](type-const.html)\n -  [``Validation<'Error,'T>``](type-validation.html)\n\n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n\nExamples\n--------\n*)\n\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\n\n// convert (map) first element to an int and the second to a string\nlet rInt10Str10 = bimap  int string (10.0, 10)\n\n\nlet resOk11  = bimap  ((+) 1) string (Ok 10)\nlet rStrTrue = first  string (true, 10)\nlet rStr10   = second string (true, 10)"},{"uri":"/FSharpPlustype-compose.html","title":"Compose\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nCompose\n=======\n\nAllows to compose applicatives and functors.\n\nIt worth noting that:\n\n - A composition of 2 functors is a functor\n - A composition of 2 applicatives is an applicative\n - A composition of 2 monads is not always a monad\n\nExamples\n--------\n*)\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen FSharpPlus\nopen FSharpPlus.Data\n\n// First let's create some values\n\nlet (one : Async<Result<int, string>>) = async { return Ok 1 }\nlet (two : Async<Result<int, string>>) = async { return Ok 2 }\n\n// Now we can combine then\n\nlet (Compose three) = Compose (async {return Ok (+)}) <*> Compose one <*> Compose two\n// val three : Async<FSharpPlus.Result<int,string>>\n\n// or shorter\n\nlet (Compose three') = (+) <!> Compose one <*> Compose two\n// val three' : Async<FSharpPlus.Result<int,string>>"},{"uri":"/FSharpPlusabstraction-contravariant.html","title":"Contravariant\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n(**\nContravariant\n=============\n\nA Contravariant Functor can be mapped over the input.\n\n___\n\nOne can think of a [Functor](abstraction-functor.html) as containing or producing values, a contravariant functor is a functor that can be thought of as consuming values.\n\nMinimal complete definition\n---------------------------\n\n\n * ``contramap f x``\n*)\n(**\n    static member Contramap (x:'Contravariant<'T>, f:'U->'T) :'Contravariant<'U>\n*)\n(**\n\n\n\n\nRules\n-----\n*)\n(**\n    contramap id = id\n    contramap f << contramap g = contramap (g << f)\n*)\n(**\n\n\nRelated Abstractions\n--------------------\n\n - [Functor](abstraction-functor.html): A Covariant Functor.\n \n - [Profunctor](abstraction-profunctor.html) : A profunctor is a bifunctor that is contravariant in the first argument and covariant in the second.\n\n\nConcrete implementations\n------------------------\n\nFrom .Net/F#\n \n -  ``('T -> 'U)``\n -  ``Predicate<'T>``\n -  ``IComparer<'T>``\n -  ``IEqualityComparer<'T>``\n\n \nFrom F#+\n\n -  [``Const<'C,'T>``](type-const.html)\n\n [Suggest another](https://github.com/fsprojects/FSharpPlus/issues/new) concrete implementation\n\nExamples\n--------\n*)\n\n\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\n\nopen System\nopen FSharpPlus\n\n\nmodule Predicate = let run (p: Predicate<_>) x = p.Invoke (x)\n\nlet intToString (x:int) = string x\nlet resStr54 = contramap (fun (x:float) -> int x) intToString <| 54.\nlet isEven      = Predicate (fun x -> x % 2 = 0)\nlet fstIsEven   = contramap List.head isEven\nlet resBoolTrue = Predicate.run fstIsEven [0..10]\n\ntype Person = Person of string\nlet personEqComp = HashIdentity.Structural<Person>\nlet personList = [1, Person \"me\"; 2, Person \"you\"; 3, Person \"you\"]\nlet cnt3 = Seq.length <| Linq.Enumerable.Distinct (personList)\nlet cnt2 = Seq.length <| Linq.Enumerable.Distinct (personList, contramap snd personEqComp)\n\n(**\nFor instance a predicate function from a type to bool. An example of such a function is the predicate that classifies \nintegers as negative: \n*)\nlet negative = Predicate( fun integer -> integer < 0 )\n(**\n\nHowever, given this predicate, we can re-use it in other situations, providing we have a way to map values to integers. \nFor instance, we can use the `negative` predicate on a person's bank balance to work out if they are currently overdrawn.\n*)\nlet personBankBalance (person:Person) : int = failwith \"query persons bank account\" \nlet overdrawn = contramap personBankBalance negative"},{"uri":"/FSharpPlusnumerics.html","title":"Numeric functions\n","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use \n// it to define helpers that you do not want to show in the documentation.\n#I \"../../bin\"\n\n#r @\"../../src/FSharpPlus/bin/Release/net45/FSharpPlus.dll\"\nopen FSharpPlus\n\n(**\nNumeric functions\n=================\n\nThis library comes with some additional numeric functions and constants.\n\nThese functions work over many numeric types\n\n*)\n\nlet qr0  = divRem 7  3  //val qr0 : int * int = (2, 1)\nlet qr1  = divRem 7I 3I //val qr1 : System.Numerics.BigInteger * System.Numerics.BigInteger = (2, 1)\nlet qr2  = divRem 7. 3. //val qr2 : float * float = (2.333333333, 0.0) -> using default method.\n\n(**\n\nNumeric constants\n=================\n\nApart from typical math constants, bounded types comes with <code>minValue</code> and <code>maxValue</code> constants.\n\nHere's an example how can this be used to implement an efficient <code>findMin</code> function\n\n*)\n\nlet inline findMin (lst: 'a list) =\n    let rec loop acc = function\n        | [] -> acc\n        | x::_ when x = minValue -> x\n        | x::xs -> loop (if x < acc then x else acc) xs\n    loop maxValue lst\n    \nlet minInt  = findMin [1;0;12;2]\nlet minUInt = findMin [1u;0u;12u;2u]  // loops only twice\n\n\n(**\nGeneric operations over numeric types\n=====================================\n\n*)\n\n(**\n\nWriting code that is generic over different numeric types can be really tedious in F#.\n\nUsing this library it becomes an easy task, but it's important to understand the numeric abstractions and its limitations.\n\nIn order to have a reasonable type inference over generic types we need strict operations.\n\nFor example the F# definition of <code>(+)</code> can take 2 different types, this makes possible to interact with some .NET types that have defined the <code>(+)</code> operator in a very arbitrary way.\n\nFor instance you can add a <code>float</code> to a <code>DateTime</code> with the <code>(+)</code> operator, and that <code>float</code> will be interpreted as seconds.\n\nBy opening the <code>FSharpPlus.Math.Generic</code> namespace this will no longer be possible, because that's the tradeoff in order to get decent type inference.\n\n\n\nGeneric number literals\n=======================\n\nNumbers with a G suffix are generics.\n\n*)\n\nopen FSharpPlus.Math.Generic\n\nlet res5Int  : int    = 5G\nlet res5UInt : uint32 = 5G\n\n(**\nOften you need to define generic constants when defining generic functions.\nSince there is no way to define generic decimal literals in F# at the moment of writing this, we can use divisions:\n*)\n\n\nlet inline areaOfCircle radio =\n    let pi = \n        314159265358979323846264338G \n                    / \n        100000000000000000000000000G\n    pi * radio * radio\n\nlet area1 = areaOfCircle 5.\nlet area2 = areaOfCircle 5.0f\nlet area3 = areaOfCircle 5.0M\n\n\n\n(**\nDefining custom types, support generic operations\n=================================================\n*)\n\ntype Vector2d<'T> = Vector2d of 'T * 'T  with\n    static member inline (+) (Vector2d(a:'t, b:'t), Vector2d(c:'t, d:'t)) = Vector2d (((a + c):'t), ((b + d):'t))\n    static member inline (-) (Vector2d(a:'t, b:'t), Vector2d(c:'t, d:'t)) = Vector2d (((a - c):'t), ((b - d):'t))\n    static member inline (*) (Vector2d(a:'t, b:'t), Vector2d(c:'t, d:'t)) = Vector2d (((a * c):'t), ((b * d):'t))\n    static member        Return x                               = Vector2d (x, x)\n    static member        Map(Vector2d(x, y), f)                 = Vector2d (f x, f y)\n    static member inline FromBigInt x = let y = fromBigInt x in Vector2d (y, y)\n\n(**\nNote we don't define overloads for adding a vector to a number\n\nWhy? Apart from being tedious they will break math operators strictness \n\nso we will have problems type inferencing generic functions.\n\nOK, but then how to add (subtract, multiply) to a number?\n\n\n\nOption 1, explicitely 'lift' the number.\n\nRequires Return and ( + , - , * )\n\n*)\n\nlet x1  = Vector2d (32,5) + result 7\nlet x1' = result 7 + Vector2d (32,5)\n\n(**\nOption 2, use Generic Numbers\n\nRequires <code>FromBigInt</code> and (+,-,*,/)\n*)\n\nopen FSharpPlus.Math.Generic\nlet x2  = Vector2d (32,5) + 7G\nlet x2' = 7G + Vector2d (32,5)\n\n(**\nOption 3, use Applicative Math Operators\nRequires only <code>Map</code>\n*)\n\nopen FSharpPlus.Math.Applicative\nlet x3 = Vector2d (32,5) .+ 7\nlet x3' = 7 +. Vector2d (32,5)\n\n\n(**\nIntegrate with 3rd party libraries\n==================================\n\nWe may use types defined in other libraries, let's suppose we have this type Ratio defined somewhere.\n*)\n\ntype Ratio =\n    struct\n        val Numerator   : bigint\n        val Denominator : bigint\n        new (numerator: bigint, denominator: bigint) = {Numerator = numerator; Denominator = denominator}\n    end\n    override this.ToString() = this.Numerator.ToString() + \" % \" + this.Denominator.ToString()\n\nlet ratio (a:bigint) (b:bigint) :Ratio =\n    if b = 0I then failwith \"Ratio.%: zero denominator\"\n    let a, b = if b < 0I then (-a, -b) else (a, b)\n    let gcd = gcd a b\n    Ratio (a / gcd, b / gcd)\n\nlet Ratio (x,y) = x </ratio/> y\n\ntype Ratio with\n    static member inline (/) (a:Ratio, b:Ratio) = (a.Numerator * b.Denominator) </ratio/> (a.Denominator * b.Numerator)                                              \n    static member inline (+) (a:Ratio, b:Ratio) = (a.Numerator * b.Denominator + b.Numerator * a.Denominator) </ratio/> (a.Denominator * b.Denominator)\n    static member inline (-) (a:Ratio, b:Ratio) = (a.Numerator * b.Denominator - b.Numerator * a.Denominator) </ratio/> (a.Denominator * b.Denominator)\n    static member inline (*) (a:Ratio, b:Ratio) = (a.Numerator * b.Numerator) </ratio/> (a.Denominator * b.Denominator)\n\n    static member inline Abs        (r:Ratio) = (abs    r.Numerator) </ratio/> r.Denominator\n    static member inline Signum     (r:Ratio) = (signum r.Numerator) </ratio/> 1I\n    static member inline FromBigInt (x:bigint) = fromBigInt x </ratio/> 1I\n    static member inline (~-)       (r:Ratio) = -(r.Numerator) </ratio/> r.Denominator\n\n(**\nSince most Rational implementations have Numerator and Denominator defined we can just use our generic functions on it:\n*)\n\nlet some3_2 = trySqrt (Ratio(9I, 4I))\n\n\n(**\n\nExample: creating a polymorphic quadratic function\n==================================================\n\nThe quadratic function has different results depending on which domain it operates.\n\nFor example for real numbers it can have 0 or 2 solutions (arguably also 1 that is a double solution).\n\nBut for complex numbers it always has 2 solutions.\n\n*)\n\nopen FSharpPlus.Math.Generic\n\nlet inline quadratic a b c =\n    let root1 = ( -b + sqrt (  b * b - 4G * a * c) )  / (2G * a)\n    let root2 = ( -b - sqrt (  b * b - 4G * a * c) )  / (2G * a)\n    (root1,root2)\n\n\nlet noRes  = quadratic 2.0  3G 9G\n// val noRes : float * float = (nan, nan)\n\nlet res30_15  = quadratic 2.0  -3G -9G\n// val res30_15 : float * float = (3.0, -1.5)\n\nlet res30_15f = quadratic 2.0f -3G -9G\n// val res30_15f : float32 * float32 = (3.0f, -1.5f)\n\nlet resCmplx:System.Numerics.Complex * _ = quadratic 2G -3G 9G\n// val resCmplx : System.Numerics.Complex * System.Numerics.Complex = ((0.75, -1.98431348329844), (0.75, 1.98431348329844))\n\nlet res30_15r:Ratio * _ = quadratic 2G -3G -9G\n// val res30_15r : Ratio * Ratio = (3 % 1, -3 % 2)"}]